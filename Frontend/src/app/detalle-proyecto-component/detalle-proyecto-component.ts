import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { SidebarComponent } from '../sidebar-component/sidebar-component';

interface Project {
  id: number;
  title: string;
  subtitle: string;
  description: string;
  type: 'guiado' | 'libre' | 'colaborativo' | 'desafio-ia';
  difficulty: 'principiante' | 'intermedio' | 'avanzado' | 'experto';
  duration: string;
  totalXP: number;
  baseXP: number;
  bonusXP: number;
  iaEvaluation: boolean;
  progress: number;
  status: 'no-iniciado' | 'en-progreso' | 'completado';
}

interface Technology {
  name: string;
  icon: string;
  category: string;
  required: boolean;
}

interface Requirement {
  id: number;
  description: string;
  type: 'conocimiento' | 'curso' | 'habilidad';
  status: 'completado' | 'pendiente' | 'en-progreso';
  courseId?: number;
}

interface RoadmapPhase {
  id: number;
  title: string;
  description: string;
  icon: string;
  status: 'completado' | 'activo' | 'pendiente';
  objectives: string[];
  xp: number;
  duration: string;
  resources: string[];
}

interface Skill {
  name: string;
  level: number;
  category: 'tecnica' | 'blanda';
}

interface ChatMessage {
  id: number;
  text: string;
  isUser: boolean;
  timestamp: Date;
  type: 'sugerencia' | 'feedback' | 'pista' | 'evaluacion';
}

interface TestCase {
  id: number;
  title: string;
  description: string;
  status: 'pasado' | 'fallado' | 'no-ejecutado';
  type: 'automatico' | 'personalizado';
}

interface Badge {
  id: number;
  name: string;
  description: string;
  icon: string;
  earned: boolean;
  xp: number;
}

interface Resource {
  id: number;
  title: string;
  description: string;
  icon: string;
  type: 'documento' | 'video' | 'repositorio' | 'articulo';
  url: string;
}

@Component({
  selector: 'app-detalle-proyecto',
  standalone: true,
  imports: [CommonModule, FormsModule, SidebarComponent],
  templateUrl: './detalle-proyecto-component.html',
  styleUrls: ['./detalle-proyecto-component.css'],
})
export class DetalleProyectoComponent implements OnInit {
  project: Project = {
    id: 1,
    title: 'Plataforma de Reservas de Hotel',
    subtitle: 'Sistema completo de gesti√≥n de reservas con panel administrativo',
    description:
      'Desarrolla una aplicaci√≥n web completa que permita a los usuarios buscar, comparar y reservar habitaciones de hotel. Incluye panel administrativo para gesti√≥n de propiedades, precios y reservas.',
    type: 'guiado',
    difficulty: 'intermedio',
    duration: '6-8 semanas',
    totalXP: 2500,
    baseXP: 2000,
    bonusXP: 500,
    iaEvaluation: true,
    progress: 35,
    status: 'en-progreso',
  };

  technologies: Technology[] = [
    { name: 'React', icon: '‚öõÔ∏è', category: 'Frontend', required: true },
    { name: 'Node.js', icon: 'üü¢', category: 'Backend', required: true },
    { name: 'MongoDB', icon: 'üçÉ', category: 'Base de Datos', required: true },
    { name: 'Express', icon: 'üöÇ', category: 'Backend', required: true },
    { name: 'JWT', icon: 'üîê', category: 'Autenticaci√≥n', required: true },
    { name: 'CSS3', icon: 'üé®', category: 'Frontend', required: true },
    { name: 'Git', icon: 'üìö', category: 'Control Versiones', required: true },
    { name: 'Docker', icon: 'üê≥', category: 'DevOps', required: false },
  ];

  requirements: Requirement[] = [
    {
      id: 1,
      description: 'Fundamentos de JavaScript ES6+',
      type: 'conocimiento',
      status: 'completado',
    },
    { id: 2, description: 'Curso: React desde Cero', type: 'curso', status: 'completado' },
    { id: 3, description: 'Curso: Node.js y Express', type: 'curso', status: 'en-progreso' },
    { id: 4, description: 'Manejo de APIs REST', type: 'habilidad', status: 'completado' },
    { id: 5, description: 'Bases de datos NoSQL', type: 'conocimiento', status: 'pendiente' },
  ];

  roadmapPhases: RoadmapPhase[] = [
    {
      id: 1,
      title: 'An√°lisis y Dise√±o',
      description:
        'Define los requisitos del sistema, casos de uso y dise√±a la arquitectura de la aplicaci√≥n.',
      icon: 'üß©',
      status: 'completado',
      objectives: [
        'Definir modelos de datos principales',
        'Dise√±ar esquema de base de datos',
        'Planificar arquitectura frontend/backend',
        'Crear wireframes de interfaces',
      ],
      xp: 300,
      duration: '1 semana',
      resources: ['Plantilla de requisitos', 'Gu√≠a de arquitectura', 'Ejemplos de wireframes'],
    },
    {
      id: 2,
      title: 'Configuraci√≥n del Entorno',
      description: 'Prepara el entorno de desarrollo y configura las herramientas necesarias.',
      icon: '‚öôÔ∏è',
      status: 'completado',
      objectives: [
        'Configurar proyecto React',
        'Inicializar servidor Express',
        'Conectar base de datos MongoDB',
        'Configurar herramientas de desarrollo',
      ],
      xp: 200,
      duration: '3 d√≠as',
      resources: ['Gu√≠a de configuraci√≥n', 'Repositorio base', 'Configuraci√≥n Docker'],
    },
    {
      id: 3,
      title: 'Implementaci√≥n del N√∫cleo',
      description: 'Desarrolla las funcionalidades principales del sistema de reservas.',
      icon: 'üíª',
      status: 'activo',
      objectives: [
        'Implementar autenticaci√≥n de usuarios',
        'Crear CRUD de hoteles y habitaciones',
        'Desarrollar sistema de b√∫squeda',
        'Implementar proceso de reserva',
      ],
      xp: 800,
      duration: '3 semanas',
      resources: ['Documentaci√≥n API', 'Ejemplos de c√≥digo', 'Gu√≠a de buenas pr√°cticas'],
    },
    {
      id: 4,
      title: 'Integraci√≥n y Optimizaci√≥n',
      description: 'Mejora la aplicaci√≥n, maneja errores y optimiza el rendimiento.',
      icon: 'üß†',
      status: 'pendiente',
      objectives: [
        'Implementar validaciones',
        'Optimizar consultas a BD',
        'Manejar errores y excepciones',
        'Mejorar experiencia de usuario',
      ],
      xp: 400,
      duration: '1 semana',
      resources: [
        'Gu√≠a de optimizaci√≥n',
        'Patrones de manejo de errores',
        'Herramientas de profiling',
      ],
    },
    {
      id: 5,
      title: 'Presentaci√≥n Final',
      description: 'Prepara la entrega final, documenta el proyecto y realiza demostraci√≥n.',
      icon: 'üöÄ',
      status: 'pendiente',
      objectives: [
        'Documentar c√≥digo y API',
        'Preparar presentaci√≥n',
        'Realizar pruebas finales',
        'Desplegar aplicaci√≥n',
      ],
      xp: 300,
      duration: '1 semana',
      resources: ['Plantilla de documentaci√≥n', 'Gu√≠a de despliegue', 'Ejemplo de presentaci√≥n'],
    },
  ];

  skills: Skill[] = [
    { name: 'Desarrollo Frontend', level: 75, category: 'tecnica' },
    { name: 'Desarrollo Backend', level: 60, category: 'tecnica' },
    { name: 'Bases de Datos', level: 50, category: 'tecnica' },
    { name: 'APIs REST', level: 70, category: 'tecnica' },
    { name: 'Autenticaci√≥n', level: 65, category: 'tecnica' },
    { name: 'Resoluci√≥n de Problemas', level: 80, category: 'blanda' },
    { name: 'Documentaci√≥n', level: 70, category: 'blanda' },
    { name: 'Gesti√≥n de Tiempo', level: 75, category: 'blanda' },
  ];

  chatMessages: ChatMessage[] = [
    {
      id: 1,
      text: '¬°Hola! Soy tu asistente IA para este proyecto. Veo que est√°s en la fase de implementaci√≥n del n√∫cleo. ¬øEn qu√© puedo ayudarte?',
      isUser: false,
      timestamp: new Date(),
      type: 'sugerencia',
    },
    {
      id: 2,
      text: 'Tengo dudas sobre c√≥mo implementar la autenticaci√≥n JWT en el backend.',
      isUser: true,
      timestamp: new Date(),
      type: 'pista',
    },
    {
      id: 3,
      text: 'Te recomiendo revisar la gu√≠a de autenticaci√≥n en la secci√≥n de recursos. ¬øQuieres que te muestre un ejemplo de implementaci√≥n?',
      isUser: false,
      timestamp: new Date(),
      type: 'feedback',
    },
  ];

  testCases: TestCase[] = [
    {
      id: 1,
      title: 'Autenticaci√≥n de Usuario',
      description: 'Usuario puede registrarse e iniciar sesi√≥n',
      status: 'pasado',
      type: 'automatico',
    },
    {
      id: 2,
      title: 'CRUD de Hoteles',
      description: 'Crear, leer, actualizar y eliminar hoteles',
      status: 'pasado',
      type: 'automatico',
    },
    {
      id: 3,
      title: 'Sistema de B√∫squeda',
      description: 'B√∫squeda con filtros por ubicaci√≥n y fechas',
      status: 'fallado',
      type: 'automatico',
    },
    {
      id: 4,
      title: 'Proceso de Reserva',
      description: 'Reserva completa de principio a fin',
      status: 'no-ejecutado',
      type: 'automatico',
    },
    {
      id: 5,
      title: 'Pruebas de Carga',
      description: 'Rendimiento con m√∫ltiples usuarios',
      status: 'no-ejecutado',
      type: 'personalizado',
    },
  ];

  badges: Badge[] = [
    {
      id: 1,
      name: 'Arquitecto Frontend',
      description: 'Dise√±a una interfaz excepcional',
      icon: 'üé®',
      earned: true,
      xp: 100,
    },
    {
      id: 2,
      name: 'Maestro del Backend',
      description: 'Backend robusto y escalable',
      icon: '‚öôÔ∏è',
      earned: false,
      xp: 150,
    },
    {
      id: 3,
      name: 'Rey de las APIs',
      description: 'API bien documentada y eficiente',
      icon: 'üîó',
      earned: false,
      xp: 125,
    },
    {
      id: 4,
      name: 'Documentador Pro',
      description: 'Documentaci√≥n completa y clara',
      icon: 'üìö',
      earned: false,
      xp: 75,
    },
    {
      id: 5,
      name: 'Optimizador',
      description: 'Aplicaci√≥n de alto rendimiento',
      icon: '‚ö°',
      earned: false,
      xp: 100,
    },
  ];

  resources: Resource[] = [
    {
      id: 1,
      title: 'Gu√≠a de Arquitectura',
      description: 'Documento completo de dise√±o del sistema',
      icon: 'üìò',
      type: 'documento',
      url: '#',
    },
    {
      id: 2,
      title: 'Repositorio Base',
      description: 'C√≥digo inicial con configuraci√≥n',
      icon: 'üíª',
      type: 'repositorio',
      url: '#',
    },
    {
      id: 3,
      title: 'Video: Autenticaci√≥n JWT',
      description: 'Tutorial paso a paso',
      icon: 'üé•',
      type: 'video',
      url: '#',
    },
    {
      id: 4,
      title: 'API Documentation',
      description: 'Especificaci√≥n completa de endpoints',
      icon: 'üîó',
      type: 'documento',
      url: '#',
    },
    {
      id: 5,
      title: 'Best Practices',
      description: 'Gu√≠a de mejores pr√°cticas React/Node',
      icon: '‚≠ê',
      type: 'articulo',
      url: '#',
    },
  ];

  newMessage: string = '';
  activePhase: number = 3;

  constructor(private route: ActivatedRoute, private router: Router) {}

  ngOnInit() {
    this.route.paramMap.subscribe((params) => {
      const projectId = params.get('id');
      this.loadProject(parseInt(projectId || '1'));
    });
  }

  loadProject(projectId: number) {
    // En una aplicaci√≥n real, cargar√≠as los datos del proyecto desde una API
    console.log('Cargando proyecto:', projectId);
  }

  getRingRotation(): number {
    return (this.project.progress / 100) * 360 - 45;
  }

  getTechnicalSkills(): Skill[] {
    return this.skills.filter((skill) => skill.category === 'tecnica');
  }

  getSoftSkills(): Skill[] {
    return this.skills.filter((skill) => skill.category === 'blanda');
  }

  getEarnedBadges(): Badge[] {
    return this.badges.filter((badge) => badge.earned);
  }

  getLockedBadges(): Badge[] {
    return this.badges.filter((badge) => !badge.earned);
  }

  getPassedTests(): TestCase[] {
    return this.testCases.filter((test) => test.status === 'pasado');
  }

  getFailedTests(): TestCase[] {
    return this.testCases.filter((test) => test.status === 'fallado');
  }

  getPendingTests(): TestCase[] {
    return this.testCases.filter((test) => test.status === 'no-ejecutado');
  }

  sendMessage() {
    if (this.newMessage.trim()) {
      this.chatMessages.push({
        id: this.chatMessages.length + 1,
        text: this.newMessage,
        isUser: true,
        timestamp: new Date(),
        type: 'pista',
      });

      // Simular respuesta de IA
      setTimeout(() => {
        this.chatMessages.push({
          id: this.chatMessages.length + 1,
          text: this.generateAIResponse(this.newMessage),
          isUser: false,
          timestamp: new Date(),
          type: 'feedback',
        });
      }, 1000);

      this.newMessage = '';
    }
  }

  generateAIResponse(userMessage: string): string {
    const responses = [
      'Interesante pregunta. Te recomiendo revisar la documentaci√≥n de la fase actual.',
      'Basado en tu progreso, sugiero enfocarte en completar los tests fallidos primero.',
      '¬°Excelente avance! Tu comprensi√≥n de los conceptos est√° mejorando notablemente.',
      'Detect√© que podr√≠as optimizar esa implementaci√≥n. ¬øQuieres que te muestre algunas mejoras?',
      'Tu c√≥digo est√° bien estructurado. Considera a√±adir m√°s comentarios para mejor documentaci√≥n.',
    ];

    return responses[Math.floor(Math.random() * responses.length)];
  }

  startProject() {
    this.project.status = 'en-progreso';
    console.log('Iniciando proyecto...');
  }

  submitForEvaluation() {
    console.log('Enviando proyecto para evaluaci√≥n IA...');
    // L√≥gica de evaluaci√≥n
  }

  downloadCertificate() {
    console.log('Descargando certificado...');
  }

  shareProject() {
    console.log('Compartiendo proyecto con la comunidad...');
  }

  runTests() {
    console.log('Ejecutando pruebas autom√°ticas...');
    // L√≥gica para ejecutar tests
  }

  setActivePhase(phaseId: number) {
    this.activePhase = phaseId;
  }

  getActivePhase(): RoadmapPhase {
    return (
      this.roadmapPhases.find((phase) => phase.id === this.activePhase) || this.roadmapPhases[0]
    );
  }
}
