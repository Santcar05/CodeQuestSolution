package org.javeriana.codequest.seed;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.javeriana.codequest.entity.Achievement;
import org.javeriana.codequest.entity.Badge;
import org.javeriana.codequest.entity.CareerPath;
import org.javeriana.codequest.entity.Challenge;
import org.javeriana.codequest.entity.ChatMessage;
import org.javeriana.codequest.entity.CodeExplanation;
import org.javeriana.codequest.entity.Course;
import org.javeriana.codequest.entity.ExamResults;
import org.javeriana.codequest.entity.FeaturedUser;
import org.javeriana.codequest.entity.Instructor;
import org.javeriana.codequest.entity.LearningMethod;
import org.javeriana.codequest.entity.Lesson;
import org.javeriana.codequest.entity.LessonContent;
import org.javeriana.codequest.entity.MenuItem;
import org.javeriana.codequest.entity.ModuleModel;
import org.javeriana.codequest.entity.OptionForm;
import org.javeriana.codequest.entity.Post;
import org.javeriana.codequest.entity.Power;
import org.javeriana.codequest.entity.PremiumPlan;
import org.javeriana.codequest.entity.Product;
import org.javeriana.codequest.entity.Project;
import org.javeriana.codequest.entity.Question;
import org.javeriana.codequest.entity.QuestionForm;
import org.javeriana.codequest.entity.Requirement;
import org.javeriana.codequest.entity.ResourceModel;
import org.javeriana.codequest.entity.Skill;
import org.javeriana.codequest.entity.Technology;
import org.javeriana.codequest.entity.TestCase;
import org.javeriana.codequest.entity.Topic;
import org.javeriana.codequest.entity.Trend;
import org.javeriana.codequest.entity.UserProfile;
import org.javeriana.codequest.service.entity.AchievementService;
import org.javeriana.codequest.service.entity.BadgeService;
import org.javeriana.codequest.service.entity.CareerPathService;
import org.javeriana.codequest.service.entity.ChallengeService;
import org.javeriana.codequest.service.entity.ChatMessageService;
import org.javeriana.codequest.service.entity.CodeExplanationService;
import org.javeriana.codequest.service.entity.CommentModelService;
import org.javeriana.codequest.service.entity.CourseService;
import org.javeriana.codequest.service.entity.ExamResultsService;
import org.javeriana.codequest.service.entity.FeaturedUserService;
import org.javeriana.codequest.service.entity.InstructorService;
import org.javeriana.codequest.service.entity.LearningMethodService;
import org.javeriana.codequest.service.entity.LessonContentService;
import org.javeriana.codequest.service.entity.LessonService;
import org.javeriana.codequest.service.entity.MenuItemService;
import org.javeriana.codequest.service.entity.ModuleModelService;
import org.javeriana.codequest.service.entity.OptionFormService;
import org.javeriana.codequest.service.entity.PostService;
import org.javeriana.codequest.service.entity.PowerService;
import org.javeriana.codequest.service.entity.PremiumPlanService;
import org.javeriana.codequest.service.entity.ProductService;
import org.javeriana.codequest.service.entity.ProjectService;
import org.javeriana.codequest.service.entity.QuestionFormService;
import org.javeriana.codequest.service.entity.QuestionService;
import org.javeriana.codequest.service.entity.RequirementService;
import org.javeriana.codequest.service.entity.ResourceModelService;
import org.javeriana.codequest.service.entity.SkillService;
import org.javeriana.codequest.service.entity.TechnologyService;
import org.javeriana.codequest.service.entity.TestCaseService;
import org.javeriana.codequest.service.entity.TopicService;
import org.javeriana.codequest.service.entity.TrendService;
import org.javeriana.codequest.service.entity.UserProfileService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import jakarta.annotation.PostConstruct;

@Component
@Transactional
public class DatabaseInit {

    @Autowired
    private AchievementService achievementService;

    @Autowired
    private BadgeService badgeService;

    @Autowired
    private CareerPathService careerPathService;

    @Autowired
    private ChallengeService challengeService;

    @Autowired
    private ChatMessageService chatMessageService;

    @Autowired
    private CodeExplanationService codeExplanationService;

    @Autowired
    private CommentModelService commentService;

    @Autowired
    private CourseService courseService;

    @Autowired
    private ExamResultsService examResultsService;

    @Autowired
    private FeaturedUserService featuredUserService;

    @Autowired
    private InstructorService instructorService;

    @Autowired
    private LearningMethodService learningMethodService;

    @Autowired
    private LessonService lessonService;

    @Autowired
    private LessonContentService lessonContentService;

    @Autowired
    private MenuItemService menuItemService;

    @Autowired
    private ModuleModelService moduleService;

    @Autowired
    private OptionFormService optionFormService;

    @Autowired
    private PostService postService;

    @Autowired
    private PowerService powerService;

    @Autowired
    private PremiumPlanService premiumPlanService;

    @Autowired
    private ProductService productService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private QuestionService questionService;

    @Autowired
    private QuestionFormService questionFormService;

    @Autowired
    private RequirementService requirementService;

    @Autowired
    private ResourceModelService resourceService;

    @Autowired
    private SkillService skillService;

    @Autowired
    private TechnologyService technologyService;

    @Autowired
    private TestCaseService testCaseService;

    @Autowired
    private TopicService topicService;

    @Autowired
    private TrendService trendService;

    @Autowired
    private UserProfileService userProfileService;

    @PostConstruct
    public void init() {
        initAchievements();
        initBadges();
        initCareerPaths();
        initChallenges();
        initChatMessages();
        initCodeExplanations();
        initInstructors();
        initCourses();
        initExamResults();
        initFeaturedUsers();
        initLearningMethods();
        initMenuItems();
        initPowers();
        initPremiumPlans();
        initProducts();
        initProjects();
        initQuestions();
        initQuestionForms();
        initRequirements();
        initResources();
        initSkills();
        initTechnologies();
        initTestCases();
        initTrends();
        initPosts();
        initProfileUsers();
    }

    private void initAchievements() {
        List<Achievement> achievements = Arrays.asList(
                // Logros iniciales existentes
                createAchievement("Primera Racha", "Mant√©n una racha de aprendizaje por 3 d√≠as consecutivos", "Progreso", Achievement.Rarity.COM√öN, 50, "üî•", false),
                createAchievement("Racha de Fuego", "Mant√©n una racha de aprendizaje por 15 d√≠as consecutivos", "Progreso", Achievement.Rarity.RARO, 200, "üî•", true),
                createAchievement("Maestro de la Racha", "Mant√©n una racha de aprendizaje por 30 d√≠as consecutivos", "Progreso", Achievement.Rarity.√âPICO, 500, "üî•", false),
                createAchievement("Primer Curso", "Completa tu primer curso en CodeQuest", "Cursos", Achievement.Rarity.COM√öN, 100, "üìö", false),
                createAchievement("Estudiante Dedicado", "Completa 5 cursos", "Cursos", Achievement.Rarity.RARO, 300, "üìö", false),
                createAchievement("Primer Proyecto", "Completa tu primer proyecto", "Proyectos", Achievement.Rarity.COM√öN, 150, "üöÄ", false),
                createAchievement("Desaf√≠o Aceptado", "Completa tu primer desaf√≠o de c√≥digo", "Desaf√≠os", Achievement.Rarity.COM√öN, 75, "‚öîÔ∏è", false),
                createAchievement("Colaborador", "Ayuda a 10 compa√±eros en el foro", "Comunidad", Achievement.Rarity.√âPICO, 600, "ü§ù", false),
                // --- Logros adicionales del frontend ---

                // üèÜ Progreso
                createAchievement("Primeros Pasos", "Completa tu primer curso en CodeQuest", "Progreso", Achievement.Rarity.COM√öN, 50, "üéØ", true),
                createAchievement("Aprendiz Dedicado", "Completa 5 cursos diferentes", "Progreso", Achievement.Rarity.COM√öN, 150, "üìö", true),
                createAchievement("Maestro del Conocimiento", "Completa 25 cursos en CodeQuest", "Progreso", Achievement.Rarity.RARO, 500, "üéì", false),
                createAchievement("Leyenda del Aprendizaje", "Completa 100 cursos en la plataforma", "Progreso", Achievement.Rarity.LEGENDARIO, 2500, "üèÜ", false),
                createAchievement("Racha de 7 D√≠as", "Aprende durante 7 d√≠as consecutivos", "Progreso", Achievement.Rarity.COM√öN, 100, "üî•", true),
                createAchievement("Meses de Dedicaci√≥n", "Aprende durante 3 meses consecutivos", "Progreso", Achievement.Rarity.RARO, 750, "üóìÔ∏è", false),
                createAchievement("A√±o de Sabidur√≠a", "Aprende durante 12 meses consecutivos", "Progreso", Achievement.Rarity.LEGENDARIO, 5000, "üåü", false),
                createAchievement("Velocidad del Rayo", "Completa un curso en menos de 24 horas", "Progreso", Achievement.Rarity.√âPICO, 1000, "‚ö°", false),
                createAchievement("Perfeccionista", "Obt√©n 100% en todos los quizzes de un curso", "Progreso", Achievement.Rarity.RARO, 300, "üíØ", true),
                createAchievement("Coleccionista de Cursos", "Inscr√≠bete en 50 cursos diferentes", "Progreso", Achievement.Rarity.√âPICO, 1200, "üì¶", false),
                createAchievement("Explorador del Conocimiento", "Completa cursos en 5 categor√≠as diferentes", "Progreso", Achievement.Rarity.RARO, 400, "üß≠", false),
                createAchievement("Pol√≠mata Digital", "Domina 10 categor√≠as diferentes", "Progreso", Achievement.Rarity.LEGENDARIO, 3000, "üé≠", false),
                createAchievement("Sin Descanso", "Completa 10 horas de aprendizaje continuo", "Progreso", Achievement.Rarity.√âPICO, 800, "‚è≥", false),
                createAchievement("Madrugador del C√≥digo", "Aprende antes de las 6 AM", "Progreso", Achievement.Rarity.RARO, 250, "üåÖ", false),
                createAchievement("Noct√°mbulo Digital", "Aprende despu√©s de la medianoche", "Progreso", Achievement.Rarity.RARO, 250, "üåô", true),
                // üíª Tecnolog√≠a
                createAchievement("Hola Mundo", "Completa tu primer programa en cualquier lenguaje", "Tecnolog√≠a", Achievement.Rarity.COM√öN, 50, "üëã", true),
                createAchievement("Maestro JavaScript", "Domina todos los conceptos avanzados de JavaScript", "Tecnolog√≠a", Achievement.Rarity.√âPICO, 1500, "‚ö°", false),
                createAchievement("Rey de React", "Crea 10 aplicaciones con React", "Tecnolog√≠a", Achievement.Rarity.RARO, 600, "‚öõÔ∏è", false),
                createAchievement("Ninja de Python", "Resuelve 100 problemas con Python", "Tecnolog√≠a", Achievement.Rarity.√âPICO, 1200, "üêç", false),
                createAchievement("Full Stack Developer", "Domina tanto frontend como backend", "Tecnolog√≠a", Achievement.Rarity.LEGENDARIO, 3000, "üöÄ", false),
                createAchievement("Mobile First", "Crea 5 aplicaciones m√≥viles", "Tecnolog√≠a", Achievement.Rarity.RARO, 750, "üì±", false),
                createAchievement("Cloud Architect", "Despliega 10 proyectos en la nube", "Tecnolog√≠a", Achievement.Rarity.√âPICO, 1800, "‚òÅÔ∏è", false),
                createAchievement("Database Master", "Domina 3 sistemas de bases de datos diferentes", "Tecnolog√≠a", Achievement.Rarity.RARO, 900, "üóÑÔ∏è", false),
                createAchievement("DevOps Engineer", "Automatiza el deployment de 5 proyectos", "Tecnolog√≠a", Achievement.Rarity.√âPICO, 1600, "üîß", false),
                createAchievement("AI Explorer", "Completa 3 proyectos de machine learning", "Tecnolog√≠a", Achievement.Rarity.LEGENDARIO, 2500, "ü§ñ", false),
                createAchievement("Blockchain Pioneer", "Crea tu primer smart contract", "Tecnolog√≠a", Achievement.Rarity.√âPICO, 1400, "‚õìÔ∏è", false),
                createAchievement("Game Developer", "Desarrolla 3 videojuegos funcionales", "Tecnolog√≠a", Achievement.Rarity.RARO, 800, "üéÆ", false),
                createAchievement("Security Expert", "Identifica y soluciona 50 vulnerabilidades", "Tecnolog√≠a", Achievement.Rarity.LEGENDARIO, 2800, "üõ°Ô∏è", false),
                createAchievement("IoT Creator", "Conecta 5 dispositivos IoT", "Tecnolog√≠a", Achievement.Rarity.RARO, 700, "üì∂", false),
                createAchievement("Quantum Computing Initiate", "Completa el curso de computaci√≥n cu√°ntica", "Tecnolog√≠a", Achievement.Rarity.M√çTICO, 5000, "‚öõÔ∏è", false)
        );

        achievements.forEach(achievementService::save);
    }

    private Achievement createAchievement(String name, String desc, String cat, Achievement.Rarity rarity, Integer pts, String img, Boolean unlocked) {
        Achievement a = new Achievement();
        a.setName(name);
        a.setDescription(desc);
        a.setCategory(cat);
        a.setRarity(rarity);
        a.setPoints(pts);
        a.setImage(img);
        a.setUnlocked(unlocked);
        a.setRequirements(desc);
        return a;
    }

    private void initBadges() {
        List<Badge> badges = Arrays.asList(
                createBadge("Python Master", "Completa todos los cursos de Python", "üêç", false, 500, "Python"),
                createBadge("JavaScript Ninja", "Domina JavaScript completando todos los cursos avanzados", "‚ö°", false, 500, "JavaScript"),
                createBadge("Java Expert", "Convi√©rtete en experto en Java", "‚òï", false, 500, "Java"),
                createBadge("Web Developer", "Completa la ruta de desarrollo web", "üåê", false, 600, "Web"),
                createBadge("Mobile Developer", "Completa la ruta de desarrollo m√≥vil", "üì±", false, 600, "Mobile"),
                createBadge("Data Scientist", "Completa la ruta de ciencia de datos", "üìä", false, 700, "Data"),
                createBadge("Cloud Expert", "Completa cursos de AWS, Azure y GCP", "‚òÅÔ∏è", false, 600, "Cloud"),
                createBadge("Algorithm Master", "Resuelve 100 problemas de algoritmos", "üßÆ", false, 750, "Algorithms")
        );
        badges.forEach(badgeService::save);
    }

    private Badge createBadge(String name, String desc, String icon, Boolean earned, Integer xp, String cat) {
        Badge b = new Badge();
        b.setName(name);
        b.setDescription(desc);
        b.setIcon(icon);
        b.setEarned(earned);
        b.setXp(xp);
        b.setCategory(cat);
        return b;
    }

    private void initCareerPaths() {
        List<CareerPath> paths = Arrays.asList(
                createCareerPath("Desarrollador Web Full Stack", "Domina frontend y backend",
                        "Aprende a crear aplicaciones web completas desde cero", "üåê", "Full Stack Developer",
                        "Junior", 15000, 5000, 10000, "$40,000 - $120,000",
                        Arrays.asList("Empresas tecnol√≥gicas", "Startups", "Freelance", "Agencias digitales"),
                        Arrays.asList("React", "Node.js", "MongoDB", "Express", "HTML/CSS")),
                createCareerPath("Desarrollador M√≥vil", "Crea apps nativas y multiplataforma",
                        "Domina el desarrollo de aplicaciones m√≥viles para iOS y Android", "üì±", "Mobile Developer",
                        "Junior", 13000, 3000, 10000, "$40,000 - $115,000",
                        Arrays.asList("Apps iOS", "Apps Android", "React Native", "Flutter"),
                        Arrays.asList("React Native", "Swift", "Kotlin", "Firebase", "Flutter")),
                createCareerPath("Cient√≠fico de Datos", "Extrae insights de los datos",
                        "Aprende a analizar datos y crear modelos predictivos", "üìä", "Data Scientist",
                        "Intermediate", 18000, 7000, 11000, "$60,000 - $150,000",
                        Arrays.asList("Machine Learning", "An√°lisis de datos", "Visualizaci√≥n", "Big Data"),
                        Arrays.asList("Python", "R", "Pandas", "Scikit-learn", "TensorFlow")),
                createCareerPath("Ingeniero DevOps", "Automatiza y optimiza infraestructura",
                        "Domina CI/CD, cloud y automatizaci√≥n", "üîß", "DevOps Engineer",
                        "Intermediate", 16000, 6500, 9500, "$55,000 - $140,000",
                        Arrays.asList("CI/CD", "Cloud Infrastructure", "Automatizaci√≥n", "Monitoreo"),
                        Arrays.asList("Docker", "Kubernetes", "Jenkins", "Terraform", "AWS")),
                createCareerPath("Especialista en Ciberseguridad", "Protege sistemas y datos",
                        "Convi√©rtete en experto en seguridad inform√°tica", "üîí", "Security Specialist",
                        "Advanced", 17000, 7500, 9500, "$60,000 - $160,000",
                        Arrays.asList("Pentesting", "Security Audits", "Ethical Hacking", "Compliance"),
                        Arrays.asList("Kali Linux", "Metasploit", "Wireshark", "OWASP", "Python")),
                createCareerPath("Desarrollador Backend", "Arquitecto de sistemas del lado del servidor",
                        "Especial√≠zate en APIs, bases de datos y l√≥gica de negocio", "‚öôÔ∏è", "Backend Developer",
                        "Intermediate", 14000, 6000, 8000, "$45,000 - $130,000",
                        Arrays.asList("APIs RESTful", "Microservicios", "Bases de datos", "Cloud computing"),
                        Arrays.asList("Node.js", "Python", "PostgreSQL", "Docker", "AWS")),
                createCareerPath("Desarrollador Frontend", "Especialista en interfaces de usuario",
                        "Convi√©rtete en experto en crear experiencias visuales incre√≠bles", "üé®", "Frontend Developer",
                        "Junior", 12000, 4000, 8000, "$35,000 - $100,000",
                        Arrays.asList("Dise√±o web", "UI/UX", "Aplicaciones SPA", "E-commerce"),
                        Arrays.asList("React", "Vue.js", "TypeScript", "Tailwind CSS", "Webpack")),
                createCareerPath("Ingeniero de Machine Learning", "Construye sistemas inteligentes",
                        "Especial√≠zate en IA y aprendizaje autom√°tico", "ü§ñ", "ML Engineer",
                        "Advanced", 20000, 8000, 12000, "$70,000 - $180,000",
                        Arrays.asList("Deep Learning", "NLP", "Computer Vision", "AI Research"),
                        Arrays.asList("PyTorch", "TensorFlow", "Keras", "OpenCV", "Transformers"))
        );
        paths.forEach(careerPathService::save);
    }

    private CareerPath createCareerPath(String title, String subtitle, String desc, String icon,
            String role, String level, Integer totalXP, Integer currentXP,
            Integer requiredXP, String salary, List<String> opps, List<String> techs) {
        CareerPath cp = new CareerPath();
        cp.setTitle(title);
        cp.setSubtitle(subtitle);
        cp.setDescription(desc);
        cp.setIcon(icon);
        cp.setRole(role);
        cp.setLevel(level);
        cp.setTotalXP(totalXP);
        cp.setCurrentXP(currentXP);
        cp.setRequiredXP(requiredXP);
        cp.setSalaryRange(salary);
        cp.setSelected(false);
        cp.setOpportunities(opps);
        cp.setTechnologies(techs);
        return cp;
    }

    private void initChallenges() {
        List<Challenge> challenges = Arrays.asList(
                createChallenge("FizzBuzz", "Implementa el cl√°sico problema FizzBuzz", "üî¢", 50, "Algoritmo", false),
                createChallenge("Pal√≠ndromo", "Verifica si una cadena es un pal√≠ndromo", "üìù", 50, "String", false),
                createChallenge("Fibonacci", "Genera la secuencia de Fibonacci", "üåÄ", 75, "Recursi√≥n", false),
                createChallenge("B√∫squeda Binaria", "Implementa b√∫squeda binaria en un array ordenado", "üîç", 100, "B√∫squeda", false),
                createChallenge("√Årbol Binario", "Implementa un √°rbol binario de b√∫squeda", "üå≥", 150, "Estructuras de Datos", false),
                createChallenge("API REST", "Crea una API REST completa con CRUD", "üåê", 150, "Backend", false),
                createChallenge("Sistema de Cach√©", "Implementa un sistema de cach√© LRU", "üíæ", 150, "Optimizaci√≥n", false),
                createChallenge("Machine Learning", "Entrena un modelo de clasificaci√≥n", "ü§ñ", 250, "AI/ML", false)
        );
        challenges.forEach(challengeService::save);
    }

    private Challenge createChallenge(String title, String desc, String icon, Integer xp, String type, Boolean completed) {
        Challenge c = new Challenge();
        c.setTitle(title);
        c.setDescription(desc);
        c.setIcon(icon);
        c.setXp(xp);
        c.setType(type);
        c.setCompleted(completed);
        return c;
    }

    private void initChatMessages() {
        List<ChatMessage> messages = Arrays.asList(
                createChatMessage("¬øPodr√≠as explicarme qu√© es una funci√≥n en Python?", true, LocalDateTime.now().minusMinutes(10), null),
                createChatMessage("Una funci√≥n es un bloque de c√≥digo reutilizable que realiza una tarea espec√≠fica. Se define con 'def' seguido del nombre.", false, LocalDateTime.now().minusMinutes(9), ChatMessage.MessageType.EVALUACION),
                createChatMessage("Mi c√≥digo tiene un error en el bucle for", true, LocalDateTime.now().minusMinutes(8), null),
                createChatMessage("Revisa la indentaci√≥n del c√≥digo dentro del bucle. En Python, la indentaci√≥n es crucial.", false, LocalDateTime.now().minusMinutes(7), ChatMessage.MessageType.PISTA),
                createChatMessage("¬øC√≥mo puedo mejorar el rendimiento de mi consulta SQL?", true, LocalDateTime.now().minusMinutes(6), null),
                createChatMessage("Considera agregar √≠ndices a las columnas que usas en WHERE y JOIN. Tambi√©n evita SELECT *.", false, LocalDateTime.now().minusMinutes(5), ChatMessage.MessageType.SUGERENCIA),
                createChatMessage("No entiendo la diferencia entre var, let y const", true, LocalDateTime.now().minusMinutes(4), null),
                createChatMessage("'var' tiene scope de funci√≥n, 'let' de bloque y 'const' tambi√©n de bloque pero inmutable.", false, LocalDateTime.now().minusMinutes(3), ChatMessage.MessageType.EVALUACION)
        );
        messages.forEach(chatMessageService::save);
    }

    private ChatMessage createChatMessage(String text, Boolean isUser, LocalDateTime timestamp, ChatMessage.MessageType type) {
        ChatMessage cm = new ChatMessage();
        cm.setText(text);
        cm.setIsUser(isUser);
        cm.setTimestamp(timestamp);
        cm.setType(type);
        return cm;
    }

    private void initCodeExplanations() {
        List<CodeExplanation> explanations = Arrays.asList(
                createCodeExplanation(1, "def fibonacci(n):", "Define una funci√≥n llamada fibonacci que recibe un par√°metro n"),
                createCodeExplanation(2, "    if n <= 1:", "Verifica si n es 0 o 1, caso base de la recursi√≥n"),
                createCodeExplanation(3, "        return n", "Retorna n directamente para los casos base"),
                createCodeExplanation(4, "    return fibonacci(n-1) + fibonacci(n-2)", "Llamada recursiva que suma los dos n√∫meros anteriores"),
                createCodeExplanation(5, "const fetchData = async () => {", "Declara una funci√≥n as√≠ncrona usando arrow function"),
                createCodeExplanation(6, "    const response = await fetch(url);", "Espera la respuesta de la petici√≥n HTTP"),
                createCodeExplanation(7, "    const data = await response.json();", "Convierte la respuesta a formato JSON"),
                createCodeExplanation(8, "    return data;", "Retorna los datos procesados")
        );
        explanations.forEach(codeExplanationService::save);
    }

    private CodeExplanation createCodeExplanation(Integer line, String code, String explanation) {
        CodeExplanation ce = new CodeExplanation();
        ce.setLine(line);
        ce.setCode(code);
        ce.setExplanation(explanation);
        return ce;
    }

    private void initInstructors() {
        List<Instructor> instructors = Arrays.asList(
                createInstructor("Dr. Ana Garc√≠a", "üë©‚Äçüè´"),
                createInstructor("Carlos Mendoza", "üë®‚Äçüíª"),
                createInstructor("Mar√≠a L√≥pez", "üë©‚Äçüíº"),
                createInstructor("Juan P√©rez", "üë®‚Äçüî¨"),
                createInstructor("Laura Mart√≠nez", "üë©‚Äçüéì"),
                createInstructor("Diego Rodr√≠guez", "üë®‚Äçüè´"),
                createInstructor("Sofia Chen", "üë©‚Äçüíª"),
                createInstructor("Roberto Silva", "üë®‚Äçüíº"),
                createInstructor("Santiago Castro Garz√≥n", "üë®‚Äçüè´") // Nuevo instructor para C++
        );
        instructors.forEach(instructorService::save);
    }

    private Instructor createInstructor(String name, String avatar) {
        Instructor i = new Instructor();
        i.setName(name);
        i.setAvatar(avatar);
        return i;
    }

    private void initCourses() {
        // Obtener instructores reci√©n guardados (attached)
        List<Instructor> instructors = instructorService.findAll();

        List<Course> courses = Arrays.asList(
                createCourse(
                        "JavaScript Moderno: De Cero a Experto",
                        "Domina JavaScript ES6+ con proyectos reales. Aprende desde fundamentos hasta conceptos avanzados como async/await, closures y programaci√≥n funcional.",
                        "Frontend", "Principiante", 4.8, "60 horas", 21500, 120, 0,
                        "Variables y Tipos de Datos",
                        "https://images.unsplash.com/photo-1627398242454-45a1465c2479?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1627398242454-45a1465c2479?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$49.99", "$89.99", 850, true, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("ES6+ Features", "Async/Await", "Closures", "DOM Manipulation", "Event Loop"),
                        Arrays.asList("Conocimientos b√°sicos de programaci√≥n", "HTML y CSS b√°sico"),
                        Arrays.asList("JavaScript", "Frontend", "ES6"),
                        instructors.get(0) // Dr. Ana Garc√≠a
                ),
                createCourse(
                        "Python para An√°lisis de Datos y Machine Learning",
                        "Convi√©rtete en Data Scientist con Python. Domina Pandas, NumPy, Scikit-learn y construye modelos predictivos.",
                        "Data Science", "Intermedio", 4.9, "75 horas", 18700, 180, 45,
                        "Introducci√≥n a Pandas",
                        "https://images.unsplash.com/photo-1526379879527-8559ecfcaec0?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1526379879527-8559ecfcaec0?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$79.99", "$129.99", 1200, true, true, Course.CourseStatus.IN_PROGRESS,
                        Arrays.asList("Pandas avanzado", "NumPy", "Scikit-learn", "Visualizaci√≥n", "Modelado predictivo"),
                        Arrays.asList("Python b√°sico", "Matem√°ticas b√°sicas", "Estad√≠stica fundamental"),
                        Arrays.asList("Python", "MachineLearning", "DataScience"),
                        instructors.get(1) // Carlos Mendoza
                ),
                createCourse(
                        "React + Next.js: Desarrollo Web Profesional",
                        "Crea aplicaciones web modernas con React 18 y Next.js 14. Incluye SSR, SSG y optimizaci√≥n de performance.",
                        "Frontend", "Intermedio", 4.9, "55 horas", 23400, 145, 30,
                        "Fundamentos de React",
                        "https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$69.99", "$119.99", 950, true, true, Course.CourseStatus.IN_PROGRESS,
                        Arrays.asList("React Hooks", "Next.js App Router", "Server Components", "Optimizaci√≥n", "Deployment"),
                        Arrays.asList("JavaScript avanzado", "HTML/CSS", "Conceptos de React b√°sico"),
                        Arrays.asList("React", "NextJS", "Frontend"),
                        instructors.get(2) // Mar√≠a L√≥pez
                ),
                createCourse(
                        "Node.js y Express: Backend con TypeScript",
                        "Desarrolla APIs REST escalables con Node.js, Express y TypeScript. Incluye autenticaci√≥n, bases de datos y testing.",
                        "Backend", "Intermedio", 4.7, "50 horas", 15600, 110, 0,
                        "Configuraci√≥n de TypeScript",
                        "https://images.unsplash.com/photo-1563089145-599997674d42?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1563089145-599997674d42?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$59.99", "$99.99", 800, false, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("TypeScript", "Express.js", "APIs REST", "Autenticaci√≥n JWT", "Testing"),
                        Arrays.asList("JavaScript avanzado", "Conceptos de backend", "Conocimientos de HTTP"),
                        Arrays.asList("NodeJS", "TypeScript", "Backend"),
                        instructors.get(3) // Juan P√©rez
                ),
                createCourse(
                        "Flutter & Dart: Apps M√≥viles Multiplataforma",
                        "Desarrolla aplicaciones m√≥viles nativas para iOS y Android con un solo c√≥digo base usando Flutter.",
                        "Mobile", "Principiante", 4.8, "65 horas", 18900, 135, 0,
                        "Introducci√≥n a Dart",
                        "https://es.fiverr.com/maisam_abbas_/develop-professional-a-mobile-app-using-flutter",
                        "https://es.fiverr.com/maisam_abbas_/develop-professional-a-mobile-app-using-flutter",
                        "$64.99", "$109.99", 900, true, false, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Dart avanzado", "Widgets personalizados", "State Management", "Animaciones", "Firebase"),
                        Arrays.asList("Programaci√≥n b√°sica", "Conceptos OOP"),
                        Arrays.asList("Flutter", "Dart", "Mobile"),
                        instructors.get(4) // Laura Mart√≠nez
                ),
                createCourse(
                        "AWS Cloud Practitioner: Fundamentos de la Nube",
                        "Prep√°rate para la certificaci√≥n AWS Cloud Practitioner. Domina los servicios fundamentales de AWS.",
                        "Cloud", "Principiante", 4.6, "40 horas", 12300, 85, 25,
                        "Introducci√≥n a AWS",
                        "https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$89.99", "$149.99", 700, false, true, Course.CourseStatus.IN_PROGRESS,
                        Arrays.asList("EC2 y S3", "IAM y Security", "VPC", "RDS", "Cost Optimization"),
                        Arrays.asList("Conocimientos b√°sicos de TI", "Conceptos de redes"),
                        Arrays.asList("AWS", "Cloud", "DevOps"),
                        instructors.get(5) // Diego Rodr√≠guez
                ),
                createCourse(
                        "Docker & Kubernetes: Contenedores y Orquestaci√≥n",
                        "Master en contenedores Docker y orquestaci√≥n con Kubernetes. Despliega aplicaciones escalables.",
                        "DevOps", "Intermedio", 4.9, "45 horas", 14200, 95, 0,
                        "Fundamentos de Docker",
                        "https://images.unsplash.com/photo-1626721105368-a69248e93b32?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1626721105368-a69248e93b32?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$74.99", "$124.99", 850, true, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Docker avanzado", "Kubernetes clusters", "Helm charts", "CI/CD", "Monitoring"),
                        Arrays.asList("Linux b√°sico", "Conceptos de redes", "Experiencia en l√≠nea de comandos"),
                        Arrays.asList("Docker", "Kubernetes", "DevOps"),
                        instructors.get(6) // Sofia Chen
                ),
                createCourse(
                        "Ciberseguridad Ofensiva: Hacking √âtico",
                        "Aprende t√©cnicas de pentesting y seguridad ofensiva. Domina herramientas como Metasploit y Burp Suite.",
                        "Security", "Avanzado", 4.8, "80 horas", 8900, 200, 0,
                        "Reconocimiento y Footprinting",
                        "https://images.unsplash.com/photo-1550751827-4bd374c3f58b?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1550751827-4bd374c3f58b?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$99.99", "$169.99", 1500, false, false, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Pentesting Web", "Explotaci√≥n", "Post-explotaci√≥n", "OWASP Top 10", "Forensics"),
                        Arrays.asList("Redes avanzadas", "Linux", "Programaci√≥n b√°sica", "Conceptos de seguridad"),
                        Arrays.asList("Security", "Hacking", "Pentesting"),
                        instructors.get(7) // Roberto Silva
                ),
                createCourse(
                        "Vue.js 3: Desarrollo Frontend con Composition API",
                        "Domina Vue.js 3 con Composition API. Crea aplicaciones reactivas y de alto rendimiento.",
                        "Frontend", "Intermedio", 4.7, "48 horas", 16700, 125, 60,
                        "Vue.js Fundamentals",
                        "https://images.unsplash.com/photo-1633356122102-3fe601e05bd2?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1633356122102-3fe601e05bd2?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$54.99", "$94.99", 750, true, false, Course.CourseStatus.IN_PROGRESS,
                        Arrays.asList("Composition API", "Vue Router", "Pinia State Management", "Testing", "Performance"),
                        Arrays.asList("JavaScript avanzado", "HTML/CSS", "Conceptos de Vue.js b√°sico"),
                        Arrays.asList("VueJS", "Frontend", "JavaScript"),
                        instructors.get(0) // Dr. Ana Garc√≠a
                ),
                createCourse(
                        "SQL Avanzado y Optimizaci√≥n de Bases de Datos",
                        "Domina SQL avanzado, optimizaci√≥n de queries y dise√±o de bases de datos escalables.",
                        "Backend", "Intermedio", 4.8, "35 horas", 13400, 70, 70,
                        "Fundamentos de SQL",
                        "https://images.unsplash.com/photo-1544383835-bda2bc66a55d?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1544383835-bda2bc66a55d?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "Gratis", null, 600, false, false, Course.CourseStatus.COMPLETED,
                        Arrays.asList("Query Optimization", "Indexing", "Transactions", "Stored Procedures", "Normalization"),
                        Arrays.asList("SQL b√°sico", "Conceptos de bases de datos"),
                        Arrays.asList("SQL", "Database", "PostgreSQL"),
                        instructors.get(1) // Carlos Mendoza
                ),
                createCourse(
                        "Go Programming: Sistemas Concurrentes y Escalables",
                        "Aprende Go para desarrollar sistemas backend de alta concurrencia y alto rendimiento.",
                        "Backend", "Intermedio", 4.7, "42 horas", 9800, 100, 0,
                        "Sintaxis de Go",
                        "https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$59.99", "$99.99", 800, false, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Concurrencia", "Goroutines", "Channels", "Testing", "APIs REST"),
                        Arrays.asList("Programaci√≥n b√°sica", "Conceptos de concurrencia"),
                        Arrays.asList("Go", "Backend", "Concurrency"),
                        instructors.get(2) // Mar√≠a L√≥pez
                ),
                createCourse(
                        "TensorFlow y Deep Learning: Redes Neuronales",
                        "Domina el deep learning con TensorFlow. Crea redes neuronales para visi√≥n computacional y NLP.",
                        "AI/ML", "Avanzado", 4.9, "70 horas", 11200, 165, 0,
                        "Introducci√≥n a TensorFlow",
                        "https://images.unsplash.com/photo-1555949963-aa79dcee981c?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1555949963-aa79dcee981c?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$89.99", "$159.99", 1400, true, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Redes Neuronales", "Computer Vision", "NLP", "Transfer Learning", "Model Deployment"),
                        Arrays.asList("Python avanzado", "Matem√°ticas", "Machine Learning b√°sico"),
                        Arrays.asList("TensorFlow", "DeepLearning", "AI"),
                        instructors.get(3) // Juan P√©rez
                ),
                createCourse(
                        "Angular 16: Desarrollo Enterprise con TypeScript",
                        "Crea aplicaciones empresariales escalables con Angular 16, RxJS y mejores pr√°cticas.",
                        "Frontend", "Intermedio", 4.6, "58 horas", 14500, 140, 0,
                        "TypeScript para Angular",
                        "https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$69.99", "$119.99", 900, false, false, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Components", "Services", "RxJS", "Routing", "Testing"),
                        Arrays.asList("TypeScript", "JavaScript avanzado", "HTML/CSS"),
                        Arrays.asList("Angular", "TypeScript", "Frontend"),
                        instructors.get(4) // Laura Mart√≠nez
                ),
                createCourse(
                        "Blockchain y Smart Contracts con Solidity",
                        "Aprende desarrollo blockchain y crea smart contracts con Solidity para Ethereum.",
                        "Blockchain", "Intermedio", 4.7, "52 horas", 7600, 120, 0,
                        "Fundamentos de Blockchain",
                        "https://images.unsplash.com/photo-1639762681485-074b7f938ba0?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1639762681485-074b7f938ba0?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$79.99", "$139.99", 1100, true, false, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Solidity", "Smart Contracts", "DeFi", "NFTs", "Web3.js"),
                        Arrays.asList("JavaScript", "Programaci√≥n b√°sica", "Conceptos de criptograf√≠a"),
                        Arrays.asList("Blockchain", "Solidity", "Web3"),
                        instructors.get(5) // Diego Rodr√≠guez
                ),
                createCourse(
                        "Git Avanzado: Workflows y Colaboraci√≥n Profesional",
                        "Domina Git para trabajo en equipo. Aprende workflows profesionales y resoluci√≥n de conflictos.",
                        "Tools", "Principiante", 4.9, "25 horas", 19800, 50, 50,
                        "Comandos B√°sicos de Git",
                        "https://git-scm.com/images/logos/downloads/Git-Icon-1788C.png",
                        "https://miro.medium.com/v2/resize:fit:1400/1*_6M2zk7d9wXp2T_7bVgn8w.png",
                        "Gratis", null, 400, false, false, Course.CourseStatus.COMPLETED,
                        Arrays.asList("Branching Strategies", "Git Flow", "Conflict Resolution", "Hooks", "CI/CD Integration"),
                        Arrays.asList("Conocimientos b√°sicos de Git"),
                        Arrays.asList("Git", "DevOps", "Collaboration"),
                        instructors.get(6) // Sofia Chen
                ),
                createCourse(
                        "Spring Boot: Desarrollo Java Empresarial",
                        "Crea aplicaciones empresariales con Spring Boot, Spring Security y microservicios.",
                        "Backend", "Intermedio", 4.7, "65 horas", 12300, 150, 0,
                        "Introducci√≥n a Spring Boot",
                        "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$74.99", "$129.99", 1000, false, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Spring MVC", "Spring Security", "JPA/Hibernate", "Testing", "Microservices"),
                        Arrays.asList("Java avanzado", "Conceptos OOP", "Bases de datos"),
                        Arrays.asList("Spring", "Java", "Backend"),
                        instructors.get(7) // Roberto Silva
                ),
                createCourse(
                        "UI/UX Design para Desarrolladores",
                        "Aprende principios de dise√±o UI/UX para crear interfaces atractivas y usables.",
                        "Design", "Principiante", 4.8, "30 horas", 16700, 75, 25,
                        "Principios de Dise√±o",
                        "https://images.unsplash.com/photo-1561070791-2526d30994b5?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1561070791-2526d30994b5?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$49.99", "$89.99", 550, true, false, Course.CourseStatus.IN_PROGRESS,
                        Arrays.asList("Design Thinking", "Figma", "Prototyping", "User Research", "Accessibility"),
                        Arrays.asList("Conocimientos b√°sicos de dise√±o", "Inter√©s en experiencia de usuario"),
                        Arrays.asList("UI/UX", "Design", "Figma"),
                        instructors.get(0) // Dr. Ana Garc√≠a
                ),
                createCourse(
                        "Rust: Sistemas de Alto Rendimiento y Seguros",
                        "Domina Rust para desarrollar sistemas de alto rendimiento con seguridad de memoria.",
                        "Systems", "Avanzado", 4.8, "55 horas", 6800, 130, 0,
                        "Sintaxis de Rust",
                        "https://images.unsplash.com/photo-1589652717521-10c0d092dea9?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1589652717521-10c0d092dea9?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$69.99", "$119.99", 950, false, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Ownership", "Concurrency", "Memory Safety", "WebAssembly", "Systems Programming"),
                        Arrays.asList("Programaci√≥n avanzada", "Conceptos de sistemas", "C/C++ experiencia √∫til"),
                        Arrays.asList("Rust", "Systems", "Performance"),
                        instructors.get(1) // Carlos Mendoza
                ),
                createCourse(
                        "GraphQL: APIs Modernas con Apollo y React",
                        "Crea APIs modernas con GraphQL. Integra con React usando Apollo Client.",
                        "Backend", "Intermedio", 4.7, "38 horas", 11200, 90, 0,
                        "Fundamentos de GraphQL",
                        "https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$54.99", "$94.99", 700, true, false, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("GraphQL Schema", "Resolvers", "Apollo Server", "Apollo Client", "Caching"),
                        Arrays.asList("JavaScript", "Node.js b√°sico", "Conceptos de APIs"),
                        Arrays.asList("GraphQL", "API", "Backend"),
                        instructors.get(2) // Mar√≠a L√≥pez
                ),
                createCourse(
                        "DevOps con Azure: CI/CD y Infraestructura como C√≥digo",
                        "Implementa pipelines CI/CD y gestiona infraestructura en Azure con Terraform.",
                        "DevOps", "Intermedio", 4.6, "47 horas", 8900, 110, 0,
                        "Introducci√≥n a Azure",
                        "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&w=400&h=250&fit=crop&crop=center",
                        "$79.99", "$139.99", 850, false, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Azure Pipelines", "Terraform", "Kubernetes en Azure", "Monitoring", "Security"),
                        Arrays.asList("Conceptos de cloud", "Linux", "Scripting b√°sico"),
                        Arrays.asList("Azure", "DevOps", "Cloud"),
                        instructors.get(3) // Juan P√©rez
                ),
                createCourse(
                        "Introducci√≥n a la Programaci√≥n con C++",
                        "Aprende programaci√≥n desde cero con C++. Curso completo con metodolog√≠as de aprendizaje visual, auditiva, kinest√©sica y mixta. Ideal para principiantes que quieren dominar los fundamentos de la programaci√≥n.",
                        "Programming", "Principiante", 4.9, "80 horas", 0, 200, 0,
                        "¬øQu√© es la programaci√≥n?",
                        "https://i.imgur.com/XSgpcs0.gif",
                        "https://www.profesionalreview.com/wp-content/uploads/2024/07/Lenguaje-C.jpg",
                        "Gratis", null, 2000, true, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList(
                                "Fundamentos de programaci√≥n y pensamiento algor√≠tmico",
                                "Sintaxis completa de C++ desde variables hasta punteros",
                                "Estructuras de control: condicionales y ciclos",
                                "Funciones, modularizaci√≥n y recursividad",
                                "Manejo de arreglos, vectores y matrices",
                                "Programaci√≥n orientada a objetos b√°sica",
                                "Gesti√≥n de archivos y persistencia de datos",
                                "Proyecto final integrador aplicando todos los conceptos"
                        ),
                        Arrays.asList(
                                "Ning√∫n conocimiento previo de programaci√≥n necesario",
                                "Computadora con Windows, Linux o MacOS",
                                "Disposici√≥n para practicar y resolver ejercicios",
                                "Conexi√≥n a internet para acceder a materiales"
                        ),
                        Arrays.asList("C++", "Programming", "Beginner", "Algorithms", "DataStructures"),
                        instructors.get(8) // Prof. Miguel √Ångel Torres
                )
        );

        // Guardar cursos primero
        courses.forEach(courseService::save);

        // Ahora crear m√≥dulos completos para el curso de Git Avanzado
        Course gitCourse = courses.stream()
                .filter(c -> c.getTitle().equals("Git Avanzado: Workflows y Colaboraci√≥n Profesional"))
                .findFirst()
                .orElse(null);

        if (gitCourse != null) {
            initGitAdvancedModules(gitCourse);
        }

        Course cppCourse = courses.stream()
                .filter(c -> c.getTitle().equals("Introducci√≥n a la Programaci√≥n con C++"))
                .findFirst()
                .orElse(null);

        if (cppCourse != null) {
            initCppIntroductionModules(cppCourse);
        }
    }

    private void initGitAdvancedModules(Course gitCourse) {
        // M√≥dulo 1: Fundamentos de Git Revisitados
        ModuleModel module1 = createModule("Fundamentos de Git Revisitados",
                "Repaso de conceptos fundamentales de Git con enfoque en buenas pr√°cticas",
                "4 horas", 80, 100, true);
        module1.setCourse(gitCourse);
        moduleService.save(module1);

        // Tema 1.1: Comandos Esenciales
        Topic topic1_1 = createTopic("Comandos Esenciales para el Trabajo Diario", true);
        topic1_1.setModule(module1);
        topicService.save(topic1_1);

        // Lecciones del Tema 1.1
        Lesson lesson1_1_1 = createLesson("Git Status y Log Avanzados", "15 min", true, false);
        lesson1_1_1.setTopic(topic1_1);

      

        LessonContent content1_1_1 = createLessonContent(
                "https://example.com/videos/git-status-advanced",
                "https://example.com/audio/git-status-advanced",
                "Git_Status_Avanzado.pdf",
                "git status --short\ngit log --oneline --graph --all\ngit log --since='2024-01-01'",
                "mindmap-git-status.png",
                "interactive-git-log",
                Arrays.asList(
                        new CodeExplanation(1, "git status --short", "Muestra el estado en formato compacto"),
                        new CodeExplanation(2, "git log --oneline --graph --all", "Muestra historial gr√°fico compacto de todas las ramas"),
                        new CodeExplanation(3, "git log --since='2024-01-01'", "Filtra commits desde fecha espec√≠fica")
                )
        );

        lesson1_1_1.setContent(content1_1_1);
        lessonService.save(lesson1_1_1);

        

        Lesson lesson1_1_2 = createLesson("Staging y Commits Efectivos", "20 min", true, false);
        lesson1_1_2.setTopic(topic1_1);
      

        LessonContent content1_1_2 = createLessonContent(
                "https://example.com/videos/git-commit-effective",
                "https://example.com/audio/git-commit-effective",
                "Commits_Efectivos.pdf",
                "git add -p\ngit commit -m \"feat: add user authentication\\n\\n- Implement JWT token generation\\n- Add login endpoint\\n- Update user model\"",
                "mindmap-git-commit.png",
                "interactive-git-add",
                Arrays.asList(
                        new CodeExplanation(1, "git add -p", "Agrega cambios interactivamente, permitiendo revisar cada modificaci√≥n"),
                        new CodeExplanation(2, "git commit -m \"feat: add user authentication\"", "Commit con mensaje siguiendo convencional commits")
                )
        );
        lesson1_1_2.setContent(content1_1_2);
        lessonService.save(lesson1_1_2);

        // Tema 1.2: Ramas y Merging
        Topic topic1_2 = createTopic("Manejo Avanzado de Ramas", true);
        topic1_2.setModule(module1);
        topicService.save(topic1_2);

        Lesson lesson1_2_1 = createLesson("Creaci√≥n y Navegaci√≥n de Ramas", "18 min", true, false);
        lesson1_2_1.setTopic(topic1_2);
       

        LessonContent content1_2_1 = createLessonContent(
                "https://example.com/videos/git-branching",
                "https://example.com/audio/git-branching",
                "Ramas_Avanzadas.pdf",
                "git branch feature/user-auth\ngit checkout feature/user-auth\ngit switch -c hotfix/critical-bug",
                "mindmap-git-branches.png",
                "interactive-git-branch",
                Arrays.asList(
                        new CodeExplanation(1, "git branch feature/user-auth", "Crea nueva rama para feature de autenticaci√≥n"),
                        new CodeExplanation(2, "git checkout feature/user-auth", "Cambia a la rama reci√©n creada"),
                        new CodeExplanation(3, "git switch -c hotfix/critical-bug", "Crea y cambia a rama de hotfix en un solo comando")
                )
        );
        lesson1_2_1.setContent(content1_2_1);
        lessonService.save(lesson1_2_1);

        // M√≥dulo 2: Workflows de Colaboraci√≥n
        ModuleModel module2 = createModule("Workflows de Colaboraci√≥n",
                "Estrategias profesionales para trabajo en equipo con Git",
                "6 horas", 120, 75, false);
        module2.setCourse(gitCourse);
        moduleService.save(module2);

        // Tema 2.1: Git Flow
        Topic topic2_1 = createTopic("Git Flow: Workflow Est√°ndar", false);
        topic2_1.setModule(module2);
        topicService.save(topic2_1);

        Lesson lesson2_1_1 = createLesson("Introducci√≥n a Git Flow", "25 min", false, true);
        lesson2_1_1.setTopic(topic2_1);
        

        LessonContent content2_1_1 = createLessonContent(
                "https://example.com/videos/git-flow-intro",
                "https://example.com/audio/git-flow-intro",
                "Git_Flow_Introduction.pdf",
                "git flow init\ngit flow feature start authentication\ngit flow feature finish authentication",
                "mindmap-git-flow.png",
                "interactive-git-flow",
                Arrays.asList(
                        new CodeExplanation(1, "git flow init", "Inicializa Git Flow en el repositorio"),
                        new CodeExplanation(2, "git flow feature start authentication", "Inicia nueva feature branch"),
                        new CodeExplanation(3, "git flow feature finish authentication", "Finaliza feature y mergea a develop")
                )
        );
        lesson2_1_1.setContent(content2_1_1);
        lessonService.save(lesson2_1_1);


        Lesson lesson2_1_2 = createLesson("Ramas Principales: main, develop, features", "30 min", false, false);
        lesson2_1_2.setTopic(topic2_1);
        

        LessonContent content2_1_2 = createLessonContent(
                "https://example.com/videos/git-flow-branches",
                "https://example.com/audio/git-flow-branches",
                "Git_Flow_Branches.pdf",
                "# main - producci√≥n\n# develop - desarrollo\n# feature/* - nuevas funcionalidades\n# release/* - preparaci√≥n releases\n# hotfix/* - correcciones urgentes",
                "mindmap-git-flow-branches.png",
                "interactive-git-branches",
                Arrays.asList(
                        new CodeExplanation(1, "main", "Rama principal con c√≥digo de producci√≥n"),
                        new CodeExplanation(2, "develop", "Rama de integraci√≥n para desarrollo"),
                        new CodeExplanation(3, "feature/*", "Ramas temporales para nuevas funcionalidades")
                )
        );
       
        lesson2_1_2.setContent(content2_1_2);
        lessonService.save(lesson2_1_2);

        // Tema 2.2: GitHub Flow
        Topic topic2_2 = createTopic("GitHub Flow: Workflow Simplificado", false);
        topic2_2.setModule(module2);
        topicService.save(topic2_2);

        Lesson lesson2_2_1 = createLesson("Pull Requests y Code Review", "35 min", false, false);
        lesson2_2_1.setTopic(topic2_2);
       

        LessonContent content2_2_1 = createLessonContent(
                "https://example.com/videos/github-flow-pr",
                "https://example.com/audio/github-flow-pr",
                "Pull_Requests.pdf",
                "# Crear PR desde GitHub UI\n# Agregar revisores\n# Resolver comentarios\ngit push origin feature/auth",
                "mindmap-pull-requests.png",
                "interactive-pr-workflow",
                Arrays.asList(
                        new CodeExplanation(1, "Crear PR desde GitHub UI", "Interfaz web para crear Pull Requests"),
                        new CodeExplanation(2, "Agregar revisores", "Asignar colegas para revisi√≥n de c√≥digo"),
                        new CodeExplanation(3, "git push origin feature/auth", "Subir cambios para crear PR")
                )
        );
        
        lesson2_2_1.setContent(content2_2_1);
        lessonService.save(lesson2_2_1);

        // M√≥dulo 3: Resoluci√≥n de Conflictos
        ModuleModel module3 = createModule("Resoluci√≥n Avanzada de Conflictos",
                "T√©cnicas profesionales para manejar y resolver conflictos de merge",
                "5 horas", 100, 50, false);
        module3.setCourse(gitCourse);
        moduleService.save(module3);

        // Tema 3.1: Tipos de Conflictos
        Topic topic3_1 = createTopic("Identificaci√≥n y Prevenci√≥n", false);
        topic3_1.setModule(module3);
        topicService.save(topic3_1);

        Lesson lesson3_1_1 = createLesson("Conflictos Comunes y Su Origen", "22 min", false, false);
        lesson3_1_1.setTopic(topic3_1);
    

        LessonContent content3_1_1 = createLessonContent(
                "https://example.com/videos/git-conflicts",
                "https://example.com/audio/git-conflicts",
                "Tipos_Conflictos.pdf",
                "<<<<<<< HEAD\nconsole.log('Hello World');\n=======\nconsole.log('Hola Mundo');\n>>>>>>> feature/spanish",
                "mindmap-conflict-types.png",
                "interactive-conflict-simulation",
                Arrays.asList(
                        new CodeExplanation(1, "<<<<<<< HEAD", "Inicio del conflicto - versi√≥n actual"),
                        new CodeExplanation(2, "=======", "Separador entre las dos versiones"),
                        new CodeExplanation(3, ">>>>>>> feature/spanish", "Fin del conflicto - versi√≥n entrante")
                )
        );
        lesson3_1_1.setContent(content3_1_1);
        lessonService.save(lesson3_1_1);
        

        Lesson lesson3_1_2 = createLesson("Herramientas de Resoluci√≥n", "28 min", false, false);
        lesson3_1_2.setTopic(topic3_1);
     
        LessonContent content3_1_2 = createLessonContent(
                "https://example.com/videos/git-tools",
                "https://example.com/audio/git-tools",
                "Herramientas_Resolucion.pdf",
                "git mergetool\ngit config --global merge.tool vscode\ngit add .\ngit commit -m \"Resolve merge conflicts\"",
                "mindmap-merge-tools.png",
                "interactive-merge-tool",
                Arrays.asList(
                        new CodeExplanation(1, "git mergetool", "Abre herramienta visual para resolver conflictos"),
                        new CodeExplanation(2, "git config --global merge.tool vscode", "Configura VS Code como herramienta de merge"),
                        new CodeExplanation(3, "git add .", "Marca conflictos resueltos como listos para commit")
                )
        );
        lesson3_1_2.setContent(content3_1_2);
        lessonService.save(lesson3_1_2);
        // M√≥dulo 4: Hooks y Automatizaci√≥n
        ModuleModel module4 = createModule("Hooks y Automatizaci√≥n",
                "Automatiza tareas con Git Hooks y integraci√≥n con CI/CD",
                "4 horas", 80, 25, false);
        module4.setCourse(gitCourse);
        moduleService.save(module4);

        // Tema 4.1: Git Hooks
        Topic topic4_1 = createTopic("Hooks Personalizados", false);
        topic4_1.setModule(module4);
        topicService.save(topic4_1);

        Lesson lesson4_1_1 = createLesson("Hooks de Cliente: pre-commit y pre-push", "32 min", false, false);
        lesson4_1_1.setTopic(topic4_1);
    

        LessonContent content4_1_1 = createLessonContent(
                "https://example.com/videos/git-hooks",
                "https://example.com/audio/git-hooks",
                "Git_Hooks.pdf",
                "#!/bin/bash\n# .git/hooks/pre-commit\necho \"Running tests...\"\nnpm test\nif [ $? -ne 0 ]; then\n    echo \"Tests failed!\"\n    exit 1\nfi",
                "mindmap-git-hooks.png",
                "interactive-hook-builder",
                Arrays.asList(
                        new CodeExplanation(1, "#!/bin/bash", "Shebang para script bash"),
                        new CodeExplanation(2, "npm test", "Ejecuta suite de pruebas"),
                        new CodeExplanation(3, "exit 1", "Sale con error si las pruebas fallan")
                )
        );
        lesson4_1_1.setContent(content4_1_1);
        lessonService.save(lesson4_1_1);
       

        // Tema 4.2: Integraci√≥n CI/CD
        Topic topic4_2 = createTopic("Git en Pipelines de CI/CD", false);
        topic4_2.setModule(module4);
        topicService.save(topic4_2);

        Lesson lesson4_2_1 = createLesson("GitHub Actions para Automatizaci√≥n", "40 min", false, false);
        lesson4_2_1.setTopic(topic4_2);
       

        LessonContent content4_2_1 = createLessonContent(
                "https://example.com/videos/github-actions",
                "https://example.com/audio/github-actions",
                "GitHub_Actions.pdf",
                "name: CI Pipeline\non: [push, pull_request]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npm install\n      - run: npm test",
                "mindmap-ci-cd.png",
                "interactive-ci-pipeline",
                Arrays.asList(
                        new CodeExplanation(1, "on: [push, pull_request]", "Dispara pipeline en push y PR"),
                        new CodeExplanation(2, "actions/checkout@v3", "Acci√≥n para checkout del c√≥digo"),
                        new CodeExplanation(3, "npm test", "Ejecuta pruebas en el pipeline")
                )
        );
        lesson4_2_1.setContent(content4_2_1);
        lessonService.save(lesson4_2_1);
        

        // M√≥dulo 5: Proyecto Final
        ModuleModel module5 = createModule("Proyecto Final: Workflow Completo",
                "Aplicaci√≥n de todos los conceptos en un proyecto real",
                "6 hours", 120, 0, false);
        module5.setCourse(gitCourse);
        moduleService.save(module5);

        // Tema 5.1: Proyecto Pr√°ctico
        Topic topic5_1 = createTopic("Implementaci√≥n de Git Flow en Proyecto Real", false);
        topic5_1.setModule(module5);
        topicService.save(topic5_1);

        Lesson lesson5_1_1 = createLesson("Setup y Configuraci√≥n Inicial", "45 min", false, false);
        lesson5_1_1.setTopic(topic5_1);
      

        LessonContent content5_1_1 = createLessonContent(
                "https://example.com/videos/git-project-setup",
                "https://example.com/audio/git-project-setup",
                "Proyecto_Final.pdf",
                "git init\ngit flow init\ngit checkout -b develop\ngit push -u origin develop",
                "mindmap-final-project.png",
                "interactive-project-setup",
                Arrays.asList(
                        new CodeExplanation(1, "git init", "Inicializa repositorio Git"),
                        new CodeExplanation(2, "git flow init", "Configura Git Flow con valores por defecto"),
                        new CodeExplanation(3, "git push -u origin develop", "Sube rama develop y establece upstream")
                )
        );
        lesson5_1_1.setContent(content5_1_1);
        lessonService.save(lesson5_1_1);
        
    }

    //Curso de C++ 
    //-----------------------------------------------------------------------------------------------------------------------
    private void initCppIntroductionModules(Course cppCourse) {
        // ========== M√ìDULO 1: FUNDAMENTOS DE PROGRAMACI√ìN ==========
        ModuleModel module1 = createModule(
                "Fundamentos de Programaci√≥n",
                "Introducci√≥n a los conceptos b√°sicos de programaci√≥n, algoritmos y configuraci√≥n del entorno C++",
                "12 horas", 200, 0, false);
        module1.setCourse(cppCourse);
        moduleService.save(module1);

        // Tema 1.1: Introducci√≥n a la Programaci√≥n
        Topic topic1_1 = createTopic("Introducci√≥n a la Programaci√≥n", false);
        topic1_1.setModule(module1);
        topicService.save(topic1_1);

        // Lecci√≥n 1.1.1: ¬øQu√© es la programaci√≥n?
        Lesson lesson1_1_1 = createLesson("¬øQu√© es la programaci√≥n?", "25 min", false, true);
        lesson1_1_1.setTopic(topic1_1);

        LessonContent content1_1_1 = createLessonContent(
                "https://example.com/videos/cpp-intro-programming",
                "https://example.com/audio/cpp-intro-programming-podcast",
                "Introduccion_Programacion.pdf",
                "// La programaci√≥n es el proceso de crear instrucciones\n// para que una computadora realice tareas espec√≠ficas\n\n// Ejemplo simple:\ncout << \"¬°Hola, bienvenido a la programaci√≥n!\";",
                "mindmap-programming-concepts.png",
                "interactive-algorithm-thinking",
                Arrays.asList(
                        new CodeExplanation(1, "// Comentarios en C++", "Los comentarios ayudan a documentar el c√≥digo"),
                        new CodeExplanation(2, "cout << \"mensaje\";", "Instrucci√≥n para mostrar texto en pantalla")
                )
        );
        content1_1_1.setLesson(lesson1_1_1);
        lesson1_1_1.setContent(content1_1_1);
        lessonService.save(lesson1_1_1);

        // Lecci√≥n 1.1.2: Algoritmos y L√≥gica de Programaci√≥n
        Lesson lesson1_1_2 = createLesson("Algoritmos y L√≥gica de Programaci√≥n", "30 min", false, false);
        lesson1_1_2.setTopic(topic1_1);

        LessonContent content1_1_2 = createLessonContent(
                "https://example.com/videos/cpp-algorithms-logic",
                "https://example.com/audio/cpp-algorithms-logic",
                "Algoritmos_Logica.pdf",
                "// Pseudoc√≥digo: Calcular promedio de 3 n√∫meros\n// Inicio\n//   Leer num1, num2, num3\n//   promedio = (num1 + num2 + num3) / 3\n//   Mostrar promedio\n// Fin",
                "mindmap-algorithms.png",
                "interactive-flowchart-builder",
                Arrays.asList(
                        new CodeExplanation(1, "Pseudoc√≥digo", "Representaci√≥n en lenguaje natural de un algoritmo"),
                        new CodeExplanation(2, "Leer datos", "Obtener informaci√≥n del usuario"),
                        new CodeExplanation(3, "Procesar", "Realizar c√°lculos o transformaciones"),
                        new CodeExplanation(4, "Mostrar resultado", "Presentar el resultado al usuario")
                )
        );
        content1_1_2.setLesson(lesson1_1_2);
   
        lesson1_1_2.setContent(content1_1_2);
        lessonService.save(lesson1_1_2);

        // Lecci√≥n 1.1.3: Introducci√≥n a C++ y Configuraci√≥n del Entorno
        Lesson lesson1_1_3 = createLesson("Introducci√≥n a C++ y Configuraci√≥n del Entorno", "35 min", false, false);
        lesson1_1_3.setTopic(topic1_1);

        LessonContent content1_1_3 = createLessonContent(
                "https://example.com/videos/cpp-setup-environment",
                "https://example.com/audio/cpp-setup-environment",
                "Configuracion_Entorno_CPP.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello World!\" << endl;\n    return 0;\n}",
                "mindmap-cpp-history.png",
                "interactive-ide-setup",
                Arrays.asList(
                        new CodeExplanation(1, "#include <iostream>", "Incluye la biblioteca de entrada/salida"),
                        new CodeExplanation(2, "using namespace std;", "Permite usar cout sin prefijo std::"),
                        new CodeExplanation(3, "int main()", "Funci√≥n principal donde inicia el programa"),
                        new CodeExplanation(4, "cout << \"Hello World!\"", "Imprime texto en la consola"),
                        new CodeExplanation(5, "return 0;", "Indica que el programa termin√≥ correctamente")
                )
        );
        content1_1_3.setLesson(lesson1_1_3);
      
        lesson1_1_3.setContent(content1_1_3);
        lessonService.save(lesson1_1_3);

        // Tema 1.2: Sintaxis B√°sica de C++
        Topic topic1_2 = createTopic("Sintaxis B√°sica de C++", false);
        topic1_2.setModule(module1);
        topicService.save(topic1_2);

        // Lecci√≥n 1.2.1: Estructura de un Programa en C++
        Lesson lesson1_2_1 = createLesson("Estructura de un Programa en C++", "28 min", false, false);
        lesson1_2_1.setTopic(topic1_2);

        LessonContent content1_2_1 = createLessonContent(
                "https://example.com/videos/cpp-program-structure",
                "https://example.com/audio/cpp-program-structure",
                "Estructura_Programa_CPP.pdf",
                "#include <iostream>  // Directiva de preprocesador\nusing namespace std; // Espacio de nombres\n\n// Funci√≥n principal\nint main() {\n    // Comentario de una l√≠nea\n    /* Comentario\n       de m√∫ltiples l√≠neas */\n    cout << \"Mi primer programa\" << endl;\n    return 0; // Valor de retorno\n}",
                "mindmap-program-structure.png",
                "interactive-code-anatomy",
                Arrays.asList(
                        new CodeExplanation(1, "#include", "Directiva del preprocesador para incluir bibliotecas"),
                        new CodeExplanation(2, "using namespace std", "Evita escribir std:: antes de cada funci√≥n"),
                        new CodeExplanation(3, "int main()", "Punto de entrada del programa"),
                        new CodeExplanation(4, "// comentario", "Comentarios para documentar el c√≥digo"),
                        new CodeExplanation(5, "return 0", "Retorna 0 para indicar ejecuci√≥n exitosa")
                )
        );
        content1_2_1.setLesson(lesson1_2_1);
       
        lesson1_2_1.setContent(content1_2_1);
        lessonService.save(lesson1_2_1);

        // Lecci√≥n 1.2.2: Variables y Tipos de Datos
        Lesson lesson1_2_2 = createLesson("Variables y Tipos de Datos", "32 min", false, false);
        lesson1_2_2.setTopic(topic1_2);

        LessonContent content1_2_2 = createLessonContent(
                "https://example.com/videos/cpp-variables-datatypes",
                "https://example.com/audio/cpp-variables-datatypes",
                "Variables_Tipos_Datos.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Tipos de datos b√°sicos\n    int edad = 25;              // Entero\n    float altura = 1.75;        // Decimal (precisi√≥n simple)\n    double precio = 99.99;      // Decimal (doble precisi√≥n)\n    char inicial = 'A';         // Car√°cter\n    bool esEstudiante = true;   // Booleano\n    string nombre = \"Carlos\";   // Cadena de texto\n    \n    cout << \"Edad: \" << edad << endl;\n    cout << \"Altura: \" << altura << endl;\n    cout << \"Precio: \" << precio << endl;\n    cout << \"Inicial: \" << inicial << endl;\n    cout << \"Es estudiante: \" << esEstudiante << endl;\n    cout << \"Nombre: \" << nombre << endl;\n    \n    return 0;\n}",
                "mindmap-data-types.png",
                "interactive-memory-visualization",
                Arrays.asList(
                        new CodeExplanation(1, "int edad = 25", "Declara variable entera e inicializa con 25"),
                        new CodeExplanation(2, "float altura = 1.75", "N√∫mero decimal de precisi√≥n simple"),
                        new CodeExplanation(3, "double precio = 99.99", "N√∫mero decimal de doble precisi√≥n"),
                        new CodeExplanation(4, "char inicial = 'A'", "Almacena un solo car√°cter"),
                        new CodeExplanation(5, "bool esEstudiante = true", "Valor booleano: true o false"),
                        new CodeExplanation(6, "string nombre = \"Carlos\"", "Cadena de texto")
                )
        );
        content1_2_2.setLesson(lesson1_2_2);
       
        lesson1_2_2.setContent(content1_2_2);
        lessonService.save(lesson1_2_2);

        // Lecci√≥n 1.2.3: Operadores Aritm√©ticos y de Asignaci√≥n
        Lesson lesson1_2_3 = createLesson("Operadores Aritm√©ticos y de Asignaci√≥n", "30 min", false, false);
        lesson1_2_3.setTopic(topic1_2);

        LessonContent content1_2_3 = createLessonContent(
                "https://example.com/videos/cpp-operators",
                "https://example.com/audio/cpp-operators",
                "Operadores_CPP.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 10, b = 3;\n    \n    // Operadores aritm√©ticos\n    cout << \"Suma: \" << (a + b) << endl;         // 13\n    cout << \"Resta: \" << (a - b) << endl;        // 7\n    cout << \"Multiplicaci√≥n: \" << (a * b) << endl; // 30\n    cout << \"Divisi√≥n: \" << (a / b) << endl;     // 3 (divisi√≥n entera)\n    cout << \"M√≥dulo: \" << (a % b) << endl;       // 1 (residuo)\n    \n    // Operadores de incremento/decremento\n    int x = 5;\n    x++;  // x = 6\n    x--;  // x = 5\n    \n    // Operadores de asignaci√≥n compuesta\n    int y = 10;\n    y += 5;  // y = 15 (equivale a y = y + 5)\n    y *= 2;  // y = 30 (equivale a y = y * 2)\n    \n    cout << \"Resultado final: \" << y << endl;\n    \n    return 0;\n}",
                "mindmap-operators.png",
                "interactive-operator-calculator",
                Arrays.asList(
                        new CodeExplanation(1, "a + b", "Suma de dos valores"),
                        new CodeExplanation(2, "a - b", "Resta de dos valores"),
                        new CodeExplanation(3, "a * b", "Multiplicaci√≥n"),
                        new CodeExplanation(4, "a / b", "Divisi√≥n (entera si ambos son int)"),
                        new CodeExplanation(5, "a % b", "M√≥dulo (resto de la divisi√≥n)"),
                        new CodeExplanation(6, "x++", "Incrementa x en 1"),
                        new CodeExplanation(7, "y += 5", "Suma 5 a y (asignaci√≥n compuesta)")
                )
        );
        content1_2_3.setLesson(lesson1_2_3);
      
        lesson1_2_3.setContent(content1_2_3);
        lessonService.save(lesson1_2_3);

        // ========== M√ìDULO 2: ESTRUCTURAS DE CONTROL ==========
        ModuleModel module2 = createModule(
                "Estructuras de Control",
                "Domina condicionales, operadores l√≥gicos y ciclos para controlar el flujo de tus programas",
                "14 horas", 250, 0, false);
        module2.setCourse(cppCourse);
        moduleService.save(module2);

        // Tema 2.1: Condicionales
        Topic topic2_1 = createTopic("Condicionales", false);
        topic2_1.setModule(module2);
        topicService.save(topic2_1);

        // Lecci√≥n 2.1.1: Estructura if-else
        Lesson lesson2_1_1 = createLesson("Estructura if-else", "28 min", false, false);
        lesson2_1_1.setTopic(topic2_1);

        LessonContent content2_1_1 = createLessonContent(
                "https://example.com/videos/cpp-if-else",
                "https://example.com/audio/cpp-if-else",
                "Estructura_If_Else.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    int edad;\n    cout << \"Ingrese su edad: \";\n    cin >> edad;\n    \n    // if-else simple\n    if (edad >= 18) {\n        cout << \"Eres mayor de edad\" << endl;\n    } else {\n        cout << \"Eres menor de edad\" << endl;\n    }\n    \n    // if-else if-else anidado\n    int calificacion;\n    cout << \"Ingrese calificaci√≥n (0-100): \";\n    cin >> calificacion;\n    \n    if (calificacion >= 90) {\n        cout << \"Excelente\" << endl;\n    } else if (calificacion >= 70) {\n        cout << \"Bueno\" << endl;\n    } else if (calificacion >= 50) {\n        cout << \"Aprobado\" << endl;\n    } else {\n        cout << \"Reprobado\" << endl;\n    }\n    \n    return 0;\n}",
                "mindmap-if-else.png",
                "interactive-flowchart-if",
                Arrays.asList(
                        new CodeExplanation(1, "if (condicion)", "Eval√∫a si la condici√≥n es verdadera"),
                        new CodeExplanation(2, "else", "Ejecuta si la condici√≥n del if es falsa"),
                        new CodeExplanation(3, "else if", "Eval√∫a condiciones adicionales"),
                        new CodeExplanation(4, "cin >> variable", "Lee entrada del usuario")
                )
        );
        content2_1_1.setLesson(lesson2_1_1);
    
        lesson2_1_1.setContent(content2_1_1);
        lessonService.save(lesson2_1_1);

        // Lecci√≥n 2.1.2: Operadores Relacionales y L√≥gicos
        Lesson lesson2_1_2 = createLesson("Operadores Relacionales y L√≥gicos", "25 min", false, false);
        lesson2_1_2.setTopic(topic2_1);

        LessonContent content2_1_2 = createLessonContent(
                "https://example.com/videos/cpp-logical-operators",
                "https://example.com/audio/cpp-logical-operators",
                "Operadores_Logicos.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    int edad = 25;\n    bool tieneLicencia = true;\n    \n    // Operadores relacionales\n    bool mayorDeEdad = (edad >= 18);  // true\n    bool esIgual = (edad == 25);       // true\n    bool esDiferente = (edad != 30);   // true\n    \n    // Operadores l√≥gicos\n    // AND (&&) - Ambas condiciones deben ser verdaderas\n    if (edad >= 18 && tieneLicencia) {\n        cout << \"Puede conducir\" << endl;\n    }\n    \n    // OR (||) - Al menos una condici√≥n debe ser verdadera\n    if (edad < 18 || !tieneLicencia) {\n        cout << \"No puede conducir\" << endl;\n    }\n    \n    // NOT (!) - Invierte el valor booleano\n    if (!tieneLicencia) {\n        cout << \"Debe obtener licencia\" << endl;\n    }\n    \n    // Combinaci√≥n de operadores\n    int hora = 14;\n    if ((hora >= 12 && hora < 18) || (edad > 21)) {\n        cout << \"Horario v√°lido\" << endl;\n    }\n    \n    return 0;\n}",
                "mindmap-logical-operators.png",
                "interactive-truth-tables",
                Arrays.asList(
                        new CodeExplanation(1, "==", "Igual a"),
                        new CodeExplanation(2, "!=", "Diferente de"),
                        new CodeExplanation(3, "< <= > >=", "Menor, menor o igual, mayor, mayor o igual"),
                        new CodeExplanation(4, "&&", "AND l√≥gico - ambas condiciones verdaderas"),
                        new CodeExplanation(5, "||", "OR l√≥gico - al menos una condici√≥n verdadera"),
                        new CodeExplanation(6, "!", "NOT l√≥gico - invierte el valor booleano")
                )
        );
        content2_1_2.setLesson(lesson2_1_2);
       
        lesson2_1_2.setContent(content2_1_2);
        lessonService.save(lesson2_1_2);

        // Lecci√≥n 2.1.3: Switch-Case
        Lesson lesson2_1_3 = createLesson("Switch-Case", "22 min", false, false);
        lesson2_1_3.setTopic(topic2_1);

        LessonContent content2_1_3 = createLessonContent(
                "https://example.com/videos/cpp-switch-case",
                "https://example.com/audio/cpp-switch-case",
                "Switch_Case.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    int opcion;\n    cout << \"=== MEN√ö PRINCIPAL ===\" << endl;\n    cout << \"1. Nuevo juego\" << endl;\n    cout << \"2. Cargar partida\" << endl;\n    cout << \"3. Opciones\" << endl;\n    cout << \"4. Salir\" << endl;\n    cout << \"Seleccione una opci√≥n: \";\n    cin >> opcion;\n    \n    switch(opcion) {\n        case 1:\n            cout << \"Iniciando nuevo juego...\" << endl;\n            break;\n        case 2:\n            cout << \"Cargando partida...\" << endl;\n            break;\n        case 3:\n            cout << \"Abriendo opciones...\" << endl;\n            break;\n        case 4:\n            cout << \"Saliendo del juego...\" << endl;\n            break;\n        default:\n            cout << \"Opci√≥n inv√°lida\" << endl;\n    }\n    \n    // Ejemplo: D√≠as de la semana\n    int dia = 3;\n    switch(dia) {\n        case 1: cout << \"Lunes\"; break;\n        case 2: cout << \"Martes\"; break;\n        case 3: cout << \"Mi√©rcoles\"; break;\n        case 4: cout << \"Jueves\"; break;\n        case 5: cout << \"Viernes\"; break;\n        case 6:\n        case 7:\n            cout << \"Fin de semana\"; break;\n        default:\n            cout << \"D√≠a inv√°lido\";\n    }\n    \n    return 0;\n}",
                "mindmap-switch-case.png",
                "interactive-menu-builder",
                Arrays.asList(
                        new CodeExplanation(1, "switch(variable)", "Eval√∫a el valor de la variable"),
                        new CodeExplanation(2, "case valor:", "Define un caso espec√≠fico"),
                        new CodeExplanation(3, "break;", "Sale del switch (importante para evitar fall-through)"),
                        new CodeExplanation(4, "default:", "Se ejecuta si ning√∫n caso coincide"),
                        new CodeExplanation(5, "case 6: case 7:", "M√∫ltiples casos pueden compartir c√≥digo")
                )
        );
        content2_1_3.setLesson(lesson2_1_3);
       
        lesson2_1_3.setContent(content2_1_3);
        lessonService.save(lesson2_1_3);

        // Tema 2.2: Ciclos e Iteraciones
        Topic topic2_2 = createTopic("Ciclos e Iteraciones", false);
        topic2_2.setModule(module2);
        topicService.save(topic2_2);

        // Lecci√≥n 2.2.1: Ciclo While
        Lesson lesson2_2_1 = createLesson("Ciclo While", "26 min", false, false);
        lesson2_2_1.setTopic(topic2_2);
     

        LessonContent content2_2_1 = createLessonContent(
                "https://example.com/videos/cpp-while-loop",
                "https://example.com/audio/cpp-while-loop",
                "Ciclo_While.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Ejemplo 1: Contador simple\n    int contador = 1;\n    while (contador <= 5) {\n        cout << \"Iteraci√≥n: \" << contador << endl;\n        contador++;\n    }\n    \n    // Ejemplo 2: Sumar n√∫meros hasta que el usuario ingrese 0\n    int numero, suma = 0;\n    cout << \"Ingrese n√∫meros (0 para terminar):\" << endl;\n    cin >> numero;\n    \n    while (numero != 0) {\n        suma += numero;\n        cout << \"Suma actual: \" << suma << endl;\n        cout << \"Ingrese otro n√∫mero: \";\n        cin >> numero;\n    }\n    cout << \"Suma total: \" << suma << endl;\n    \n    // Ejemplo 3: Validaci√≥n de entrada\n    int edad;\n    cout << \"Ingrese edad (1-120): \";\n    cin >> edad;\n    \n    while (edad < 1 || edad > 120) {\n        cout << \"Edad inv√°lida. Intente nuevamente: \";\n        cin >> edad;\n    }\n    cout << \"Edad v√°lida: \" << edad << endl;\n    \n    return 0;\n}",
                "mindmap-while-loop.png",
                "interactive-while-visualizer",
                Arrays.asList(
                        new CodeExplanation(1, "while (condicion)", "Repite mientras la condici√≥n sea verdadera"),
                        new CodeExplanation(2, "contador++", "Incrementa el contador en cada iteraci√≥n"),
                        new CodeExplanation(3, "suma += numero", "Acumula valores en la variable suma"),
                        new CodeExplanation(4, "while (validacion)", "√ötil para validar entrada del usuario")
                )
        );
        content2_2_1.setLesson(lesson2_2_1);
      
        lesson2_2_1.setContent(content2_2_1);
           lessonService.save(lesson2_2_1);

        // Lecci√≥n 2.2.2: Ciclo Do-While
        Lesson lesson2_2_2 = createLesson("Ciclo Do-While", "20 min", false, false);
        lesson2_2_2.setTopic(topic2_2);
       

        LessonContent content2_2_2 = createLessonContent(
                "https://example.com/videos/cpp-do-while-loop",
                "https://example.com/audio/cpp-do-while-loop",
                "Ciclo_Do_While.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Diferencia clave: do-while se ejecuta al menos una vez\n    int opcion;\n    \n    do {\n        cout << \"\\n=== MEN√ö ===\" << endl;\n        cout << \"1. Opci√≥n A\" << endl;\n        cout << \"2. Opci√≥n B\" << endl;\n        cout << \"3. Opci√≥n C\" << endl;\n        cout << \"0. Salir\" << endl;\n        cout << \"Seleccione: \";\n        cin >> opcion;\n        \n        switch(opcion) {\n            case 1:\n                cout << \"Ejecutando opci√≥n A\" << endl;\n                break;\n            case 2:\n                cout << \"Ejecutando opci√≥n B\" << endl;\n                break;\n            case 3:\n                cout << \"Ejecutando opci√≥n C\" << endl;\n                break;\n            case 0:\n                cout << \"¬°Hasta luego!\" << endl;\n                break;\n            default:\n                cout << \"Opci√≥n inv√°lida\" << endl;\n        }\n    } while (opcion != 0);\n    \n    // Ejemplo 2: Validaci√≥n de contrase√±a\n    string password;\n    do {\n        cout << \"Ingrese contrase√±a (min 6 caracteres): \";\n        cin >> password;\n        if (password.length() < 6) {\n            cout << \"Contrase√±a muy corta\" << endl;\n        }\n    } while (password.length() < 6);\n    \n    cout << \"Contrase√±a aceptada\" << endl;\n    \n    return 0;\n}",
                "mindmap-do-while-loop.png",
                "interactive-do-while-comparison",
                Arrays.asList(
                        new CodeExplanation(1, "do { ... } while (condicion)", "Ejecuta el bloque al menos una vez"),
                        new CodeExplanation(2, "Diferencia con while", "do-while eval√∫a la condici√≥n al final"),
                        new CodeExplanation(3, "Uso ideal", "Men√∫s y validaciones que requieren ejecutarse al menos una vez")
                )
        );
        content2_2_2.setLesson(lesson2_2_2);
       
        lesson2_2_2.setContent(content2_2_2);
        lessonService.save(lesson2_2_2);

        // Lecci√≥n 2.2.3: Ciclo For
        Lesson lesson2_2_3 = createLesson("Ciclo For", "28 min", false, false);
        lesson2_2_3.setTopic(topic2_2);
       

        LessonContent content2_2_3 = createLessonContent(
                "https://example.com/videos/cpp-for-loop",
                "https://example.com/audio/cpp-for-loop",
                "Ciclo_For.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Ejemplo 1: Contar del 1 al 10\n    for (int i = 1; i <= 10; i++) {\n        cout << i << \" \";\n    }\n    cout << endl;\n    \n    // Ejemplo 2: Tabla de multiplicar\n    int numero = 7;\n    cout << \"Tabla del \" << numero << \":\" << endl;\n    for (int i = 1; i <= 10; i++) {\n        cout << numero << \" x \" << i << \" = \" << (numero * i) << endl;\n    }\n    \n    // Ejemplo 3: Sumar n√∫meros del 1 al 100\n    int suma = 0;\n    for (int i = 1; i <= 100; i++) {\n        suma += i;\n    }\n    cout << \"Suma del 1 al 100: \" << suma << endl;\n    \n    // Ejemplo 4: Contar hacia atr√°s\n    cout << \"Cuenta regresiva: \";\n    for (int i = 10; i >= 0; i--) {\n        cout << i << \" \";\n    }\n    cout << \"¬°Despegue!\" << endl;\n    \n    // Ejemplo 5: Incrementos personalizados\n    cout << \"N√∫meros pares del 2 al 20: \";\n    for (int i = 2; i <= 20; i += 2) {\n        cout << i << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}",
                "mindmap-for-loop.png",
                "interactive-for-visualizer",
                Arrays.asList(
                        new CodeExplanation(1, "for (inicializaci√≥n; condici√≥n; incremento)", "Estructura completa del for"),
                        new CodeExplanation(2, "int i = 1", "Inicializaci√≥n: se ejecuta una sola vez al inicio"),
                        new CodeExplanation(3, "i <= 10", "Condici√≥n: se eval√∫a antes de cada iteraci√≥n"),
                        new CodeExplanation(4, "i++", "Incremento: se ejecuta al final de cada iteraci√≥n"),
                        new CodeExplanation(5, "i += 2", "Incrementos personalizados para saltos mayores")
                )
        );
    
        lesson2_2_3.setContent(content2_2_3);
        lessonService.save(lesson2_2_3);


        // Lecci√≥n 2.2.4: Ciclos Anidados
        Lesson lesson2_2_4 = createLesson("Ciclos Anidados", "30 min", false, false);
        lesson2_2_4.setTopic(topic2_2);
      

        LessonContent content2_2_4 = createLessonContent(
                "https://example.com/videos/cpp-nested-loops",
                "https://example.com/audio/cpp-nested-loops",
                "Ciclos_Anidados.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Ejemplo 1: Tabla de multiplicar completa\n    cout << \"Tablas de multiplicar del 1 al 5:\" << endl;\n    for (int tabla = 1; tabla <= 5; tabla++) {\n        cout << \"\\nTabla del \" << tabla << \":\" << endl;\n        for (int num = 1; num <= 10; num++) {\n            cout << tabla << \" x \" << num << \" = \" << (tabla * num) << endl;\n        }\n    }\n    \n    // Ejemplo 2: Patr√≥n de asteriscos (tri√°ngulo)\n    cout << \"\\nTri√°ngulo de asteriscos:\" << endl;\n    for (int fila = 1; fila <= 5; fila++) {\n        for (int col = 1; col <= fila; col++) {\n            cout << \"* \";\n        }\n        cout << endl;\n    }\n    \n    // Ejemplo 3: Cuadrado de n√∫meros\n    cout << \"\\nCuadrado de n√∫meros:\" << endl;\n    for (int i = 1; i <= 4; i++) {\n        for (int j = 1; j <= 4; j++) {\n            cout << (i * j) << \"\\t\";\n        }\n        cout << endl;\n    }\n    \n    // Ejemplo 4: Pir√°mide centrada\n    int altura = 5;\n    cout << \"\\nPir√°mide centrada:\" << endl;\n    for (int i = 1; i <= altura; i++) {\n        // Espacios\n        for (int esp = 1; esp <= altura - i; esp++) {\n            cout << \" \";\n        }\n        // Asteriscos\n        for (int ast = 1; ast <= 2 * i - 1; ast++) {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}",
                "mindmap-nested-loops.png",
                "interactive-pattern-generator",
                Arrays.asList(
                        new CodeExplanation(1, "for (externo) { for (interno) { } }", "Ciclo dentro de otro ciclo"),
                        new CodeExplanation(2, "Ciclo externo", "Controla las filas o iteraciones principales"),
                        new CodeExplanation(3, "Ciclo interno", "Se ejecuta completamente en cada iteraci√≥n del externo"),
                        new CodeExplanation(4, "Complejidad", "Cuidado: ciclos anidados aumentan el tiempo de ejecuci√≥n"),
                        new CodeExplanation(5, "Patrones", "√ötiles para crear patrones, matrices y tablas")
                )
        );
        content2_2_4.setLesson(lesson2_2_4);

        lesson2_2_4.setContent(content2_2_4);
        lessonService.save(lesson2_2_4);

        // ========== M√ìDULO 3: FUNCIONES Y MODULARIZACI√ìN ==========
        ModuleModel module3 = createModule(
                "Funciones y Modularizaci√≥n",
                "Aprende a crear funciones reutilizables, manejo de par√°metros, referencias y recursividad",
                "12 horas", 300, 0, false);
        module3.setCourse(cppCourse);
        moduleService.save(module3);

        // Tema 3.1: Introducci√≥n a Funciones
        Topic topic3_1 = createTopic("Introducci√≥n a Funciones", false);
        topic3_1.setModule(module3);
        topicService.save(topic3_1);

        // Lecci√≥n 3.1.1: Definici√≥n y Llamada de Funciones
        Lesson lesson3_1_1 = createLesson("Definici√≥n y Llamada de Funciones", "30 min", false, false);
        lesson3_1_1.setTopic(topic3_1);
    

        LessonContent content3_1_1 = createLessonContent(
                "https://example.com/videos/cpp-functions-intro",
                "https://example.com/audio/cpp-functions-intro",
                "Introduccion_Funciones.pdf",
                "#include <iostream>\nusing namespace std;\n\n// Prototipo de funci√≥n (declaraci√≥n)\nvoid saludar();\nint sumar(int a, int b);\ndouble calcularPromedio(double n1, double n2, double n3);\n\nint main() {\n    // Llamadas a funciones\n    saludar();\n    \n    int resultado = sumar(10, 20);\n    cout << \"Suma: \" << resultado << endl;\n    \n    double promedio = calcularPromedio(8.5, 9.0, 7.5);\n    cout << \"Promedio: \" << promedio << endl;\n    \n    return 0;\n}\n\n// Implementaci√≥n de funciones\nvoid saludar() {\n    cout << \"¬°Hola desde la funci√≥n!\" << endl;\n}\n\nint sumar(int a, int b) {\n    return a + b;\n}\n\ndouble calcularPromedio(double n1, double n2, double n3) {\n    return (n1 + n2 + n3) / 3.0;\n}",
                "mindmap-functions.png",
                "interactive-function-builder",
                Arrays.asList(
                        new CodeExplanation(1, "void saludar()", "Funci√≥n sin valor de retorno"),
                        new CodeExplanation(2, "int sumar(int a, int b)", "Funci√≥n que retorna entero y recibe par√°metros"),
                        new CodeExplanation(3, "Prototipo", "Declaraci√≥n antes de main() para informar al compilador"),
                        new CodeExplanation(4, "return", "Devuelve un valor al punto donde se llam√≥ la funci√≥n"),
                        new CodeExplanation(5, "Modularizaci√≥n", "Divide el c√≥digo en partes reutilizables")
                )
        );
        content3_1_1.setLesson(lesson3_1_1);
     
        lesson3_1_1.setContent(content3_1_1);
        lessonService.save(lesson3_1_1);

        // Lecci√≥n 3.1.2: Par√°metros y Argumentos
        Lesson lesson3_1_2 = createLesson("Par√°metros y Argumentos", "25 min", false, false);
        lesson3_1_2.setTopic(topic3_1);
        

        LessonContent content3_1_2 = createLessonContent(
                "https://example.com/videos/cpp-parameters",
                "https://example.com/audio/cpp-parameters",
                "Parametros_Argumentos.pdf",
                "#include <iostream>\nusing namespace std;\n\n// Funci√≥n con m√∫ltiples par√°metros\nvoid mostrarDatos(string nombre, int edad, double altura) {\n    cout << \"Nombre: \" << nombre << endl;\n    cout << \"Edad: \" << edad << \" a√±os\" << endl;\n    cout << \"Altura: \" << altura << \" m\" << endl;\n}\n\n// Funci√≥n con par√°metros por defecto\nvoid configurar(string modo = \"b√°sico\", int nivel = 1) {\n    cout << \"Modo: \" << modo << \", Nivel: \" << nivel << endl;\n}\n\n// Funci√≥n que calcula el √°rea de un rect√°ngulo\ndouble calcularArea(double base, double altura) {\n    return base * altura;\n}\n\nint main() {\n    // Llamadas con argumentos\n    mostrarDatos(\"Carlos\", 25, 1.75);\n    mostrarDatos(\"Ana\", 30, 1.65);\n    \n    // Usando valores por defecto\n    configurar();                    // b√°sico, 1\n    configurar(\"avanzado\");          // avanzado, 1\n    configurar(\"experto\", 5);        // experto, 5\n    \n    // Calculando √°reas\n    double area1 = calcularArea(5.0, 3.0);\n    double area2 = calcularArea(10.0, 7.5);\n    cout << \"√Årea 1: \" << area1 << endl;\n    cout << \"√Årea 2: \" << area2 << endl;\n    \n    return 0;\n}",
                "mindmap-parameters.png",
                "interactive-parameter-visualizer",
                Arrays.asList(
                        new CodeExplanation(1, "Par√°metros", "Variables en la definici√≥n de la funci√≥n"),
                        new CodeExplanation(2, "Argumentos", "Valores reales pasados al llamar la funci√≥n"),
                        new CodeExplanation(3, "Valores por defecto", "Par√°metros opcionales con valores predeterminados"),
                        new CodeExplanation(4, "Paso por valor", "Se copia el valor del argumento al par√°metro")
                )
        );
        content3_1_2.setLesson(lesson3_1_2);
       
        lesson3_1_2.setContent(content3_1_2);
        lessonService.save(lesson3_1_2);


        // Lecci√≥n 3.1.3: Retorno de Valores
        Lesson lesson3_1_3 = createLesson("Retorno de Valores", "22 min", false, false);
        lesson3_1_3.setTopic(topic3_1);
       

        LessonContent content3_1_3 = createLessonContent(
                "https://example.com/videos/cpp-return-values",
                "https://example.com/audio/cpp-return-values",
                "Retorno_Valores.pdf",
                "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Funci√≥n que retorna entero\nint factorial(int n) {\n    int resultado = 1;\n    for (int i = 1; i <= n; i++) {\n        resultado *= i;\n    }\n    return resultado;\n}\n\n// Funci√≥n que retorna booleano\nbool esPar(int numero) {\n    return (numero % 2 == 0);\n}\n\n// Funci√≥n con retorno anticipado\nint dividir(int a, int b) {\n    if (b == 0) {\n        cout << \"Error: divisi√≥n por cero\" << endl;\n        return -1;  // Retorno anticipado\n    }\n    return a / b;\n}\n\n// Funci√≥n que retorna el mayor de tres n√∫meros\nint mayor(int a, int b, int c) {\n    if (a >= b && a >= c) return a;\n    if (b >= a && b >= c) return b;\n    return c;\n}\n\nint main() {\n    // Usando funciones que retornan valores\n    int fact = factorial(5);\n    cout << \"5! = \" << fact << endl;\n    \n    if (esPar(10)) {\n        cout << \"10 es par\" << endl;\n    }\n    \n    int resultado = dividir(20, 4);\n    cout << \"20 / 4 = \" << resultado << endl;\n    \n    int max = mayor(15, 8, 23);\n    cout << \"El mayor es: \" << max << endl;\n    \n    return 0;\n}",
                "mindmap-return-values.png",
                "interactive-return-flow",
                Arrays.asList(
                        new CodeExplanation(1, "return valor", "Devuelve el valor al punto de llamada"),
                        new CodeExplanation(2, "Tipo de retorno", "Debe coincidir con la declaraci√≥n de la funci√≥n"),
                        new CodeExplanation(3, "Retorno anticipado", "return dentro de un if para salir antes"),
                        new CodeExplanation(4, "void", "Funciones sin retorno de valor")
                )
        );
        content3_1_3.setLesson(lesson3_1_3);
    
        lesson3_1_3.setContent(content3_1_3);
        lessonService.save(lesson3_1_3);

        // Tema 3.2: Conceptos Avanzados de Funciones
        Topic topic3_2 = createTopic("Conceptos Avanzados de Funciones", false);
        topic3_2.setModule(module3);
        topicService.save(topic3_2);

        // Lecci√≥n 3.2.1: Paso por Referencia
        Lesson lesson3_2_1 = createLesson("Paso por Referencia", "28 min", false, false);
        lesson3_2_1.setTopic(topic3_2);
        

        LessonContent content3_2_1 = createLessonContent(
                "https://example.com/videos/cpp-pass-by-reference",
                "https://example.com/audio/cpp-pass-by-reference",
                "Paso_Por_Referencia.pdf",
                "#include <iostream>\nusing namespace std;\n\n// Paso por valor (no modifica el original)\nvoid incrementarPorValor(int x) {\n    x = x + 10;\n    cout << \"Dentro funci√≥n (valor): \" << x << endl;\n}\n\n// Paso por referencia (modifica el original)\nvoid incrementarPorReferencia(int &x) {\n    x = x + 10;\n    cout << \"Dentro funci√≥n (referencia): \" << x << endl;\n}\n\n// Funci√≥n swap usando referencias\nvoid intercambiar(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\n// Funci√≥n que modifica m√∫ltiples valores\nvoid calcularOperaciones(int a, int b, int &suma, int &producto) {\n    suma = a + b;\n    producto = a * b;\n}\n\nint main() {\n    // Demostrando paso por valor\n    int num1 = 5;\n    cout << \"Antes (valor): \" << num1 << endl;\n    incrementarPorValor(num1);\n    cout << \"Despu√©s (valor): \" << num1 << endl;  // Sigue siendo 5\n    \n    cout << endl;\n    \n    // Demostrando paso por referencia\n    int num2 = 5;\n    cout << \"Antes (referencia): \" << num2 << endl;\n    incrementarPorReferencia(num2);\n    cout << \"Despu√©s (referencia): \" << num2 << endl;  // Ahora es 15\n    \n    cout << endl;\n    \n    // Usando swap\n    int x = 10, y = 20;\n    cout << \"Antes del swap: x=\" << x << \", y=\" << y << endl;\n    intercambiar(x, y);\n    cout << \"Despu√©s del swap: x=\" << x << \", y=\" << y << endl;\n    \n    // Retornando m√∫ltiples valores\n    int s, p;\n    calcularOperaciones(5, 3, s, p);\n    cout << \"Suma: \" << s << \", Producto: \" << p << endl;\n    \n    return 0;\n}",
                "mindmap-pass-by-reference.png",
                "interactive-memory-reference",
                Arrays.asList(
                        new CodeExplanation(1, "int x", "Paso por valor - se copia el valor"),
                        new CodeExplanation(2, "int &x", "Paso por referencia - se pasa la direcci√≥n"),
                        new CodeExplanation(3, "Modificaci√≥n", "Las referencias permiten modificar el valor original"),
                        new CodeExplanation(4, "Eficiencia", "Referencias evitan copiar datos grandes"),
                        new CodeExplanation(5, "M√∫ltiples retornos", "√ötil para retornar varios valores")
                )
        );
        content3_2_1.setLesson(lesson3_2_1);
     
        lesson3_2_1.setContent(content3_2_1);
        lessonService.save(lesson3_2_1);

        // Lecci√≥n 3.2.2: Sobrecarga de Funciones
        Lesson lesson3_2_2 = createLesson("Sobrecarga de Funciones", "24 min", false, false);
        lesson3_2_2.setTopic(topic3_2);
        

        LessonContent content3_2_2 = createLessonContent(
                "https://example.com/videos/cpp-function-overloading",
                "https://example.com/audio/cpp-function-overloading",
                "Sobrecarga_Funciones.pdf",
                "#include <iostream>\nusing namespace std;\n\n// Sobrecarga: mismo nombre, diferentes par√°metros\n\n// Sumar dos enteros\nint sumar(int a, int b) {\n    cout << \"Sumando enteros\" << endl;\n    return a + b;\n}\n\n// Sumar tres enteros\nint sumar(int a, int b, int c) {\n    cout << \"Sumando tres enteros\" << endl;\n    return a + b + c;\n}\n\n// Sumar dos doubles\ndouble sumar(double a, double b) {\n    cout << \"Sumando doubles\" << endl;\n    return a + b;\n}\n\n// Calcular √°rea - diferentes figuras\ndouble calcularArea(double radio) {\n    // √Årea del c√≠rculo\n    return 3.14159 * radio * radio;\n}\n\ndouble calcularArea(double base, double altura) {\n    // √Årea del rect√°ngulo\n    return base * altura;\n}\n\ndouble calcularArea(double base, double altura, bool esTriangulo) {\n    // √Årea del tri√°ngulo\n    if (esTriangulo) {\n        return (base * altura) / 2.0;\n    }\n    return base * altura;\n}\n\nint main() {\n    // El compilador elige la funci√≥n correcta seg√∫n los argumentos\n    cout << sumar(5, 3) << endl;           // Llama a sumar(int, int)\n    cout << sumar(5, 3, 2) << endl;        // Llama a sumar(int, int, int)\n    cout << sumar(5.5, 3.2) << endl;       // Llama a sumar(double, double)\n    \n    cout << \"\\n√Åreas:\" << endl;\n    cout << \"C√≠rculo (r=5): \" << calcularArea(5.0) << endl;\n    cout << \"Rect√°ngulo (5x3): \" << calcularArea(5.0, 3.0) << endl;\n    cout << \"Tri√°ngulo (5x3): \" << calcularArea(5.0, 3.0, true) << endl;\n    \n    return 0;\n}",
                "mindmap-function-overloading.png",
                "interactive-overload-selector",
                Arrays.asList(
                        new CodeExplanation(1, "Sobrecarga", "M√∫ltiples funciones con el mismo nombre"),
                        new CodeExplanation(2, "Firma diferente", "Deben diferir en n√∫mero o tipo de par√°metros"),
                        new CodeExplanation(3, "Resoluci√≥n", "El compilador elige la funci√≥n correcta"),
                        new CodeExplanation(4, "No por retorno", "El tipo de retorno solo no es suficiente para sobrecargar")
                )
        );
        content3_2_2.setLesson(lesson3_2_2);
       
        lesson3_2_2.setContent(content3_2_2);
        lessonService.save(lesson3_2_2);

        // Lecci√≥n 3.2.3: Recursividad
        Lesson lesson3_2_3 = createLesson("Recursividad", "32 min", false, false);
        lesson3_2_3.setTopic(topic3_2);
       

        LessonContent content3_2_3 = createLessonContent(
                "https://example.com/videos/cpp-recursion",
                "https://example.com/audio/cpp-recursion",
                "Recursividad.pdf",
                "#include <iostream>\nusing namespace std;\n\n// Factorial recursivo\nint factorial(int n) {\n    // Caso base\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    // Caso recursivo\n    return n * factorial(n - 1);\n}\n\n// Fibonacci recursivo\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\n// Suma de d√≠gitos recursiva\nint sumaDigitos(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    return (n % 10) + sumaDigitos(n / 10);\n}\n\n// Potencia recursiva\nint potencia(int base, int exponente) {\n    if (exponente == 0) {\n        return 1;\n    }\n    return base * potencia(base, exponente - 1);\n}\n\n// Contar hacia atr√°s recursivamente\nvoid cuentaRegresiva(int n) {\n    if (n < 0) {\n        return;\n    }\n    cout << n << \" \";\n    cuentaRegresiva(n - 1);\n}\n\nint main() {\n    // Factorial\n    cout << \"5! = \" << factorial(5) << endl;\n    \n    // Fibonacci\n    cout << \"Fibonacci(7) = \" << fibonacci(7) << endl;\n    \n    // Suma de d√≠gitos\n    cout << \"Suma d√≠gitos de 12345: \" << sumaDigitos(12345) << endl;\n    \n    // Potencia\n    cout << \"2^5 = \" << potencia(2, 5) << endl;\n    \n    // Cuenta regresiva\n    cout << \"Cuenta regresiva desde 10: \";\n    cuentaRegresiva(10);\n    cout << endl;\n    \n    return 0;\n}",
                "mindmap-recursion.png",
                "interactive-recursion-tree",
                Arrays.asList(
                        new CodeExplanation(1, "Recursividad", "Funci√≥n que se llama a s√≠ misma"),
                        new CodeExplanation(2, "Caso base", "Condici√≥n de parada (ESENCIAL)"),
                        new CodeExplanation(3, "Caso recursivo", "Llamada a la misma funci√≥n con par√°metros diferentes"),
                        new CodeExplanation(4, "Stack", "Cada llamada se apila en memoria"),
                        new CodeExplanation(5, "Cuidado", "Sin caso base causa desbordamiento de pila")
                )
        );
        content3_2_3.setLesson(lesson3_2_3);
      
        lesson3_2_3.setContent(content3_2_3);
         lessonService.save(lesson3_2_3);

        // ========== M√ìDULO 4: ARREGLOS Y VECTORES ==========
        ModuleModel module4 = createModule(
                "Arreglos y Vectores",
                "Manejo de colecciones de datos con arreglos est√°ticos, matrices y vectores din√°micos",
                "14 horas", 350, 0, false);
        module4.setCourse(cppCourse);
        moduleService.save(module4);

        // Tema 4.1: Arreglos Unidimensionales
        Topic topic4_1 = createTopic("Arreglos Unidimensionales", false);
        topic4_1.setModule(module4);
        topicService.save(topic4_1);

        // Lecci√≥n 4.1.1: Declaraci√≥n e Inicializaci√≥n de Arreglos
        Lesson lesson4_1_1 = createLesson("Declaraci√≥n e Inicializaci√≥n de Arreglos", "26 min", false, false);
        lesson4_1_1.setTopic(topic4_1);
   

        LessonContent content4_1_1 = createLessonContent(
                "https://example.com/videos/cpp-arrays-intro",
                "https://example.com/audio/cpp-arrays-intro",
                "Arrays_Introduccion.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Declaraci√≥n e inicializaci√≥n\n    int numeros[5] = {10, 20, 30, 40, 50};\n    \n    // Declaraci√≥n sin inicializar\n    int edades[3];\n    edades[0] = 18;\n    edades[1] = 25;\n    edades[2] = 30;\n    \n    // Inicializaci√≥n parcial (resto se llena con 0)\n    int valores[5] = {1, 2};  // {1, 2, 0, 0, 0}\n    \n    // El compilador calcula el tama√±o\n    double precios[] = {19.99, 29.99, 39.99, 49.99};\n    \n    // Acceso a elementos (√≠ndices empiezan en 0)\n    cout << \"Primer n√∫mero: \" << numeros[0] << endl;\n    cout << \"√öltimo n√∫mero: \" << numeros[4] << endl;\n    \n    // Modificar elementos\n    numeros[2] = 100;\n    cout << \"N√∫mero modificado: \" << numeros[2] << endl;\n    \n    // Mostrar todos los elementos\n    cout << \"\\nTodos los n√∫meros:\" << endl;\n    for (int i = 0; i < 5; i++) {\n        cout << \"numeros[\" << i << \"] = \" << numeros[i] << endl;\n    }\n    \n    // Tama√±o del arreglo\n    int tamanio = sizeof(numeros) / sizeof(numeros[0]);\n    cout << \"\\nTama√±o del arreglo: \" << tamanio << endl;\n    \n    return 0;\n}",
                "mindmap-arrays.png",
                "interactive-array-memory",
                Arrays.asList(
                        new CodeExplanation(1, "int numeros[5]", "Declara arreglo de 5 enteros"),
                        new CodeExplanation(2, "{10, 20, 30}", "Inicializaci√≥n con lista de valores"),
                        new CodeExplanation(3, "numeros[0]", "Acceso por √≠ndice (comienza en 0)"),
                        new CodeExplanation(4, "Tama√±o fijo", "El tama√±o debe conocerse en compilaci√≥n"),
                        new CodeExplanation(5, "sizeof()", "Calcula bytes del arreglo")
                )
        );
        content4_1_1.setLesson(lesson4_1_1);
        
        lesson4_1_1.setContent(content4_1_1);
        lessonService.save(lesson4_1_1);

        // Lecci√≥n 4.1.2: Recorrido y Manipulaci√≥n de Arreglos
        Lesson lesson4_1_2 = createLesson("Recorrido y Manipulaci√≥n de Arreglos", "30 min", false, false);
        lesson4_1_2.setTopic(topic4_1);
        

        LessonContent content4_1_2 = createLessonContent(
                "https://example.com/videos/cpp-array-manipulation",
                "https://example.com/audio/cpp-array-manipulation",
                "Manipulacion_Arrays.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    const int TAM = 5;\n    int calificaciones[TAM] = {85, 92, 78, 95, 88};\n    \n    // Recorrido y mostrar\n    cout << \"Calificaciones:\" << endl;\n    for (int i = 0; i < TAM; i++) {\n        cout << \"Estudiante \" << (i+1) << \":\" << calificaciones[i] << endl;\n    }\n    \n    // Calcular suma y promedio\n    int suma = 0;\n    for (int i = 0; i < TAM; i++) {\n        suma += calificaciones[i];\n    }\n    double promedio = static_cast<double>(suma) / TAM;\n    cout << \"\\nPromedio: \" << promedio << endl;\n    \n    // Encontrar m√°ximo y m√≠nimo\n    int maximo = calificaciones[0];\n    int minimo = calificaciones[0];\n    \n    for (int i = 1; i < TAM; i++) {\n        if (calificaciones[i] > maximo) {\n            maximo = calificaciones[i];\n        }\n        if (calificaciones[i] < minimo) {\n            minimo = calificaciones[i];\n        }\n    }\n    \n    cout << \"Calificaci√≥n m√°xima: \" << maximo << endl;\n    cout << \"Calificaci√≥n m√≠nima: \" << minimo << endl;\n    \n    // Invertir arreglo\n    cout << \"\\nArreglo invertido:\" << endl;\n    for (int i = TAM - 1; i >= 0; i--) {\n        cout << calificaciones[i] << \" \";\n    }\n    cout << endl;\n    \n    // Copiar arreglo\n    int copia[TAM];\n    for (int i = 0; i < TAM; i++) {\n        copia[i] = calificaciones[i];\n    }\n    \n    return 0;\n}",
                "mindmap-array-operations.png",
                "interactive-array-operations",
                Arrays.asList(
                        new CodeExplanation(1, "for (int i = 0; i < TAM; i++)", "Recorrido est√°ndar de arreglo"),
                        new CodeExplanation(2, "suma += arr[i]", "Acumulaci√≥n de valores"),
                        new CodeExplanation(3, "M√°ximo/M√≠nimo", "Comparar cada elemento y actualizar"),
                        new CodeExplanation(4, "Invertir", "Recorrer de fin a inicio"),
                        new CodeExplanation(5, "Copiar", "Asignar elemento por elemento")
                )
        );
        content4_1_2.setLesson(lesson4_1_2);
        
        lesson4_1_2.setContent(content4_1_2);
        lessonService.save(lesson4_1_2);

        // Lecci√≥n 4.1.3: B√∫squeda y Ordenamiento B√°sico
        Lesson lesson4_1_3 = createLesson("B√∫squeda y Ordenamiento B√°sico", "35 min", false, false);
        lesson4_1_3.setTopic(topic4_1);
        

        LessonContent content4_1_3 = createLessonContent(
                "https://example.com/videos/cpp-search-sort",
                "https://example.com/audio/cpp-search-sort",
                "Busqueda_Ordenamiento.pdf",
                "#include <iostream>\nusing namespace std;\n\n// B√∫squeda lineal\nint busquedaLineal(int arr[], int tam, int valor) {\n    for (int i = 0; i < tam; i++) {\n        if (arr[i] == valor) {\n            return i;  // Retorna el √≠ndice\n        }\n    }\n    return -1;  // No encontrado\n}\n\n// Ordenamiento burbuja\nvoid ordenamientoBurbuja(int arr[], int tam) {\n    for (int i = 0; i < tam - 1; i++) {\n        for (int j = 0; j < tam - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Intercambiar\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\n// Ordenamiento por selecci√≥n\nvoid ordenamientoSeleccion(int arr[], int tam) {\n    for (int i = 0; i < tam - 1; i++) {\n        int minIdx = i;\n        for (int j = i + 1; j < tam; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n            }\n        }\n        // Intercambiar\n        int temp = arr[i];\n        arr[i] = arr[minIdx];\n        arr[minIdx] = temp;\n    }\n}\n\nvoid mostrarArreglo(int arr[], int tam) {\n    for (int i = 0; i < tam; i++) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n}\n\nint main() {\n    int numeros[] = {64, 34, 25, 12, 22, 11, 90};\n    int tam = sizeof(numeros) / sizeof(numeros[0]);\n    \n    cout << \"Arreglo original: \";\n    mostrarArreglo(numeros, tam);\n    \n    // B√∫squeda lineal\n    int buscado = 25;\n    int posicion = busquedaLineal(numeros, tam, buscado);\n    if (posicion != -1) {\n        cout << \"\\nElemento \" << buscado << \" encontrado en posici√≥n \" << posicion << endl;\n    } else {\n        cout << \"\\nElemento no encontrado\" << endl;\n    }\n    \n    // Ordenamiento burbuja\n    int arr1[] = {64, 34, 25, 12, 22, 11, 90};\n    cout << \"\\nOrdenamiento Burbuja:\" << endl;\n    cout << \"Antes: \";\n    mostrarArreglo(arr1, tam);\n    ordenamientoBurbuja(arr1, tam);\n    cout << \"Despu√©s: \";\n    mostrarArreglo(arr1, tam);\n    \n    // Ordenamiento por selecci√≥n\n    int arr2[] = {64, 34, 25, 12, 22, 11, 90};\n    cout << \"\\nOrdenamiento Selecci√≥n:\" << endl;\n    cout << \"Antes: \";\n    mostrarArreglo(arr2, tam);\n    ordenamientoSeleccion(arr2, tam);\n    cout << \"Despu√©s: \";\n    mostrarArreglo(arr2, tam);\n    \n    return 0;\n}",
                "mindmap-search-sort.png",
                "interactive-algorithm-visualizer",
                Arrays.asList(
                        new CodeExplanation(1, "B√∫squeda lineal", "Recorre elemento por elemento hasta encontrar"),
                        new CodeExplanation(2, "Complejidad O(n)", "Puede revisar todos los elementos"),
                        new CodeExplanation(3, "Burbuja", "Compara pares adyacentes e intercambia"),
                        new CodeExplanation(4, "Selecci√≥n", "Encuentra el m√≠nimo y lo coloca en posici√≥n"),
                        new CodeExplanation(5, "Intercambio", "Usa variable temporal para swap")
                )
        );
        content4_1_3.setLesson(lesson4_1_3);
       
        lesson4_1_3.setContent(content4_1_3);
        lessonService.save(lesson4_1_3);

        // Tema 4.2: Arreglos Multidimensionales
        Topic topic4_2 = createTopic("Arreglos Multidimensionales", false);
        topic4_2.setModule(module4);
        topicService.save(topic4_2);

        // Lecci√≥n 4.2.1: Matrices (Arreglos 2D)
        Lesson lesson4_2_1 = createLesson("Matrices (Arreglos 2D)", "32 min", false, false);
        lesson4_2_1.setTopic(topic4_2);
       

        LessonContent content4_2_1 = createLessonContent(
                "https://example.com/videos/cpp-matrices",
                "https://example.com/audio/cpp-matrices",
                "Matrices_2D.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Declaraci√≥n e inicializaci√≥n de matriz 3x3\n    int matriz[3][3] = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    \n    // Acceso a elementos\n    cout << \"Elemento [0][0]: \" << matriz[0][0] << endl;\n    cout << \"Elemento [1][2]: \" << matriz[1][2] << endl;\n    \n    // Mostrar matriz completa\n    cout << \"\\nMatriz completa:\" << endl;\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            cout << matriz[i][j] << \"\\t\";\n        }\n        cout << endl;\n    }\n    \n    // Matriz de calificaciones\n    double calificaciones[3][4] = {\n        {8.5, 9.0, 7.5, 8.0},  // Estudiante 1\n        {7.0, 8.5, 9.0, 7.5},  // Estudiante 2\n        {9.5, 9.0, 9.5, 10.0}  // Estudiante 3\n    };\n    \n    // Calcular promedio por estudiante\n    cout << \"\\nPromedios por estudiante:\" << endl;\n    for (int i = 0; i < 3; i++) {\n        double suma = 0;\n        for (int j = 0; j < 4; j++) {\n            suma += calificaciones[i][j];\n        }\n        double promedio = suma / 4.0;\n        cout << \"Estudiante \" << (i+1) << \": \" << promedio << endl;\n    }\n    \n    // Suma de matrices\n    int A[2][2] = {{1, 2}, {3, 4}};\n    int B[2][2] = {{5, 6}, {7, 8}};\n    int C[2][2];\n    \n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            C[i][j] = A[i][j] + B[i][j];\n        }\n    }\n    \n    cout << \"\\nSuma de matrices:\" << endl;\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            cout << C[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}",
                "mindmap-matrices.png",
                "interactive-matrix-operations",
                Arrays.asList(
                        new CodeExplanation(1, "int matriz[3][3]", "Matriz de 3 filas y 3 columnas"),
                        new CodeExplanation(2, "matriz[i][j]", "Acceso: [fila][columna]"),
                        new CodeExplanation(3, "Ciclos anidados", "Ciclo externo para filas, interno para columnas"),
                        new CodeExplanation(4, "Inicializaci√≥n", "Lista de listas entre llaves"),
                        new CodeExplanation(5, "Operaciones", "Suma, resta elemento por elemento")
                )
        );
        content4_2_1.setLesson(lesson4_2_1);
        
        lesson4_2_1.setContent(content4_2_1);
        lessonService.save(lesson4_2_1);

        // Lecci√≥n 4.2.2: Recorrido de Matrices
        Lesson lesson4_2_2 = createLesson("Recorrido de Matrices", "28 min", false, false);
        lesson4_2_2.setTopic(topic4_2);
       

        LessonContent content4_2_2 = createLessonContent(
                "https://example.com/videos/cpp-matrix-traversal",
                "https://example.com/audio/cpp-matrix-traversal",
                "Recorrido_Matrices.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    const int FILAS = 4;\n    const int COLS = 4;\n    int matriz[FILAS][COLS] = {\n        {1,  2,  3,  4},\n        {5,  6,  7,  8},\n        {9,  10, 11, 12},\n        {13, 14, 15, 16}\n    };\n    \n    // Recorrido por filas\n    cout << \"Recorrido por filas:\" << endl;\n    for (int i = 0; i < FILAS; i++) {\n        for (int j = 0; j < COLS; j++) {\n            cout << matriz[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    \n    // Recorrido por columnas\n    cout << \"\\nRecorrido por columnas:\" << endl;\n    for (int j = 0; j < COLS; j++) {\n        for (int i = 0; i < FILAS; i++) {\n            cout << matriz[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    \n    // Diagonal principal\n    cout << \"\\nDiagonal principal: \";\n    for (int i = 0; i < FILAS; i++) {\n        cout << matriz[i][i] << \" \";\n    }\n    cout << endl;\n    \n    // Diagonal secundaria\n    cout << \"Diagonal secundaria: \";\n    for (int i = 0; i < FILAS; i++) {\n        cout << matriz[i][COLS - 1 - i] << \" \";\n    }\n    cout << endl;\n    \n    // Suma de cada fila\n    cout << \"\\nSuma por filas:\" << endl;\n    for (int i = 0; i < FILAS; i++) {\n        int sumaFila = 0;\n        for (int j = 0; j < COLS; j++) {\n            sumaFila += matriz[i][j];\n        }\n        cout << \"Fila \" << i << \": \" << sumaFila << endl;\n    }\n    \n    // Suma de cada columna\n    cout << \"\\nSuma por columnas:\" << endl;\n    for (int j = 0; j < COLS; j++) {\n        int sumaCol = 0;\n        for (int i = 0; i < FILAS; i++) {\n            sumaCol += matriz[i][j];\n        }\n        cout << \"Columna \" << j << \": \" << sumaCol << endl;\n    }\n    \n    // Transpuesta\n    int transpuesta[COLS][FILAS];\n    for (int i = 0; i < FILAS; i++) {\n        for (int j = 0; j < COLS; j++) {\n            transpuesta[j][i] = matriz[i][j];\n        }\n    }\n    \n    cout << \"\\nMatriz transpuesta:\" << endl;\n    for (int i = 0; i < COLS; i++) {\n        for (int j = 0; j < FILAS; j++) {\n            cout << transpuesta[i][j] << \"\\t\";\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}",
                "mindmap-matrix-traversal.png",
                "interactive-traversal-visualizer",
                Arrays.asList(
                        new CodeExplanation(1, "Por filas", "Ciclo externo: filas, interno: columnas"),
                        new CodeExplanation(2, "Por columnas", "Ciclo externo: columnas, interno: filas"),
                        new CodeExplanation(3, "Diagonal principal", "Elementos donde i == j"),
                        new CodeExplanation(4, "Diagonal secundaria", "Elementos donde i + j == n-1"),
                        new CodeExplanation(5, "Transpuesta", "Intercambiar filas por columnas")
                )
        );
        content4_2_2.setLesson(lesson4_2_2);
        
        lesson4_2_2.setContent(content4_2_2);
         lessonService.save(lesson4_2_2);

        // Tema 4.3: Introducci√≥n a Vectores STL
        Topic topic4_3 = createTopic("Introducci√≥n a Vectores STL", false);
        topic4_3.setModule(module4);
        topicService.save(topic4_3);

        // Lecci√≥n 4.3.1: Vectores Din√°micos
        Lesson lesson4_3_1 = createLesson("Vectores Din√°micos", "30 min", false, false);
        lesson4_3_1.setTopic(topic4_3);
      

        LessonContent content4_3_1 = createLessonContent(
                "https://example.com/videos/cpp-vectors",
                "https://example.com/audio/cpp-vectors",
                "Vectores_STL.pdf",
                "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    // Declaraci√≥n de vector vac√≠o\n    vector<int> numeros;\n    \n    // Agregar elementos\n    numeros.push_back(10);\n    numeros.push_back(20);\n    numeros.push_back(30);\n    numeros.push_back(40);\n    \n    cout << \"Tama√±o: \" << numeros.size() << endl;\n    \n    // Vector con inicializaci√≥n\n    vector<int> valores = {5, 10, 15, 20, 25};\n    \n    // Vector con tama√±o inicial\n    vector<double> precios(5);  // 5 elementos con valor 0\n    vector<int> edades(3, 18);  // 3 elementos con valor 18\n    \n    // Acceso a elementos\n    cout << \"Primer elemento: \" << numeros[0] << endl;\n    cout << \"Con at(): \" << numeros.at(1) << endl;  // M√°s seguro\n    \n    // Recorrer con √≠ndices\n    cout << \"\\nRecorrido con √≠ndices:\" << endl;\n    for (int i = 0; i < valores.size(); i++) {\n        cout << valores[i] << \" \";\n    }\n    cout << endl;\n    \n    // Recorrer con range-based for (C++11)\n    cout << \"\\nRecorrido con range-based for:\" << endl;\n    for (int num : valores) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    \n    // Modificar elementos\n    valores[2] = 100;\n    cout << \"\\nDespu√©s de modificar: \";\n    for (int num : valores) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    \n    // Eliminar √∫ltimo elemento\n    valores.pop_back();\n    cout << \"\\nDespu√©s de pop_back: \";\n    for (int num : valores) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    \n    // Verificar si est√° vac√≠o\n    if (!valores.empty()) {\n        cout << \"El vector NO est√° vac√≠o\" << endl;\n    }\n    \n    // Limpiar todos los elementos\n    valores.clear();\n    cout << \"Tama√±o despu√©s de clear: \" << valores.size() << endl;\n    \n    // Vector de strings\n    vector<string> nombres;\n    nombres.push_back(\"Ana\");\n    nombres.push_back(\"Carlos\");\n    nombres.push_back(\"Mar√≠a\");\n    \n    cout << \"\\nNombres:\" << endl;\n    for (const string& nombre : nombres) {\n        cout << \"- \" << nombre << endl;\n    }\n    \n    return 0;\n}",
                "mindmap-vectors.png",
                "interactive-vector-operations",
                Arrays.asList(
                        new CodeExplanation(1, "#include <vector>", "Incluir biblioteca de vectores"),
                        new CodeExplanation(2, "vector<int> v", "Declara vector de enteros"),
                        new CodeExplanation(3, "push_back()", "Agrega elemento al final"),
                        new CodeExplanation(4, "size()", "Retorna n√∫mero de elementos"),
                        new CodeExplanation(5, "Din√°mico", "Crece autom√°ticamente seg√∫n necesidad"),
                        new CodeExplanation(6, "at() vs []", "at() verifica l√≠mites, [] es m√°s r√°pido"),
                        new CodeExplanation(7, "pop_back()", "Elimina √∫ltimo elemento")
                )
        );
        content4_3_1.setLesson(lesson4_3_1);
        
        lesson4_3_1.setContent(content4_3_1);
        lessonService.save(lesson4_3_1);

        // ========== M√ìDULO 5: CADENAS DE TEXTO ==========
        ModuleModel module5 = createModule(
                "Cadenas de Texto",
                "Manejo de strings, operaciones de texto y procesamiento de cadenas",
                "10 horas", 250, 0, false);
        module5.setCourse(cppCourse);
        moduleService.save(module5);

        // Tema 5.1: Manejo de Strings
        Topic topic5_1 = createTopic("Manejo de Strings", false);
        topic5_1.setModule(module5);
        topicService.save(topic5_1);

        // Lecci√≥n 5.1.1: Arreglos de Caracteres vs String
        Lesson lesson5_1_1 = createLesson("Arreglos de Caracteres vs String", "25 min", false, false);
        lesson5_1_1.setTopic(topic5_1);
        

        LessonContent content5_1_1 = createLessonContent(
                "https://example.com/videos/cpp-strings-intro",
                "https://example.com/audio/cpp-strings-intro",
                "Strings_Introduccion.pdf",
                "#include <iostream>\n#include <string>\n#include <cstring>\nusing namespace std;\n\nint main() {\n    // Arreglo de caracteres estilo C\n    char nombre1[20] = \"Carlos\";\n    char apellido[20];\n    strcpy(apellido, \"Garc√≠a\");\n    \n    cout << \"Nombre (char[]): \" << nombre1 << endl;\n    cout << \"Apellido (char[]): \" << apellido << endl;\n    \n    // Longitud con strlen\n    cout << \"Longitud de nombre: \" << strlen(nombre1) << endl;\n    \n    // String de C++ (m√°s f√°cil y seguro)\n    string nombre2 = \"Mar√≠a\";\n    string ciudad = \"Bogot√°\";\n    \n    cout << \"\\nNombre (string): \" << nombre2 << endl;\n    cout << \"Ciudad: \" << ciudad << endl;\n    \n    // Longitud con length() o size()\n    cout << \"Longitud de nombre: \" << nombre2.length() << endl;\n    cout << \"Tama√±o de ciudad: \" << ciudad.size() << endl;\n    \n    // Concatenaci√≥n\n    // Con char[]: complicado y peligroso\n    char completo1[50];\n    strcpy(completo1, nombre1);\n    strcat(completo1, \" \");\n    strcat(completo1, apellido);\n    cout << \"\\nNombre completo (char[]): \" << completo1 << endl;\n    \n    // Con string: simple y seguro\n    string completo2 = nombre2 + \" \" + \"L√≥pez\";\n    cout << \"Nombre completo (string): \" << completo2 << endl;\n    \n    // Comparaci√≥n\n    // Con char[]\n    if (strcmp(nombre1, \"Carlos\") == 0) {\n        cout << \"\\nLos nombres son iguales (char[])\" << endl;\n    }\n    \n    // Con string\n    if (nombre2 == \"Mar√≠a\") {\n        cout << \"Los nombres son iguales (string)\" << endl;\n    }\n    \n    // Input\n    string respuesta;\n    cout << \"\\n¬øCu√°l es tu nombre? \";\n    getline(cin, respuesta);  // Lee l√≠nea completa con espacios\n    cout << \"Hola, \" << respuesta << \"!\" << endl;\n    \n    return 0;\n}",
                "mindmap-strings.png",
                "interactive-string-comparison",
                Arrays.asList(
                        new CodeExplanation(1, "char[]", "Arreglo de caracteres terminado en '\\0'"),
                        new CodeExplanation(2, "string", "Clase de C++ m√°s f√°cil y segura"),
                        new CodeExplanation(3, "strcpy, strcat", "Funciones de C para char[]"),
                        new CodeExplanation(4, "+", "Operador de concatenaci√≥n para string"),
                        new CodeExplanation(5, "getline()", "Lee l√≠nea completa incluyendo espacios")
                )
        );
        content5_1_1.setLesson(lesson5_1_1);
       
        lesson5_1_1.setContent(content5_1_1);
        lessonService.save(lesson5_1_1);

        // Lecci√≥n 5.1.2: Operaciones con Strings
        Lesson lesson5_1_2 = createLesson("Operaciones con Strings", "30 min", false, false);
        lesson5_1_2.setTopic(topic5_1);
        

        LessonContent content5_1_2 = createLessonContent(
                "https://example.com/videos/cpp-string-operations",
                "https://example.com/audio/cpp-string-operations",
                "Operaciones_Strings.pdf",
                "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    string texto = \"Hola Mundo desde C++\";\n    \n    // Longitud\n    cout << \"Longitud: \" << texto.length() << endl;\n    \n    // Acceso a caracteres\n    cout << \"Primer car√°cter: \" << texto[0] << endl;\n    cout << \"√öltimo car√°cter: \" << texto[texto.length()-1] << endl;\n    \n    // Subcadena\n    string sub = texto.substr(5, 5);  // Desde pos 5, 5 caracteres\n    cout << \"Subcadena: \" << sub << endl;\n    \n    // Buscar\n    size_t posicion = texto.find(\"Mundo\");\n    if (posicion != string::npos) {\n        cout << \"'Mundo' encontrado en posici√≥n: \" << posicion << endl;\n    }\n    \n    // Reemplazar\n    string reemplazo = texto;\n    size_t pos = reemplazo.find(\"Mundo\");\n    if (pos != string::npos) {\n        reemplazo.replace(pos, 5, \"Universo\");\n    }\n    cout << \"Reemplazado: \" << reemplazo << endl;\n    \n    // Insertar\n    string insercion = \"Hola Mundo\";\n    insercion.insert(5, \"Bello \");\n    cout << \"Insertado: \" << insercion << endl;\n    \n    // Eliminar\n    string borrado = \"Hola Mundo Cruel\";\n    borrado.erase(11, 6);  // Borra \" Cruel\"\n    cout << \"Borrado: \" << borrado << endl;\n    \n    // Concatenar\n    string parte1 = \"Programaci√≥n \";\n    string parte2 = \"en C++\";\n    string completo = parte1 + parte2;\n    cout << \"Concatenado: \" << completo << endl;\n    \n    // Append\n    string mensaje = \"Hola\";\n    mensaje.append(\" \").append(\"Mundo\");\n    cout << \"Append: \" << mensaje << endl;\n    \n    // Comparar\n    string str1 = \"abc\";\n    string str2 = \"def\";\n    if (str1 < str2) {\n        cout << str1 << \" es menor que \" << str2 << endl;\n    }\n    \n    // Vac√≠o\n    string vacio = \"\";\n    if (vacio.empty()) {\n        cout << \"El string est√° vac√≠o\" << endl;\n    }\n    \n    // Limpiar\n    texto.clear();\n    cout << \"Longitud despu√©s de clear: \" << texto.length() << endl;\n    \n    return 0;\n}",
                "mindmap-string-methods.png",
                "interactive-string-methods",
                Arrays.asList(
                        new CodeExplanation(1, "length() / size()", "Retorna n√∫mero de caracteres"),
                        new CodeExplanation(2, "substr(pos, len)", "Extrae subcadena"),
                        new CodeExplanation(3, "find(str)", "Busca subcadena, retorna posici√≥n"),
                        new CodeExplanation(4, "replace(pos, len, str)", "Reemplaza porci√≥n de texto"),
                        new CodeExplanation(5, "insert(pos, str)", "Inserta texto en posici√≥n"),
                        new CodeExplanation(6, "erase(pos, len)", "Elimina caracteres"),
                        new CodeExplanation(7, "append(str)", "Agrega al final")
                )
        );
        content5_1_2.setLesson(lesson5_1_2);
        
        lesson5_1_2.setContent(content5_1_2);
        lessonService.save(lesson5_1_2);

        // Lecci√≥n 5.1.3: Procesamiento de Texto
        Lesson lesson5_1_3 = createLesson("Procesamiento de Texto", "28 min", false, false);
        lesson5_1_3.setTopic(topic5_1);


        LessonContent content5_1_3 = createLessonContent(
                "https://example.com/videos/cpp-text-processing",
                "https://example.com/audio/cpp-text-processing",
                "Procesamiento_Texto.pdf",
                "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\n// Contar vocales\nint contarVocales(string texto) {\n    int contador = 0;\n    for (char c : texto) {\n        c = tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            contador++;\n        }\n    }\n    return contador;\n}\n\n// Contar palabras\nint contarPalabras(string texto) {\n    int contador = 0;\n    bool enPalabra = false;\n    for (char c : texto) {\n        if (isspace(c)) {\n            enPalabra = false;\n        } else if (!enPalabra) {\n            contador++;\n            enPalabra = true;\n        }\n    }\n    return contador;\n}\n\n// Invertir string\nstring invertir(string texto) {\n    string invertido = texto;\n    reverse(invertido.begin(), invertido.end());\n    return invertido;\n}\n\n// Convertir a may√∫sculas\nstring aMayusculas(string texto) {\n    string resultado = texto;\n    transform(resultado.begin(), resultado.end(), resultado.begin(), ::toupper);\n    return resultado;\n}\n\n// Convertir a min√∫sculas\nstring aMinusculas(string texto) {\n    string resultado = texto;\n    transform(resultado.begin(), resultado.end(), resultado.begin(), ::tolower);\n    return resultado;\n}\n\n// Verificar si es pal√≠ndromo\nbool esPalindromo(string texto) {\n    string limpio;\n    for (char c : texto) {\n        if (isalnum(c)) {\n            limpio += tolower(c);\n        }\n    }\n    string invertido = limpio;\n    reverse(invertido.begin(), invertido.end());\n    return limpio == invertido;\n}\n\nint main() {\n    string texto = \"Hola Mundo de la Programacion\";\n    \n    // Contar vocales\n    cout << \"Vocales: \" << contarVocales(texto) << endl;\n    \n    // Contar palabras\n    cout << \"Palabras: \" << contarPalabras(texto) << endl;\n    \n    // Invertir\n    cout << \"Invertido: \" << invertir(texto) << endl;\n    \n    // May√∫sculas y min√∫sculas\n    cout << \"May√∫sculas: \" << aMayusculas(texto) << endl;\n    cout << \"Min√∫sculas: \" << aMinusculas(texto) << endl;\n    \n    // Pal√≠ndromo\n    string palindromo = \"Anita lava la tina\";\n    if (esPalindromo(palindromo)) {\n        cout << \"'\" << palindromo << \"' es pal√≠ndromo\" << endl;\n    }\n    \n    // Validar email simple\n    string email = \"usuario@ejemplo.com\";\n    if (email.find('@') != string::npos && email.find('.') != string::npos) {\n        cout << \"Email v√°lido\" << endl;\n    }\n    \n    return 0;\n}",
                "mindmap-text-processing.png",
                "interactive-text-processor",
                Arrays.asList(
                        new CodeExplanation(1, "tolower() / toupper()", "Convierte caracteres a min√∫scula/may√∫scula"),
                        new CodeExplanation(2, "isspace()", "Verifica si es espacio en blanco"),
                        new CodeExplanation(3, "reverse()", "Invierte el contenido del string"),
                        new CodeExplanation(4, "transform()", "Aplica funci√≥n a cada car√°cter"),
                        new CodeExplanation(5, "isalnum()", "Verifica si es alfanum√©rico")
                )
        );
        content5_1_3.setLesson(lesson5_1_3);
        
        lesson5_1_3.setContent(content5_1_3);
        lessonService.save(lesson5_1_3);

        // ========== M√ìDULO 6: PUNTEROS Y MEMORIA DIN√ÅMICA ==========
        ModuleModel module6 = createModule(
                "Punteros y Memoria Din√°mica",
                "Comprende punteros, referencias y gesti√≥n de memoria din√°mica con new y delete",
                "12 horas", 400, 0, false);
        module6.setCourse(cppCourse);
        moduleService.save(module6);

        // Tema 6.1: Fundamentos de Punteros
        Topic topic6_1 = createTopic("Fundamentos de Punteros", false);
        topic6_1.setModule(module6);
        topicService.save(topic6_1);

        // Lecci√≥n 6.1.1: Introducci√≥n a Punteros
        Lesson lesson6_1_1 = createLesson("Introducci√≥n a Punteros", "35 min", false, false);
        lesson6_1_1.setTopic(topic6_1);
        

        LessonContent content6_1_1 = createLessonContent(
                "https://example.com/videos/cpp-pointers-intro",
                "https://example.com/audio/cpp-pointers-intro",
                "Introduccion_Punteros.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Variable normal\n    int numero = 42;\n    cout << \"Valor de numero: \" << numero << endl;\n    cout << \"Direcci√≥n de numero: \" << &numero << endl;\n    \n    // Declaraci√≥n de puntero\n    int* ptr;  // Puntero a entero\n    ptr = &numero;  // Asigna direcci√≥n de numero\n    \n    cout << \"\\nPuntero ptr:\" << endl;\n    cout << \"Direcci√≥n almacenada en ptr: \" << ptr << endl;\n    cout << \"Valor al que apunta (*ptr): \" << *ptr << endl;\n    \n    // Modificar a trav√©s del puntero\n    *ptr = 100;\n    cout << \"\\nDespu√©s de *ptr = 100:\" << endl;\n    cout << \"numero: \" << numero << endl;\n    cout << \"*ptr: \" << *ptr << endl;\n    \n    // Operadores importantes\n    // & = operador de direcci√≥n (address-of)\n    // * = operador de indirecci√≥n (dereference)\n    \n    // Ejemplo con diferentes tipos\n    double pi = 3.14159;\n    double* ptrDouble = &pi;\n    cout << \"\\nPuntero a double:\" << endl;\n    cout << \"Valor: \" << *ptrDouble << endl;\n    \n    char letra = 'A';\n    char* ptrChar = &letra;\n    cout << \"\\nPuntero a char:\" << endl;\n    cout << \"Valor: \" << *ptrChar << endl;\n    \n    // Puntero nulo\n    int* ptrNulo = nullptr;  // C++11\n    if (ptrNulo == nullptr) {\n        cout << \"\\nEl puntero es nulo\" << endl;\n    }\n    \n    // Tama√±o de punteros\n    cout << \"\\nTama√±o de punteros:\" << endl;\n    cout << \"sizeof(int*): \" << sizeof(int*) << \" bytes\" << endl;\n    cout << \"sizeof(double*): \" << sizeof(double*) << \" bytes\" << endl;\n    \n    return 0;\n}",
                "mindmap-pointers.png",
                "interactive-pointer-memory",
                Arrays.asList(
                        new CodeExplanation(1, "int* ptr", "Declara puntero a entero"),
                        new CodeExplanation(2, "&variable", "Operador de direcci√≥n - obtiene la direcci√≥n"),
                        new CodeExplanation(3, "*ptr", "Operador de indirecci√≥n - accede al valor"),
                        new CodeExplanation(4, "nullptr", "Puntero nulo (C++11)"),
                        new CodeExplanation(5, "Direcci√≥n de memoria", "Ubicaci√≥n en memoria RAM")
                )
        );
        content6_1_1.setLesson(lesson6_1_1);

        lesson6_1_1.setContent(content6_1_1);
        lessonService.save(lesson6_1_1);

        // Lecci√≥n 6.1.2: Punteros y Arreglos
        Lesson lesson6_1_2 = createLesson("Punteros y Arreglos", "30 min", false, false);
        lesson6_1_2.setTopic(topic6_1);
        

        LessonContent content6_1_2 = createLessonContent(
                "https://example.com/videos/cpp-pointers-arrays",
                "https://example.com/audio/cpp-pointers-arrays",
                "Punteros_Arreglos.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    int numeros[] = {10, 20, 30, 40, 50};\n    int* ptr = numeros;  // El nombre del arreglo es un puntero al primer elemento\n    \n    // Equivalencias\n    cout << \"numeros[0]: \" << numeros[0] << endl;\n    cout << \"*numeros: \" << *numeros << endl;\n    cout << \"*ptr: \" << *ptr << endl;\n    \n    // Acceso con notaci√≥n de arreglo\n    cout << \"\\nAcceso con []:\" << endl;\n    for (int i = 0; i < 5; i++) {\n        cout << numeros[i] << \" \";\n    }\n    cout << endl;\n    \n    // Acceso con aritm√©tica de punteros\n    cout << \"\\nAcceso con punteros:\" << endl;\n    for (int i = 0; i < 5; i++) {\n        cout << *(ptr + i) << \" \";\n    }\n    cout << endl;\n    \n    // Incremento de punteros\n    cout << \"\\nRecorrido con incremento:\" << endl;\n    int* p = numeros;\n    for (int i = 0; i < 5; i++) {\n        cout << *p << \" \";\n        p++;  // Avanza al siguiente elemento\n    }\n    cout << endl;\n    \n    // Diferencia de punteros\n    int* inicio = numeros;\n    int* fin = &numeros[4];\n    cout << \"\\nDiferencia de punteros: \" << (fin - inicio) << endl;\n    \n    // Punteros y strings (arreglos de char)\n    char mensaje[] = \"Hola\";\n    char* ptrChar = mensaje;\n    cout << \"\\nString con puntero: \" << ptrChar << endl;\n    \n    // Modificar a trav√©s de punteros\n    *(ptr + 2) = 300;  // Modifica numeros[2]\n    cout << \"\\nDespu√©s de modificar:\" << endl;\n    for (int i = 0; i < 5; i++) {\n        cout << numeros[i] << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}",
                "mindmap-pointers-arrays.png",
                "interactive-pointer-arithmetic",
                Arrays.asList(
                        new CodeExplanation(1, "int* ptr = arr", "Nombre del arreglo es puntero al primer elemento"),
                        new CodeExplanation(2, "arr[i] == *(arr + i)", "Equivalencia entre notaciones"),
                        new CodeExplanation(3, "ptr++", "Incrementa puntero al siguiente elemento"),
                        new CodeExplanation(4, "ptr + i", "Aritm√©tica de punteros"),
                        new CodeExplanation(5, "fin - inicio", "Diferencia de punteros da n√∫mero de elementos")
                )
        );
        content6_1_2.setLesson(lesson6_1_2);
      
        lesson6_1_2.setContent(content6_1_2);
        lessonService.save(lesson6_1_2);

        // Tema 6.2: Memoria Din√°mica
        Topic topic6_2 = createTopic("Memoria Din√°mica", false);
        topic6_2.setModule(module6);
        topicService.save(topic6_2);

        // Lecci√≥n 6.2.1: Operadores new y delete
        Lesson lesson6_2_1 = createLesson("Operadores new y delete", "32 min", false, false);
        lesson6_2_1.setTopic(topic6_2);
       

        LessonContent content6_2_1 = createLessonContent(
                "https://example.com/videos/cpp-dynamic-memory",
                "https://example.com/audio/cpp-dynamic-memory",
                "Memoria_Dinamica.pdf",
                "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Asignaci√≥n din√°mica de una variable\n    int* ptr = new int;\n    *ptr = 42;\n    cout << \"Valor din√°mico: \" << *ptr << endl;\n    delete ptr;  // Liberar memoria\n    ptr = nullptr;  // Buena pr√°ctica\n    \n    // Asignaci√≥n con inicializaci√≥n\n    double* ptrDouble = new double(3.14159);\n    cout << \"Double din√°mico: \" << *ptrDouble << endl;\n    delete ptrDouble;\n    ptrDouble = nullptr;\n    \n    // Arreglo din√°mico\n    int tamanio;\n    cout << \"\\n¬øCu√°ntos n√∫meros desea ingresar? \";\n    cin >> tamanio;\n    \n    int* numeros = new int[tamanio];\n    \n    cout << \"Ingrese \" << tamanio << \" n√∫meros:\" << endl;\n    for (int i = 0; i < tamanio; i++) {\n        cout << \"N√∫mero \" << (i+1) << \": \";\n        cin >> numeros[i];\n    }\n    \n    cout << \"\\nN√∫meros ingresados:\" << endl;\n    for (int i = 0; i < tamanio; i++) {\n        cout << numeros[i] << \" \";\n    }\n    cout << endl;\n    \n    // Liberar arreglo din√°mico\n    delete[] numeros;\n    numeros = nullptr;\n    \n    // Matriz din√°mica\n    int filas = 3, cols = 4;\n    int** matriz = new int*[filas];\n    for (int i = 0; i < filas; i++) {\n        matriz[i] = new int[cols];\n    }\n    \n    // Llenar matriz\n    int valor = 1;\n    for (int i = 0; i < filas; i++) {\n        for (int j = 0; j < cols; j++) {\n            matriz[i][j] = valor++;\n        }\n    }\n    \n    // Mostrar matriz\n    cout << \"\\nMatriz din√°mica:\" << endl;\n    for (int i = 0; i < filas; i++) {\n        for (int j = 0; j < cols; j++) {\n            cout << matriz[i][j] << \"\\t\";\n        }\n        cout << endl;\n    }\n    \n    // Liberar matriz din√°mica\n    for (int i = 0; i < filas; i++) {\n        delete[] matriz[i];\n    }\n    delete[] matriz;\n    matriz = nullptr;\n    \n    cout << \"\\nMemoria liberada correctamente\" << endl;\n    \n    return 0;\n}",
                "mindmap-dynamic-memory.png",
                "interactive-heap-stack",
                Arrays.asList(
                        new CodeExplanation(1, "new tipo", "Asigna memoria en el heap"),
                        new CodeExplanation(2, "delete ptr", "Libera memoria de una variable"),
                        new CodeExplanation(3, "new tipo[tam]", "Asigna arreglo din√°mico"),
                        new CodeExplanation(4, "delete[] ptr", "Libera arreglo din√°mico"),
                        new CodeExplanation(5, "Memory leak", "Olvidar delete causa fugas de memoria"),
                        new CodeExplanation(6, "ptr = nullptr", "Buena pr√°ctica despu√©s de delete")
                )
        );
        content6_2_1.setLesson(lesson6_2_1);
    
        lesson6_2_1.setContent(content6_2_1);
        lessonService.save(lesson6_2_1);

        // ========== M√ìDULO 7: ESTRUCTURAS Y TIPOS PERSONALIZADOS ==========
        ModuleModel module7 = createModule(
                "Estructuras y Tipos de Datos Personalizados",
                "Crea tipos de datos personalizados con struct y una introducci√≥n a clases",
                "10 horas", 300, 0, false);
        module7.setCourse(cppCourse);
        moduleService.save(module7);

        // Tema 7.1: Estructuras (Struct)
        Topic topic7_1 = createTopic("Estructuras (Struct)", false);
        topic7_1.setModule(module7);
        topicService.save(topic7_1);

        // Lecci√≥n 7.1.1: Definici√≥n y Uso de Estructuras
        Lesson lesson7_1_1 = createLesson("Definici√≥n y Uso de Estructuras", "28 min", false, false);
        lesson7_1_1.setTopic(topic7_1);
       

        LessonContent content7_1_1 = createLessonContent(
                "https://example.com/videos/cpp-structs",
                "https://example.com/audio/cpp-structs",
                "Estructuras_Intro.pdf",
                "#include <iostream>\n#include <string>\nusing namespace std;\n\n// Definici√≥n de estructura Estudiante\nstruct Estudiante {\n    string nombre;\n    int edad;\n    double promedio;\n    string carrera;\n};\n\n// Estructura Punto2D\nstruct Punto2D {\n    double x;\n    double y;\n};\n\n// Estructura Fecha\nstruct Fecha {\n    int dia;\n    int mes;\n    int anio;\n};\n\nvoid mostrarEstudiante(Estudiante est) {\n    cout << \"Nombre: \" << est.nombre << endl;\n    cout << \"Edad: \" << est.edad << endl;\n    cout << \"Promedio: \" << est.promedio << endl;\n    cout << \"Carrera: \" << est.carrera << endl;\n}\n\nint main() {\n    // Declaraci√≥n e inicializaci√≥n\n    Estudiante est1;\n    est1.nombre = \"Carlos\";\n    est1.edad = 20;\n    est1.promedio = 8.5;\n    est1.carrera = \"Ingenier√≠a\";\n    \n    cout << \"Estudiante 1:\" << endl;\n    mostrarEstudiante(est1);\n    \n    // Inicializaci√≥n en l√≠nea\n    Estudiante est2 = {\"Mar√≠a\", 22, 9.2, \"Medicina\"};\n    cout << \"\\nEstudiante 2:\" << endl;\n    mostrarEstudiante(est2);\n    \n    // Estructura Punto\n    Punto2D punto1 = {3.5, 7.2};\n    Punto2D punto2 = {1.0, 4.8};\n    \n    cout << \"\\nPunto 1: (\" << punto1.x << \", \" << punto1.y << \")\" << endl;\n    cout << \"Punto 2: (\" << punto2.x << \", \" << punto2.y << \")\" << endl;\n    \n    // Estructura Fecha\n    Fecha hoy = {29, 10, 2025};\n    cout << \"\\nFecha: \" << hoy.dia << \"/\" << hoy.mes << \"/\" << hoy.anio << endl;\n    \n    // Copiar estructuras\n    Estudiante est3 = est1;  // Copia todos los miembros\n    est3.nombre = \"Ana\";\n    cout << \"\\nEstudiante 3 (copia modificada):\" << endl;\n    mostrarEstudiante(est3);\n    \n    return 0;\n}",
                "mindmap-structs.png",
                "interactive-struct-builder",
                Arrays.asList(
                        new CodeExplanation(1, "struct Nombre { ... };", "Define tipo de dato personalizado"),
                        new CodeExplanation(2, "objeto.miembro", "Acceso a miembros con operador punto"),
                        new CodeExplanation(3, "Inicializaci√≥n", "Puede inicializarse con lista entre llaves"),
                        new CodeExplanation(4, "Agrupaci√≥n", "Agrupa datos relacionados en una unidad"),
                        new CodeExplanation(5, "Copia", "Asignaci√≥n copia todos los miembros")
                )
        );
        content7_1_1.setLesson(lesson7_1_1);
      
        lesson7_1_1.setContent(content7_1_1);
        lessonService.save(lesson7_1_1);

        // Lecci√≥n 7.1.2: Arreglos de Estructuras
        Lesson lesson7_1_2 = createLesson("Arreglos de Estructuras", "26 min", false, false);
        lesson7_1_2.setTopic(topic7_1);
        

        LessonContent content7_1_2 = createLessonContent(
                "https://example.com/videos/cpp-struct-arrays",
                "https://example.com/audio/cpp-struct-arrays",
                "Arrays_Estructuras.pdf",
                "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstruct Libro {\n    string titulo;\n    string autor;\n    int anio;\n    double precio;\n};\n\nvoid mostrarLibro(const Libro& libro) {\n    cout << \"T√≠tulo: \" << libro.titulo << endl;\n    cout << \"Autor: \" << libro.autor << endl;\n    cout << \"A√±o: \" << libro.anio << endl;\n    cout << \"Precio: $\" << libro.precio << endl;\n    cout << \"-------------------\" << endl;\n}\n\nint main() {\n    // Arreglo de estructuras\n    Libro biblioteca[3] = {\n        {\"El Quijote\", \"Cervantes\", 1605, 29.99},\n        {\"Cien A√±os de Soledad\", \"Garc√≠a M√°rquez\", 1967, 34.99},\n        {\"1984\", \"George Orwell\", 1949, 24.99}\n    };\n    \n    cout << \"BIBLIOTECA - Arreglo est√°tico:\" << endl;\n    for (int i = 0; i < 3; i++) {\n        cout << \"\\nLibro \" << (i+1) << \":\" << endl;\n        mostrarLibro(biblioteca[i]);\n    }\n    \n    // Vector de estructuras (din√°mico)\n    vector<Libro> coleccion;\n    \n    coleccion.push_back({\"Harry Potter\", \"J.K. Rowling\", 1997, 39.99});\n    coleccion.push_back({\"El Hobbit\", \"J.R.R. Tolkien\", 1937, 32.99});\n    \n    cout << \"\\nCOLECCI√ìN - Vector din√°mico:\" << endl;\n    for (size_t i = 0; i < coleccion.size(); i++) {\n        cout << \"\\nLibro \" << (i+1) << \":\" << endl;\n        mostrarLibro(coleccion[i]);\n    }\n    \n    // Buscar por criterio\n    string autorBuscado = \"Cervantes\";\n    cout << \"\\nBuscando libros de \" << autorBuscado << \":\" << endl;\n    for (const auto& libro : biblioteca) {\n        if (libro.autor == autorBuscado) {\n            mostrarLibro(libro);\n        }\n    }\n    \n    // Calcular precio total\n    double total = 0;\n    for (const auto& libro : biblioteca) {\n        total += libro.precio;\n    }\n    cout << \"\\nPrecio total de la biblioteca: $\" << total << endl;\n    \n    // Libro m√°s antiguo\n    Libro* masAntiguo = &biblioteca[0];\n    for (int i = 1; i < 3; i++) {\n        if (biblioteca[i].anio < masAntiguo->anio) {\n            masAntiguo = &biblioteca[i];\n        }\n    }\n    cout << \"\\nLibro m√°s antiguo:\" << endl;\n    mostrarLibro(*masAntiguo);\n    \n    return 0;\n}",
                "mindmap-struct-arrays.png",
                "interactive-struct-database",
                Arrays.asList(
                        new CodeExplanation(1, "Struct arr[n]", "Arreglo de estructuras"),
                        new CodeExplanation(2, "vector<Struct>", "Vector din√°mico de estructuras"),
                        new CodeExplanation(3, "arr[i].miembro", "Acceso a miembro de elemento del arreglo"),
                        new CodeExplanation(4, "B√∫squeda", "Recorrer y comparar miembros"),
                        new CodeExplanation(5, "Agregaci√≥n", "Procesar datos de m√∫ltiples estructuras")
                )
        );
        content7_1_2.setLesson(lesson7_1_2);
      
        lesson7_1_2.setContent(content7_1_2);
        lessonService.save(lesson7_1_2);

        // Tema 7.2: Introducci√≥n a Clases
        Topic topic7_2 = createTopic("Introducci√≥n a Clases (Opcional)", false);
        topic7_2.setModule(module7);
        topicService.save(topic7_2);

        // Lecci√≥n 7.2.1: Diferencia entre Struct y Class
        Lesson lesson7_2_1 = createLesson("Diferencia entre Struct y Class", "25 min", false, false);
        lesson7_2_1.setTopic(topic7_2);
      

        LessonContent content7_2_1 = createLessonContent(
                "https://example.com/videos/cpp-struct-vs-class",
                "https://example.com/audio/cpp-struct-vs-class",
                "Struct_vs_Class.pdf",
                "#include <iostream>\n#include <string>\nusing namespace std;\n\n// Struct - miembros p√∫blicos por defecto\nstruct PersonaStruct {\n    string nombre;\n    int edad;\n    \n    void saludar() {\n        cout << \"Hola, soy \" << nombre << endl;\n    }\n};\n\n// Class - miembros privados por defecto\nclass PersonaClass {\nprivate:\n    string nombre;\n    int edad;\n    \npublic:\n    // Constructor\n    PersonaClass(string n, int e) {\n        nombre = n;\n        edad = e;\n    }\n    \n    // M√©todos p√∫blicos (getters)\n    string getNombre() {\n        return nombre;\n    }\n    \n    int getEdad() {\n        return edad;\n    }\n    \n    // M√©todos p√∫blicos (setters)\n    void setNombre(string n) {\n        nombre = n;\n    }\n    \n    void setEdad(int e) {\n        if (e > 0 && e < 150) {\n            edad = e;\n        }\n    }\n    \n    void saludar() {\n        cout << \"Hola, soy \" << nombre << \" y tengo \" << edad << \" a√±os\" << endl;\n    }\n};\n\nint main() {\n    // Usando struct\n    PersonaStruct p1;\n    p1.nombre = \"Carlos\";  // Acceso directo\n    p1.edad = 25;\n    p1.saludar();\n    \n    // Usando class\n    PersonaClass p2(\"Mar√≠a\", 30);  // Constructor\n    p2.saludar();\n    \n    // Con class, no se puede acceder directamente a miembros privados\n    // p2.nombre = \"Ana\";  // ERROR: nombre es privado\n    \n    // Usar m√©todos p√∫blicos\n    p2.setNombre(\"Ana\");\n    p2.setEdad(28);\n    cout << \"Nuevo nombre: \" << p2.getNombre() << endl;\n    p2.saludar();\n    \n    cout << \"\\nDiferencias clave:\" << endl;\n    cout << \"1. Struct: miembros p√∫blicos por defecto\" << endl;\n    cout << \"2. Class: miembros privados por defecto\" << endl;\n    cout << \"3. Class: encapsulaci√≥n y control de acceso\" << endl;\n    cout << \"4. Class: constructores para inicializaci√≥n\" << endl;\n    \n    return 0;\n}",
                "mindmap-oop-intro.png",
                "interactive-class-explorer",
                Arrays.asList(
                        new CodeExplanation(1, "struct", "Miembros p√∫blicos por defecto"),
                        new CodeExplanation(2, "class", "Miembros privados por defecto"),
                        new CodeExplanation(3, "private:", "No accesible fuera de la clase"),
                        new CodeExplanation(4, "public:", "Accesible desde cualquier parte"),
                        new CodeExplanation(5, "Encapsulaci√≥n", "Ocultar detalles de implementaci√≥n"),
                        new CodeExplanation(6, "Constructor", "M√©todo especial para inicializar objetos")
                )
        );
        content7_2_1.setLesson(lesson7_2_1);
      
        lesson7_2_1.setContent(content7_2_1);
        lessonService.save(lesson7_2_1);

        // ========== M√ìDULO 8: ARCHIVOS ==========
        ModuleModel module8 = createModule(
                "Archivos",
                "Aprende a leer, escribir y manipular archivos para persistencia de datos",
                "10 horas", 300, 0, false);
        module8.setCourse(cppCourse);
        moduleService.save(module8);

        // Tema 8.1: Manejo de Archivos
        Topic topic8_1 = createTopic("Manejo de Archivos", false);
        topic8_1.setModule(module8);
        topicService.save(topic8_1);

        // Lecci√≥n 8.1.1: Lectura de Archivos
        Lesson lesson8_1_1 = createLesson("Lectura de Archivos", "30 min", false, false);
        lesson8_1_1.setTopic(topic8_1);
        

        LessonContent content8_1_1 = createLessonContent(
                "https://example.com/videos/cpp-file-reading",
                "https://example.com/audio/cpp-file-reading",
                "Lectura_Archivos.pdf",
                "#include <iostream>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nint main() {\n    // Lectura con ifstream\n    ifstream archivo;\n    archivo.open(\"datos.txt\");\n    \n    // Verificar si se abri√≥ correctamente\n    if (!archivo.is_open()) {\n        cout << \"Error al abrir el archivo\" << endl;\n        return 1;\n    }\n    \n    // Lectura palabra por palabra\n    string palabra;\n    cout << \"Contenido (palabra por palabra):\" << endl;\n    while (archivo >> palabra) {\n        cout << palabra << endl;\n    }\n    archivo.close();\n    \n    // Lectura l√≠nea por l√≠nea\n    archivo.open(\"datos.txt\");\n    string linea;\n    cout << \"\\nContenido (l√≠nea por l√≠nea):\" << endl;\n    int numLinea = 1;\n    while (getline(archivo, linea)) {\n        cout << numLinea << \": \" << linea << endl;\n        numLinea++;\n    }\n    archivo.close();\n    \n    // Lectura de n√∫meros\n    ifstream numeros(\"numeros.txt\");\n    if (numeros.is_open()) {\n        int numero;\n        int suma = 0;\n        int contador = 0;\n        \n        cout << \"\\nN√∫meros en el archivo:\" << endl;\n        while (numeros >> numero) {\n            cout << numero << \" \";\n            suma += numero;\n            contador++;\n        }\n        cout << endl;\n        \n        if (contador > 0) {\n            cout << \"Suma: \" << suma << endl;\n            cout << \"Promedio: \" << (double)suma / contador << endl;\n        }\n        numeros.close();\n    }\n    \n    // Contar l√≠neas, palabras y caracteres\n    archivo.open(\"datos.txt\");\n    int lineas = 0, palabras = 0, caracteres = 0;\n    \n    while (getline(archivo, linea)) {\n        lineas++;\n        caracteres += linea.length();\n        \n        // Contar palabras\n        bool enPalabra = false;\n        for (char c : linea) {\n            if (isspace(c)) {\n                enPalabra = false;\n            } else if (!enPalabra) {\n                palabras++;\n                enPalabra = true;\n            }\n        }\n    }\n    \n    cout << \"\\nEstad√≠sticas del archivo:\" << endl;\n    cout << \"L√≠neas: \" << lineas << endl;\n    cout << \"Palabras: \" << palabras << endl;\n    cout << \"Caracteres: \" << caracteres << endl;\n    \n    archivo.close();\n    \n    return 0;\n}",
                "mindmap-file-reading.png",
                "interactive-file-reader",
                Arrays.asList(
                        new CodeExplanation(1, "#include <fstream>", "Biblioteca para manejo de archivos"),
                        new CodeExplanation(2, "ifstream", "Input file stream - lectura"),
                        new CodeExplanation(3, "open()", "Abre el archivo"),
                        new CodeExplanation(4, "is_open()", "Verifica si se abri√≥ correctamente"),
                        new CodeExplanation(5, "getline()", "Lee l√≠nea completa"),
                        new CodeExplanation(6, ">>", "Lee palabra o dato formateado"),
                        new CodeExplanation(7, "close()", "Cierra el archivo")
                )
        );
        content8_1_1.setLesson(lesson8_1_1);
        
        lesson8_1_1.setContent(content8_1_1);
        lessonService.save(lesson8_1_1);

        // Lecci√≥n 8.1.2: Escritura de Archivos
        Lesson lesson8_1_2 = createLesson("Escritura de Archivos", "28 min", false, false);
        lesson8_1_2.setTopic(topic8_1);
       

        LessonContent content8_1_2 = createLessonContent(
                "https://example.com/videos/cpp-file-writing",
                "https://example.com/audio/cpp-file-writing",
                "Escritura_Archivos.pdf",
                "#include <iostream>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nint main() {\n    // Escritura b√°sica con ofstream\n    ofstream archivo;\n    archivo.open(\"salida.txt\");\n    \n    if (!archivo.is_open()) {\n        cout << \"Error al crear el archivo\" << endl;\n        return 1;\n    }\n    \n    archivo << \"Hola, este es un archivo de prueba\" << endl;\n    archivo << \"Segunda l√≠nea del archivo\" << endl;\n    archivo << \"N√∫meros: \" << 42 << \", \" << 3.14 << endl;\n    \n    archivo.close();\n    cout << \"Archivo 'salida.txt' creado exitosamente\" << endl;\n    \n    // Modo append (agregar al final)\n    ofstream log(\"log.txt\", ios::app);\n    if (log.is_open()) {\n        log << \"Nueva entrada en el log\" << endl;\n        log << \"Timestamp: 2025-10-29 15:30:00\" << endl;\n        log.close();\n        cout << \"Log actualizado\" << endl;\n    }\n    \n    // Escribir datos estructurados\n    ofstream estudiantes(\"estudiantes.txt\");\n    if (estudiantes.is_open()) {\n        estudiantes << \"Nombre,Edad,Promedio\" << endl;\n        estudiantes << \"Carlos,20,8.5\" << endl;\n        estudiantes << \"Mar√≠a,22,9.2\" << endl;\n        estudiantes << \"Juan,21,7.8\" << endl;\n        estudiantes.close();\n        cout << \"Archivo CSV creado\" << endl;\n    }\n    \n    // Escribir arreglo de n√∫meros\n    int numeros[] = {10, 20, 30, 40, 50};\n    ofstream nums(\"numeros.txt\");\n    if (nums.is_open()) {\n        for (int i = 0; i < 5; i++) {\n            nums << numeros[i] << endl;\n        }\n        nums.close();\n        cout << \"N√∫meros guardados\" << endl;\n    }\n    \n    // Crear reporte\n    ofstream reporte(\"reporte.txt\");\n    if (reporte.is_open()) {\n        reporte << \"==============================\" << endl;\n        reporte << \"     REPORTE DE VENTAS        \" << endl;\n        reporte << \"==============================\" << endl;\n        reporte << \"Fecha: 29/10/2025\" << endl;\n        reporte << \"------------------------------\" << endl;\n        reporte << \"Producto 1: $150.00\" << endl;\n        reporte << \"Producto 2: $230.50\" << endl;\n        reporte << \"Producto 3: $89.99\" << endl;\n        reporte << \"------------------------------\" << endl;\n        reporte << \"Total: $470.49\" << endl;\n        reporte << \"==============================\" << endl;\n        reporte.close();\n        cout << \"Reporte generado\" << endl;\n    }\n    \n    return 0;\n}",
                "mindmap-file-writing.png",
                "interactive-file-writer",
                Arrays.asList(
                        new CodeExplanation(1, "ofstream", "Output file stream - escritura"),
                        new CodeExplanation(2, "archivo << dato", "Escribe datos en el archivo"),
                        new CodeExplanation(3, "ios::app", "Modo append - agrega al final"),
                        new CodeExplanation(4, "endl", "Salto de l√≠nea en archivo"),
                        new CodeExplanation(5, "Sobrescritura", "Por defecto, open() sobrescribe el archivo"),
                        new CodeExplanation(6, "CSV", "Formato com√∫n: valores separados por comas")
                )
        );
        content8_1_2.setLesson(lesson8_1_2);
      
        lesson8_1_2.setContent(content8_1_2);
        lessonService.save(lesson8_1_2);

        // Lecci√≥n 8.1.3: Manipulaci√≥n Avanzada
        Lesson lesson8_1_3 = createLesson("Manipulaci√≥n Avanzada", "32 min", false, false);
        lesson8_1_3.setTopic(topic8_1);
      

        LessonContent content8_1_3 = createLessonContent(
                "https://example.com/videos/cpp-file-advanced",
                "https://example.com/audio/cpp-file-advanced",
                "Manipulacion_Archivos.pdf",
                "#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstruct Contacto {\n    string nombre;\n    string telefono;\n    string email;\n};\n\nvoid guardarContactos(const vector<Contacto>& contactos, const string& archivo) {\n    ofstream file(archivo);\n    if (file.is_open()) {\n        for (const auto& c : contactos) {\n            file << c.nombre << \"|\" << c.telefono << \"|\" << c.email << endl;\n        }\n        file.close();\n        cout << \"Contactos guardados en \" << archivo << endl;\n    }\n}\n\nvector<Contacto> cargarContactos(const string& archivo) {\n    vector<Contacto> contactos;\n    ifstream file(archivo);\n    \n    if (file.is_open()) {\n        string linea;\n        while (getline(file, linea)) {\n            Contacto c;\n            size_t pos1 = linea.find('|');\n            size_t pos2 = linea.find('|', pos1 + 1);\n            \n            c.nombre = linea.substr(0, pos1);\n            c.telefono = linea.substr(pos1 + 1, pos2 - pos1 - 1);\n            c.email = linea.substr(pos2 + 1);\n            \n            contactos.push_back(c);\n        }\n        file.close();\n    }\n    \n    return contactos;\n}\n\nvoid mostrarContactos(const vector<Contacto>& contactos) {\n    cout << \"\\n===== LISTA DE CONTACTOS =====\" << endl;\n    for (size_t i = 0; i < contactos.size(); i++) {\n        cout << (i+1) << \". \" << contactos[i].nombre << endl;\n        cout << \"   Tel: \" << contactos[i].telefono << endl;\n        cout << \"   Email: \" << contactos[i].email << endl;\n        cout << \"----------------------------\" << endl;\n    }\n}\n\nvoid buscarContacto(const vector<Contacto>& contactos, const string& nombre) {\n    bool encontrado = false;\n    for (const auto& c : contactos) {\n        if (c.nombre.find(nombre) != string::npos) {\n            cout << \"\\nContacto encontrado:\" << endl;\n            cout << \"Nombre: \" << c.nombre << endl;\n            cout << \"Tel√©fono: \" << c.telefono << endl;\n            cout << \"Email: \" << c.email << endl;\n            encontrado = true;\n        }\n    }\n    if (!encontrado) {\n        cout << \"No se encontr√≥ ning√∫n contacto con ese nombre\" << endl;\n    }\n}\n\nint main() {\n    vector<Contacto> agenda;\n    \n    // Agregar contactos\n    agenda.push_back({\"Carlos Mendoza\", \"555-1234\", \"carlos@email.com\"});\n    agenda.push_back({\"Mar√≠a L√≥pez\", \"555-5678\", \"maria@email.com\"});\n    agenda.push_back({\"Juan P√©rez\", \"555-9012\", \"juan@email.com\"});\n    \n    // Guardar en archivo\n    guardarContactos(agenda, \"contactos.txt\");\n    \n    // Limpiar y cargar desde archivo\n    agenda.clear();\n    agenda = cargarContactos(\"contactos.txt\");\n    \n    // Mostrar contactos cargados\n    mostrarContactos(agenda);\n    \n    // Buscar contacto\n    buscarContacto(agenda, \"Mar√≠a\");\n    \n    // Lectura/Escritura simult√°nea con fstream\n    fstream config(\"config.txt\", ios::in | ios::out | ios::app);\n    if (config.is_open()) {\n        config << \"idioma=espa√±ol\" << endl;\n        config << \"tema=oscuro\" << endl;\n        config.close();\n    }\n    \n    cout << \"\\nSistema de gesti√≥n completado\" << endl;\n    \n    return 0;\n}",
                "mindmap-file-advanced.png",
                "interactive-crud-system",
                Arrays.asList(
                        new CodeExplanation(1, "fstream", "Permite lectura y escritura simult√°nea"),
                        new CodeExplanation(2, "Persistencia", "Guardar datos entre ejecuciones"),
                        new CodeExplanation(3, "Parseo", "Analizar y extraer datos del archivo"),
                        new CodeExplanation(4, "CRUD", "Create, Read, Update, Delete"),
                        new CodeExplanation(5, "Delimitadores", "Usar | o , para separar campos"),
                        new CodeExplanation(6, "substr() + find()", "Extraer datos delimitados")
                )
        );
        content8_1_3.setLesson(lesson8_1_3);
 
        lesson8_1_3.setContent(content8_1_3);
        lessonService.save(lesson8_1_3);

        // ========== M√ìDULO 9: PROYECTO FINAL INTEGRADOR ==========
        ModuleModel module9 = createModule(
                "Proyecto Final Integrador",
                "Aplica todos los conocimientos desarrollando un proyecto completo desde cero",
                "20 horas", 500, 0, false);
        module9.setCourse(cppCourse);
        moduleService.save(module9);

        // Tema 9.1: Desarrollo de Proyecto
        Topic topic9_1 = createTopic("Desarrollo de Proyecto", false);
        topic9_1.setModule(module9);
        topicService.save(topic9_1);

        // Lecci√≥n 9.1.1: Especificaciones del Proyecto
        Lesson lesson9_1_1 = createLesson("Especificaciones del Proyecto", "45 min", false, false);
        lesson9_1_1.setTopic(topic9_1);
        

        LessonContent content9_1_1 = createLessonContent(
                "https://example.com/videos/cpp-final-project-specs",
                "https://example.com/audio/cpp-final-project-specs",
                "Especificaciones_Proyecto.pdf",
                "// PROYECTO FINAL: Sistema de Gesti√≥n\n// Opciones disponibles:\n\n// 1. SISTEMA DE GESTI√ìN DE BIBLIOTECA\n// - Registrar libros (t√≠tulo, autor, a√±o, ISBN)\n// - Prestar y devolver libros\n// - Buscar libros por t√≠tulo o autor\n// - Mostrar estad√≠sticas\n// - Guardar/cargar datos desde archivo\n\n// 2. AGENDA DE CONTACTOS AVANZADA\n// - CRUD completo de contactos\n// - B√∫squeda y filtrado\n// - Categor√≠as de contactos\n// - Exportar a CSV\n// - Persistencia en archivos\n\n// 3. SISTEMA DE INVENTARIO\n// - Gesti√≥n de productos\n// - Control de stock\n// - Alertas de stock bajo\n// - Reportes de inventario\n// - Base de datos en archivos\n\n// 4. JUEGO DE CONSOLA\n// - Ahorcado con m√∫ltiples niveles\n// - Trivia con categor√≠as\n// - Sistema de puntuaci√≥n\n// - Ranking de jugadores\n// - Guardar progreso\n\n// 5. CALCULADORA CIENT√çFICA\n// - Operaciones b√°sicas y avanzadas\n// - Funciones trigonom√©tricas\n// - Conversiones de unidades\n// - Historial de operaciones\n// - Modo interactivo\n\n// REQUISITOS T√âCNICOS:\n// - Usar funciones para modularizar\n// - Implementar estructuras (struct)\n// - Manejo de arreglos y/o vectores\n// - Lectura y escritura de archivos\n// - Validaci√≥n de entrada\n// - Men√∫ interactivo\n// - Comentarios y documentaci√≥n\n// - Manejo de errores",
                "mindmap-project-options.png",
                "interactive-project-planner",
                Arrays.asList(
                        new CodeExplanation(1, "Especificaciones", "Define qu√© debe hacer el sistema"),
                        new CodeExplanation(2, "Requisitos t√©cnicos", "Conceptos que debes aplicar"),
                        new CodeExplanation(3, "Modularizaci√≥n", "Divide el proyecto en funciones"),
                        new CodeExplanation(4, "Persistencia", "Los datos deben guardarse en archivos"),
                        new CodeExplanation(5, "Validaci√≥n", "Verifica entradas del usuario")
                )
        );
        content9_1_1.setLesson(lesson9_1_1);
     
        lesson9_1_1.setContent(content9_1_1);
        lessonService.save(lesson9_1_1);

        // Lecci√≥n 9.1.2: Ejemplo Base - Sistema de Biblioteca
        Lesson lesson9_1_2 = createLesson("Ejemplo Base - Sistema de Biblioteca", "60 min", false, false);
        lesson9_1_2.setTopic(topic9_1);
        

        LessonContent content9_1_2 = createLessonContent(
                "https://example.com/videos/cpp-library-system",
                "https://example.com/audio/cpp-library-system",
                "Sistema_Biblioteca_Ejemplo.pdf",
                "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstruct Libro {\n    int id;\n    string titulo;\n    string autor;\n    int anio;\n    bool prestado;\n};\n\nvector<Libro> biblioteca;\nint siguienteId = 1;\n\nvoid cargarDatos() {\n    ifstream archivo(\"biblioteca.txt\");\n    if (archivo.is_open()) {\n        Libro libro;\n        while (archivo >> libro.id) {\n            archivo.ignore();\n            getline(archivo, libro.titulo);\n            getline(archivo, libro.autor);\n            archivo >> libro.anio >> libro.prestado;\n            archivo.ignore();\n            biblioteca.push_back(libro);\n            if (libro.id >= siguienteId) {\n                siguienteId = libro.id + 1;\n            }\n        }\n        archivo.close();\n        cout << \"Datos cargados: \" << biblioteca.size() << \" libros\" << endl;\n    }\n}\n\nvoid guardarDatos() {\n    ofstream archivo(\"biblioteca.txt\");\n    if (archivo.is_open()) {\n        for (const auto& libro : biblioteca) {\n            archivo << libro.id << endl;\n            archivo << libro.titulo << endl;\n            archivo << libro.autor << endl;\n            archivo << libro.anio << \" \" << libro.prestado << endl;\n        }\n        archivo.close();\n        cout << \"Datos guardados exitosamente\" << endl;\n    }\n}\n\nvoid agregarLibro() {\n    Libro nuevo;\n    nuevo.id = siguienteId++;\n    nuevo.prestado = false;\n    \n    cin.ignore();\n    cout << \"T√≠tulo: \";\n    getline(cin, nuevo.titulo);\n    cout << \"Autor: \";\n    getline(cin, nuevo.autor);\n    cout << \"A√±o: \";\n    cin >> nuevo.anio;\n    \n    biblioteca.push_back(nuevo);\n    cout << \"Libro agregado con ID: \" << nuevo.id << endl;\n}\n\nvoid listarLibros() {\n    if (biblioteca.empty()) {\n        cout << \"No hay libros en la biblioteca\" << endl;\n        return;\n    }\n    \n    cout << \"\\n===== CAT√ÅLOGO DE LIBROS =====\" << endl;\n    for (const auto& libro : biblioteca) {\n        cout << \"ID: \" << libro.id << endl;\n        cout << \"T√≠tulo: \" << libro.titulo << endl;\n        cout << \"Autor: \" << libro.autor << endl;\n        cout << \"A√±o: \" << libro.anio << endl;\n        cout << \"Estado: \" << (libro.prestado ? \"PRESTADO\" : \"DISPONIBLE\") << endl;\n        cout << \"----------------------------\" << endl;\n    }\n}\n\nvoid prestarLibro() {\n    int id;\n    cout << \"ID del libro a prestar: \";\n    cin >> id;\n    \n    for (auto& libro : biblioteca) {\n        if (libro.id == id) {\n            if (libro.prestado) {\n                cout << \"El libro ya est√° prestado\" << endl;\n            } else {\n                libro.prestado = true;\n                cout << \"Libro prestado exitosamente\" << endl;\n            }\n            return;\n        }\n    }\n    cout << \"Libro no encontrado\" << endl;\n}\n\nvoid devolverLibro() {\n    int id;\n    cout << \"ID del libro a devolver: \";\n    cin >> id;\n    \n    for (auto& libro : biblioteca) {\n        if (libro.id == id) {\n            if (!libro.prestado) {\n                cout << \"El libro no estaba prestado\" << endl;\n            } else {\n                libro.prestado = false;\n                cout << \"Libro devuelto exitosamente\" << endl;\n            }\n            return;\n        }\n    }\n    cout << \"Libro no encontrado\" << endl;\n}\n\nvoid buscarLibro() {\n    cin.ignore();\n    string busqueda;\n    cout << \"Ingrese t√≠tulo o autor a buscar: \";\n    getline(cin, busqueda);\n    \n    bool encontrado = false;\n    for (const auto& libro : biblioteca) {\n        if (libro.titulo.find(busqueda) != string::npos || \n            libro.autor.find(busqueda) != string::npos) {\n            cout << \"\\nEncontrado:\" << endl;\n            cout << \"ID: \" << libro.id << \" - \" << libro.titulo << endl;\n            cout << \"Autor: \" << libro.autor << \" (\" << libro.anio << \")\" << endl;\n            encontrado = true;\n        }\n    }\n    \n    if (!encontrado) {\n        cout << \"No se encontraron libros\" << endl;\n    }\n}\n\nvoid mostrarEstadisticas() {\n    int total = biblioteca.size();\n    int prestados = 0;\n    \n    for (const auto& libro : biblioteca) {\n        if (libro.prestado) prestados++;\n    }\n    \n    cout << \"\\n===== ESTAD√çSTICAS =====\" << endl;\n    cout << \"Total de libros: \" << total << endl;\n    cout << \"Libros prestados: \" << prestados << endl;\n    cout << \"Libros disponibles: \" << (total - prestados) << endl;\n}\n\nint main() {\n    cargarDatos();\n    \n    int opcion;\n    do {\n        cout << \"\\n===== SISTEMA DE BIBLIOTECA =====\" << endl;\n        cout << \"1. Agregar libro\" << endl;\n        cout << \"2. Listar libros\" << endl;\n        cout << \"3. Prestar libro\" << endl;\n        cout << \"4. Devolver libro\" << endl;\n        cout << \"5. Buscar libro\" << endl;\n        cout << \"6. Estad√≠sticas\" << endl;\n        cout << \"7. Guardar y salir\" << endl;\n        cout << \"Opci√≥n: \";\n        cin >> opcion;\n        \n        switch(opcion) {\n            case 1: agregarLibro(); break;\n            case 2: listarLibros(); break;\n            case 3: prestarLibro(); break;\n            case 4: devolverLibro(); break;\n            case 5: buscarLibro(); break;\n            case 6: mostrarEstadisticas(); break;\n            case 7:\n                guardarDatos();\n                cout << \"¬°Hasta luego!\" << endl;\n                break;\n            default:\n                cout << \"Opci√≥n inv√°lida\" << endl;\n        }\n    } while (opcion != 7);\n    \n    return 0;\n}",
                "mindmap-library-system.png",
                "interactive-project-demo",
                Arrays.asList(
                        new CodeExplanation(1, "Estructura modular", "Cada funcionalidad en su propia funci√≥n"),
                        new CodeExplanation(2, "Persistencia", "Carga y guarda datos en archivo"),
                        new CodeExplanation(3, "Vector de structs", "Almacena colecci√≥n de libros"),
                        new CodeExplanation(4, "Men√∫ interactivo", "do-while con switch-case"),
                        new CodeExplanation(5, "B√∫squeda", "find() para buscar subcadenas"),
                        new CodeExplanation(6, "Validaciones", "Verifica estados antes de modificar")
                )
        );
        content9_1_2.setLesson(lesson9_1_2);
   
        lesson9_1_2.setContent(content9_1_2);
        lessonService.save(lesson9_1_2);

        // Lecci√≥n 9.1.3: Gu√≠a de Desarrollo y Mejores Pr√°cticas
        Lesson lesson9_1_3 = createLesson("Gu√≠a de Desarrollo y Mejores Pr√°cticas", "40 min", false, false);
        lesson9_1_3.setTopic(topic9_1);
       

        LessonContent content9_1_3 = createLessonContent(
                "https://example.com/videos/cpp-best-practices",
                "https://example.com/audio/cpp-best-practices",
                "Mejores_Practicas_CPP.pdf",
                "// GU√çA DE MEJORES PR√ÅCTICAS PARA TU PROYECTO\n\n// 1. NOMBRES DESCRIPTIVOS\nint edad;  // ‚úì Bueno\nint e;     // ‚úó Malo\n\nvoid calcularPromedio();  // ‚úì Bueno\nvoid cp();                // ‚úó Malo\n\n// 2. CONSTANTES EN MAY√öSCULAS\nconst int MAX_ESTUDIANTES = 100;\nconst double PI = 3.14159;\n\n// 3. COMENTARIOS √öTILES\n// Calcula el promedio de un arreglo de n√∫meros\ndouble calcularPromedio(int arr[], int tam) {\n    int suma = 0;\n    for (int i = 0; i < tam; i++) {\n        suma += arr[i];\n    }\n    return static_cast<double>(suma) / tam;\n}\n\n// 4. VALIDACI√ìN DE ENTRADA\nvoid leerEdad() {\n    int edad;\n    do {\n        cout << \"Ingrese edad (1-120): \";\n        cin >> edad;\n        if (edad < 1 || edad > 120) {\n            cout << \"Edad inv√°lida. Intente nuevamente.\" << endl;\n        }\n    } while (edad < 1 || edad > 120);\n}\n\n// 5. MANEJO DE ERRORES EN ARCHIVOS\nvoid abrirArchivo(const string& nombre) {\n    ifstream archivo(nombre);\n    if (!archivo.is_open()) {\n        cerr << \"Error: No se pudo abrir \" << nombre << endl;\n        return;\n    }\n    // Procesar archivo...\n    archivo.close();\n}\n\n// 6. FUNCIONES PEQUE√ëAS Y ESPEC√çFICAS\n// ‚úì Bueno: Una funci√≥n, una tarea\nvoid mostrarMenu() {\n    cout << \"1. Opci√≥n 1\" << endl;\n    cout << \"2. Opci√≥n 2\" << endl;\n}\n\nint leerOpcion() {\n    int opcion;\n    cin >> opcion;\n    return opcion;\n}\n\n// 7. USAR CONST PARA PAR√ÅMETROS QUE NO CAMBIAN\nvoid mostrarEstudiante(const Estudiante& est) {\n    cout << est.nombre << endl;\n}\n\n// 8. EVITAR N√öMEROS M√ÅGICOS\n// ‚úó Malo\nif (edad > 18) { /* ... */ }\n\n// ‚úì Bueno\nconst int EDAD_MAYORIA = 18;\nif (edad > EDAD_MAYORIA) { /* ... */ }\n\n// 9. INDENTACI√ìN CONSISTENTE\nvoid ejemplo() {\n    if (condicion) {\n        // c√≥digo indentado\n        for (int i = 0; i < 10; i++) {\n            // m√°s indentaci√≥n\n        }\n    }\n}\n\n// 10. CERRAR RECURSOS\nvoid procesarArchivo() {\n    ifstream archivo(\"datos.txt\");\n    // ... procesar ...\n    archivo.close();  // ‚úì Siempre cerrar\n}\n\n// CHECKLIST DEL PROYECTO FINAL:\n// ‚ñ° C√≥digo modularizado en funciones\n// ‚ñ° Nombres descriptivos de variables y funciones\n// ‚ñ° Comentarios explicativos\n// ‚ñ° Validaci√≥n de entrada del usuario\n// ‚ñ° Manejo de errores (archivos, etc.)\n// ‚ñ° Persistencia de datos (archivos)\n// ‚ñ° Men√∫ interactivo funcional\n// ‚ñ° Uso de estructuras (struct)\n// ‚ñ° Uso de arreglos/vectores\n// ‚ñ° Indentaci√≥n consistente\n// ‚ñ° C√≥digo compila sin errores\n// ‚ñ° Pruebas de todas las funcionalidades",
                "mindmap-best-practices.png",
                "interactive-code-review",
                Arrays.asList(
                        new CodeExplanation(1, "Nombres descriptivos", "Facilita lectura y mantenimiento"),
                        new CodeExplanation(2, "Comentarios √∫tiles", "Explica el 'por qu√©', no el 'qu√©'"),
                        new CodeExplanation(3, "Validaci√≥n", "Siempre verifica entrada del usuario"),
                        new CodeExplanation(4, "Modularizaci√≥n", "Una funci√≥n, una responsabilidad"),
                        new CodeExplanation(5, "Manejo de errores", "Anticipa y gestiona problemas"),
                        new CodeExplanation(6, "Constantes", "Usa const para valores que no cambian")
                )
        );
        content9_1_3.setLesson(lesson9_1_3);
     
        lesson9_1_3.setContent(content9_1_3);
        lessonService.save(lesson9_1_3);

        // Lecci√≥n 9.1.4: R√∫brica de Evaluaci√≥n
        Lesson lesson9_1_4 = createLesson("R√∫brica de Evaluaci√≥n", "20 min", false, false);
        lesson9_1_4.setTopic(topic9_1);
        

        LessonContent content9_1_4 = createLessonContent(
                "https://example.com/videos/cpp-project-rubric",
                "https://example.com/audio/cpp-project-rubric",
                "Rubrica_Evaluacion.pdf",
                "// R√öBRICA DE EVALUACI√ìN DEL PROYECTO FINAL\n// Total: 100 puntos\n\n// 1. FUNCIONALIDAD (40 puntos)\n// - El programa compila sin errores (10 pts)\n// - Todas las funciones principales funcionan (15 pts)\n// - Manejo correcto de casos especiales (10 pts)\n// - El programa no se cuelga ni crashea (5 pts)\n\n// 2. USO DE CONCEPTOS (30 puntos)\n// - Funciones bien implementadas (8 pts)\n// - Uso correcto de estructuras (6 pts)\n// - Arreglos/vectores utilizados apropiadamente (6 pts)\n// - Manejo de archivos funcional (10 pts)\n\n// 3. CALIDAD DEL C√ìDIGO (20 puntos)\n// - Nombres descriptivos (5 pts)\n// - Comentarios √∫tiles (5 pts)\n// - C√≥digo bien organizado y modular (5 pts)\n// - Indentaci√≥n y formato consistente (5 pts)\n\n// 4. INTERFAZ DE USUARIO (10 puntos)\n// - Men√∫ claro y f√°cil de usar (5 pts)\n// - Mensajes informativos y claros (3 pts)\n// - Validaci√≥n de entrada (2 pts)\n\n// CRITERIOS DE CALIFICACI√ìN:\n// 90-100: Excelente - Supera expectativas\n// 80-89:  Muy Bueno - Cumple todos los requisitos\n// 70-79:  Bueno - Cumple requisitos b√°sicos\n// 60-69:  Suficiente - Funcionalidad limitada\n// <60:    Insuficiente - No cumple requisitos\n\n// ENTREGABLES:\n// 1. C√≥digo fuente (.cpp)\n// 2. Archivo README.txt con:\n//    - Instrucciones de compilaci√≥n\n//    - C√≥mo usar el programa\n//    - Funcionalidades implementadas\n//    - Problemas conocidos (si hay)\n// 3. Archivos de datos de prueba (si aplica)",
                "mindmap-evaluation.png",
                "interactive-rubric-checker",
                Arrays.asList(
                        new CodeExplanation(1, "Funcionalidad", "Lo m√°s importante: que funcione"),
                        new CodeExplanation(2, "Conceptos", "Demuestra lo aprendido en el curso"),
                        new CodeExplanation(3, "Calidad", "C√≥digo limpio y mantenible"),
                        new CodeExplanation(4, "UX", "Experiencia del usuario"),
                        new CodeExplanation(5, "Documentaci√≥n", "README explica el proyecto")
                )
        );
        content9_1_4.setLesson(lesson9_1_4);
      
        lesson9_1_4.setContent(content9_1_4);
        lessonService.save(lesson9_1_4);        

        System.out.println("‚úÖ Curso de C++ creado exitosamente con todos los m√≥dulos, temas y lecciones");
    }

    //----------------------------------------------------------------
    // M√©todos auxiliares para crear entidades
    private ModuleModel createModule(String title, String description, String duration, Integer points, Integer progress, Boolean completed) {
        return ModuleModel.builder()
                .title(title)
                .description(description)
                .duration(duration)
                .points(points)
                .progress(progress)
                .completed(completed)
                .build();
    }

    private Topic createTopic(String title, Boolean completed) {
        return Topic.builder()
                .title(title)
                .completed(completed)
                .build();
    }

    private Lesson createLesson(String title, String duration, Boolean completed, Boolean isPreview) {
        return Lesson.builder()
                .title(title)
                .duration(duration)
                .completed(completed)
                .isPreview(isPreview)
                .build();
    }

    private LessonContent createLessonContent(String video, String audio, String document, String code,
            String mindmap, String interactive, List<CodeExplanation> explanations) {
        LessonContent content = LessonContent.builder()
                .video(video)
                .audio(audio)
                .document(document)
                .code(code)
                .mindmap(mindmap)
                .interactive(interactive)
                .codeExplanations(explanations)
                .build();

        return content;
    }

    private Course createCourse(String title, String desc, String cat, String level, Double rating,
            String duration, Integer students, Integer lessons, Integer completedLessons,
            String nextLesson, String thumbnail, String image, String price, String originalPrice,
            Integer xp, Boolean isNew, Boolean isTrending, Course.CourseStatus status,
            List<String> learningPoints, List<String> requirements, List<String> tags,
            Instructor instructor) {

        Course c = new Course();
        c.setImage(image);
        c.setTitle(title);
        c.setDescription(desc);
        c.setCategory(cat);
        c.setLevel(level);
        c.setRating(rating);
        c.setDuration(duration);
        c.setStudents(students);
        c.setLessons(lessons);
        c.setCompletedLessons(completedLessons);
        c.setNextLesson(nextLesson);
        c.setThumbnail(thumbnail);
        c.setPrice(price);
        c.setOriginalPrice(originalPrice);
        c.setXp(xp);
        c.setIsNew(isNew);
        c.setIsTrending(isTrending);
        c.setStatus(status);
        c.setLearningPoints(learningPoints);
        c.setRequirements(requirements);
        c.setTags(tags);
        c.setTotalPoints(xp);
        c.setDifficulty(level);

        // Asignar el instructor directamente (ya est√° attached porque viene de la lista)
        c.setInstructor(instructor);

        return c;
    }

    private void initExamResults() {
        List<ExamResults> results = Arrays.asList(
                createExamResult(95.0, 20, 19, "45:30", true),
                createExamResult(78.5, 30, 24, "62:15", true),
                createExamResult(88.0, 25, 22, "55:40", true),
                createExamResult(92.5, 40, 37, "89:20", true),
                createExamResult(65.0, 20, 13, "38:50", false),
                createExamResult(100.0, 15, 15, "25:10", true),
                createExamResult(82.0, 50, 41, "105:45", true),
                createExamResult(75.5, 30, 23, "67:30", true)
        );
        results.forEach(examResultsService::save);
    }

    private ExamResults createExamResult(Double score, Integer total, Integer correct, String time, Boolean passed) {
        ExamResults er = new ExamResults();
        er.setScore(score);
        er.setTotalQuestions(total);
        er.setCorrectAnswers(correct);
        er.setTimeSpent(time);
        er.setPassed(passed);
        return er;
    }

    private void initFeaturedUsers() {
        List<FeaturedUser> users = Arrays.asList(
                createFeaturedUser("CodeMaster_92", "üë®‚Äçüíª", "Diamante", 15420, "üèÜüî•üíé", true),
                createFeaturedUser("DevQueen", "üë©‚Äçüíª", "Platino", 12350, "‚≠êüéØüöÄ", true),
                createFeaturedUser("AlgoWizard", "üßô‚Äç‚ôÇÔ∏è", "Oro", 9870, "‚ú®üí°üèÖ", false),
                createFeaturedUser("ByteNinja", "ü•∑", "Platino", 11240, "‚ö°üéñÔ∏èüî±", true),
                createFeaturedUser("ReactGuru", "üë®‚Äçüè´", "Diamante", 14580, "‚öõÔ∏èüèÜüëë", false),
                createFeaturedUser("PythonQueen", "üë∏", "Oro", 10120, "üêçüíé‚ú®", true),
                createFeaturedUser("DataNinja", "üìä", "Platino", 12670, "üìà‚ö°üèÜ", true),
                createFeaturedUser("CloudMaster", "‚òÅÔ∏è", "Diamante", 13340, "‚òÅÔ∏èüëëüíé", true)
        );
        users.forEach(featuredUserService::save);
    }

    private FeaturedUser createFeaturedUser(String name, String avatar, String level, Integer points, String badges, Boolean online) {
        FeaturedUser fu = new FeaturedUser();
        fu.setName(name);
        fu.setAvatar(avatar);
        fu.setLevel(level);
        fu.setPoints(points);
        fu.setBadges(badges);
        fu.setOnline(online);
        return fu;
    }

    private void initLearningMethods() {
        List<LearningMethod> methods = Arrays.asList(
                createLearningMethod("video", "Video Tutoriales", "üé•", "#3B82F6", "Aprende viendo tutoriales paso a paso con ejemplos pr√°cticos"),
                createLearningMethod("audio", "Podcasts y Audio", "üéß", "#10B981", "Escucha lecciones mientras haces otras actividades"),
                createLearningMethod("text", "Lectura y Documentaci√≥n", "üìö", "#F59E0B", "Lee documentaci√≥n t√©cnica y art√≠culos detallados"),
                createLearningMethod("practice", "Pr√°ctica de C√≥digo", "üíª", "#8B5CF6", "Aprende haciendo: escribe c√≥digo y resuelve problemas"),
                createLearningMethod("interactive", "Ejercicios Interactivos", "üéÆ", "#EF4444", "Completa desaf√≠os interactivos y gamificados"),
                createLearningMethod("project", "Proyectos Reales", "üöÄ", "#06B6D4", "Construye proyectos completos del mundo real"),
                createLearningMethod("visual", "Diagramas y Mapas", "üó∫Ô∏è", "#EC4899", "Visualiza conceptos con diagramas y mapas mentales"),
                createLearningMethod("ai", "Tutor con IA", "ü§ñ", "#6366F1", "Obt√©n ayuda instant√°nea de un tutor con inteligencia artificial")
        );
        methods.forEach(learningMethodService::save);
    }

    private LearningMethod createLearningMethod(String id, String name, String icon, String color, String desc) {
        LearningMethod lm = new LearningMethod();
        lm.setId(id);
        lm.setName(name);
        lm.setIcon(icon);
        lm.setColor(color);
        lm.setDescription(desc);
        return lm;
    }

    private void initMenuItems() {
        List<MenuItem> items = Arrays.asList(
                createMenuItem("dashboard", "Dashboard", "üè†", "/dashboard", null, false),
                createMenuItem("courses", "Mis Cursos", "üìö", "/courses", 3, false),
                createMenuItem("projects", "Proyectos", "üöÄ", "/projects", null, true),
                createMenuItem("challenges", "Desaf√≠os", "‚öîÔ∏è", "/challenges", 5, false),
                createMenuItem("career", "Ruta Profesional", "üéØ", "/career", null, false),
                createMenuItem("community", "Comunidad", "üë•", "/community", 12, false),
                createMenuItem("achievements", "Logros", "üèÜ", "/achievements", null, false),
                createMenuItem("premium", "Premium", "üíé", "/premium", null, true)
        );
        items.forEach(menuItemService::save);
    }

    private MenuItem createMenuItem(String id, String label, String icon, String path, Integer badge, Boolean isNew) {
        MenuItem mi = new MenuItem();
        mi.setId(id);
        mi.setLabel(label);
        mi.setIcon(icon);
        mi.setPath(path);
        mi.setBadge(badge);
        mi.setIsNew(isNew);
        return mi;
    }

    private OptionForm createOptionForm(String title, String description, String icon, String learningStyle) {
        OptionForm of = new OptionForm();
        of.setTitle(title);
        of.setDescription(description);
        of.setIcon(icon);
        of.setLearningStyle(learningStyle);
        return of;
    }

    private void initPowers() {
        List<Power> powers = Arrays.asList(
                createPower("Doble XP", "Duplica los puntos de experiencia ganados", 4.99, "24 horas", 1, false, true, "#FFD700", "‚ö°", 24),
                createPower("Racha Congelada", "Protege tu racha de aprendizaje por un d√≠a", 2.99, "Uso √∫nico", 3, false, true, "#00CED1", "‚ùÑÔ∏è", 20),
                createPower("Pista del Mentor", "Obt√©n una pista valiosa en cualquier desaf√≠o", 1.99, "Uso √∫nico", 5, true, false, "#FF6B6B", "üí°", 18),
                createPower("Revisi√≥n Instant√°nea", "Recibe feedback inmediato de tu c√≥digo", 3.99, "3 usos", 0, false, false, "#9D4EDD", "‚úÖ", 22),
                createPower("Energ√≠a Infinita", "Sin l√≠mite de intentos en desaf√≠os", 9.99, "7 d√≠as", 0, false, true, "#FF9800", "‚ôæÔ∏è", 26),
                createPower("Boost de Velocidad", "Reduce el tiempo de espera en lecciones", 5.99, "48 horas", 2, true, false, "#4CAF50", "üöÄ", 20),
                createPower("Escudo de Protecci√≥n", "Evita perder puntos por respuestas incorrectas", 6.99, "24 horas", 1, false, false, "#2196F3", "üõ°Ô∏è", 24),
                createPower("Visi√≥n del C√≥digo", "Muestra soluciones ejemplares de otros usuarios", 7.99, "5 usos", 0, false, true, "#E91E63", "üëÅÔ∏è", 22)
        );
        powers.forEach(powerService::save);
    }

    private Power createPower(String name, String desc, Double price, String duration, Integer uses, Boolean owned, Boolean featured, String color, String icon, Integer iconSize) {
        Power p = new Power();
        p.setName(name);
        p.setDescription(desc);
        p.setPrice(price);
        p.setDuration(duration);
        p.setUses(uses);
        p.setOwned(owned);
        p.setIsFeatured(featured);
        p.setColor(color);
        p.setIcon(icon);
        p.setIconSize(iconSize);
        return p;
    }

    private void initPremiumPlans() {
        List<PremiumPlan> plans = Arrays.asList(
                createPremiumPlan("B√°sico", "Perfecto para comenzar tu viaje", "$9.99", "mes", null, false,
                        Arrays.asList("Acceso a cursos b√°sicos", "5 proyectos guiados", "Chat con IA limitado", "Certificado de finalizaci√≥n")),
                createPremiumPlan("Pro", "Para estudiantes serios", "$19.99", "mes", "Ahorra 20%", true,
                        Arrays.asList("Acceso a todos los cursos", "Proyectos ilimitados", "Chat con IA ilimitado", "Revisi√≥n de c√≥digo por mentores", "Certificados verificados", "Sin anuncios")),
                createPremiumPlan("Elite", "M√°xima experiencia de aprendizaje", "$39.99", "mes", "Ahorra 30%", false,
                        Arrays.asList("Todo lo de Pro", "Mentor√≠a 1-a-1", "Preparaci√≥n para entrevistas", "Acceso a workshops exclusivos", "Portfolio profesional", "Prioridad en soporte")),
                createPremiumPlan("Estudiante", "Precio especial para estudiantes", "$7.99", "mes", "Descuento 40%", false,
                        Arrays.asList("Acceso a cursos principales", "10 proyectos", "Chat con IA", "Certificados", "Verificaci√≥n de estudiante requerida")),
                createPremiumPlan("Anual Pro", "El mejor valor del a√±o", "$199.99", "a√±o", "Ahorra $40", true,
                        Arrays.asList("Todo lo de Pro", "2 meses gratis", "Acceso anticipado a cursos", "Eventos exclusivos")),
                createPremiumPlan("Empresarial", "Para equipos de desarrollo", "$299.99", "mes", "5-20 usuarios", false,
                        Arrays.asList("Todo lo de Elite", "Dashboard de equipo", "Reportes de progreso", "Contenido personalizado", "Soporte prioritario 24/7")),
                createPremiumPlan("Lifetime", "Acceso de por vida", "$999.99", "√∫nico", "Pago √∫nico", false,
                        Arrays.asList("Acceso ilimitado de por vida", "Todos los cursos futuros", "Mentor√≠a incluida", "Sin renovaciones")),
                createPremiumPlan("Trial", "Prueba gratuita", "$0.00", "14 d√≠as", "Sin tarjeta", false,
                        Arrays.asList("Prueba todas las funciones Pro", "14 d√≠as gratis", "Cancela cuando quieras", "Sin compromiso"))
        );
        plans.forEach(premiumPlanService::save);
    }

    private PremiumPlan createPremiumPlan(String name, String desc, String price, String period, String savings, Boolean recommended, List<String> features) {
        PremiumPlan pp = new PremiumPlan();
        pp.setName(name);
        pp.setDescription(desc);
        pp.setPrice(price);
        pp.setPeriod(period);
        pp.setSavings(savings);
        pp.setRecommended(recommended);
        pp.setFeatures(features);
        return pp;
    }

    private void initProducts() {
        List<Product> products = Arrays.asList(
                createProduct("Avatar Legendario: Drag√≥n", "Avatar exclusivo con efectos animados", 299.99, "Avatar", "Legendario", false, true, "dragon-avatar.png", "#FF6B6B", "üêâ", 32),
                createProduct("Tema Oscuro Premium", "Tema personalizado para la interfaz", 49.99, "Tema", "√âpico", true, false, "dark-theme.png", "#1a1a2e", "üåô", 24),
                createProduct("Marco Dorado", "Marco especial para tu perfil", 79.99, "Marco", "Raro", false, false, "golden-frame.png", "#FFD700", "üñºÔ∏è", 28),
                createProduct("Boost XP Permanente +10%", "Gana 10% m√°s XP en todas las actividades", 199.99, "Boost", "√âpico", false, true, "xp-boost.png", "#00FF88", "‚ö°", 26),
                createProduct("Insignia de Fundador", "Insignia especial de los primeros usuarios", 499.99, "Insignia", "M√≠tico", false, true, "founder-badge.png", "#9D4EDD", "üëë", 30),
                createProduct("Pack de Emojis Coding", "30 emojis exclusivos de programaci√≥n", 29.99, "Emojis", "Com√∫n", true, false, "emoji-pack.png", "#F59E0B", "üòé", 20),
                createProduct("Certificado Hologr√°fico", "Certificado con efecto hologr√°fico", 149.99, "Certificado", "Legendario", false, false, "holo-cert.png", "#00CED1", "üìú", 28),
                createProduct("Mascota Virtual: Bytey", "Mascota que te acompa√±a mientras programas", 89.99, "Mascota", "√âpico", false, true, "bytey.png", "#4CAF50", "ü§ñ", 26)
        );
        products.forEach(productService::save);
    }

    private Product createProduct(String name, String desc, Double price, String type, String rarity, Boolean owned, Boolean featured, String image, String color, String icon, Integer iconSize) {
        Product p = new Product();
        p.setName(name);
        p.setDescription(desc);
        p.setPrice(price);
        p.setType(type);
        p.setRarity(rarity);
        p.setOwned(owned);
        p.setIsFeatured(featured);
        p.setImage(image);
        p.setColor(color);
        p.setIcon(icon);
        p.setIconSize(iconSize);
        return p;
    }

    private void initProjects() {
        List<Project> projects = Arrays.asList(
                createProject("Sistema de Gesti√≥n de Reservas de Hotel", "Aplicaci√≥n web completa para gestionar reservas",
                        "Desarrolla un sistema completo de reservas con autenticaci√≥n, pagos y panel administrativo",
                        Project.ProjectType.GUIADO, Project.Difficulty.INTERMEDIO, "40 horas", 1200, 800, 400, true, 45, Project.ProjectStatus.EN_PROGRESO),
                createProject("Red Social para Desarrolladores", "Plataforma estilo LinkedIn para programadores",
                        "Crea una red social con perfiles, posts, mensajer√≠a y sistema de conexiones",
                        Project.ProjectType.LIBRE, Project.Difficulty.AVANZADO, "60 horas", 1800, 1200, 600, true, 0, Project.ProjectStatus.NO_INICIADO),
                createProject("API de E-commerce con Microservicios", "Backend escalable para tienda online",
                        "Implementa una arquitectura de microservicios con Docker y Kubernetes",
                        Project.ProjectType.DESAFIO_IA, Project.Difficulty.EXPERTO, "80 horas", 2500, 1800, 700, true, 20, Project.ProjectStatus.EN_PROGRESO),
                createProject("App M√≥vil de Fitness Tracker", "Aplicaci√≥n m√≥vil multiplataforma",
                        "Desarrolla una app de seguimiento de ejercicios con gr√°ficas y notificaciones",
                        Project.ProjectType.GUIADO, Project.Difficulty.INTERMEDIO, "35 horas", 1000, 700, 300, false, 60, Project.ProjectStatus.EN_PROGRESO),
                createProject("Dashboard Anal√≠tico con Visualizaciones", "Panel de control con D3.js y Chart.js",
                        "Crea visualizaciones interactivas de datos en tiempo real",
                        Project.ProjectType.LIBRE, Project.Difficulty.INTERMEDIO, "25 horas", 800, 600, 200, false, 100, Project.ProjectStatus.COMPLETADO),
                createProject("Chatbot con IA y NLP", "Asistente virtual inteligente",
                        "Construye un chatbot usando t√©cnicas de procesamiento de lenguaje natural",
                        Project.ProjectType.DESAFIO_IA, Project.Difficulty.AVANZADO, "50 horas", 1500, 1000, 500, true, 0, Project.ProjectStatus.NO_INICIADO),
                createProject("Sistema de Blog con CMS", "Blog profesional con panel de administraci√≥n",
                        "Desarrolla un CMS completo con editor rich text y gesti√≥n de medios",
                        Project.ProjectType.GUIADO, Project.Difficulty.PRINCIPIANTE, "30 horas", 700, 500, 200, false, 75, Project.ProjectStatus.EN_PROGRESO),
                createProject("Plataforma de Streaming de Video", "Clone de YouTube/Netflix",
                        "Crea una plataforma de streaming con transcoding y CDN",
                        Project.ProjectType.COLABORATIVO, Project.Difficulty.EXPERTO, "100 horas", 3000, 2000, 1000, true, 15, Project.ProjectStatus.EN_PROGRESO)
        );
        projects.forEach(projectService::save);
    }

    private Project createProject(String title, String subtitle, String desc, Project.ProjectType type,
            Project.Difficulty difficulty, String duration, Integer totalXP, Integer baseXP,
            Integer bonusXP, Boolean iaEval, Integer progress, Project.ProjectStatus status) {
        Project p = new Project();
        p.setTitle(title);
        p.setSubtitle(subtitle);
        p.setDescription(desc);
        p.setType(type);
        p.setDifficulty(difficulty);
        p.setDuration(duration);
        p.setTotalXP(totalXP);
        p.setBaseXP(baseXP);
        p.setBonusXP(bonusXP);
        p.setIaEvaluation(iaEval);
        p.setProgress(progress);
        p.setStatus(status);
        return p;
    }

    private void initQuestions() {
        List<Question> questions = Arrays.asList(
                createQuestion("¬øQu√© es una variable?", "Una variable es un espacio en memoria para almacenar datos", Question.QuestionType.TEORICA,
                        Arrays.asList("Un espacio de memoria", "Una funci√≥n", "Una clase", "Un m√©todo"),
                        "Un espacio de memoria", null, null, "Las variables son contenedores que almacenan valores en la memoria del programa", false),
                createQuestion("Implementa FizzBuzz", "Escribe una funci√≥n que imprima FizzBuzz", Question.QuestionType.PRACTICA,
                        null, "function fizzbuzz(n) { /* c√≥digo */ }", null,
                        "function fizzbuzz(n) {\n  // Tu c√≥digo aqu√≠\n}",
                        "Recuerda: Fizz para m√∫ltiplos de 3, Buzz para 5, FizzBuzz para ambos", false),
                createQuestion("¬øCu√°l es la complejidad de b√∫squeda binaria?", "Selecciona la respuesta correcta", Question.QuestionType.TEORICA,
                        Arrays.asList("O(n)", "O(log n)", "O(n¬≤)", "O(1)"),
                        "O(log n)", null, null, "B√∫squeda binaria divide el espacio de b√∫squeda a la mitad en cada paso", false),
                createQuestion("Invertir una cadena", "Escribe c√≥digo para invertir una cadena", Question.QuestionType.PRACTICA,
                        null, "def reverse_string(s): # c√≥digo", null,
                        "def reverse_string(s):\n    # Tu c√≥digo aqu√≠\n    pass",
                        "Puedes usar slicing [::-1] o un bucle", false),
                createQuestion("¬øQu√© es REST?", "Explica qu√© es una API REST", Question.QuestionType.TEORICA,
                        Arrays.asList("Un estilo arquitect√≥nico", "Un lenguaje", "Una base de datos", "Un framework"),
                        "Un estilo arquitect√≥nico", null, null, "REST es un estilo de arquitectura para servicios web que usa HTTP", false),
                createQuestion("Encuentra el n√∫mero mayor", "Implementa una funci√≥n que encuentre el m√°ximo en un array", Question.QuestionType.PRACTICA,
                        null, "function findMax(arr) { /* c√≥digo */ }", null,
                        "function findMax(arr) {\n  // Tu c√≥digo aqu√≠\n}",
                        "Puedes usar Math.max() o iterar el array", false),
                createQuestion("¬øQu√© es SQL Injection?", "Define qu√© es SQL Injection", Question.QuestionType.TEORICA,
                        Arrays.asList("Vulnerabilidad de seguridad", "Tipo de base de datos", "Lenguaje de consulta", "Framework"),
                        "Vulnerabilidad de seguridad", null, null, "SQL Injection es cuando c√≥digo malicioso se inserta en consultas SQL", false),
                createQuestion("Validar un email", "Crea una funci√≥n que valide un email", Question.QuestionType.PRACTICA,
                        null, "function validateEmail(email) { /* c√≥digo */ }", null,
                        "function validateEmail(email) {\n  // Tu c√≥digo aqu√≠ con regex\n}",
                        "Usa expresiones regulares para validar el formato", true)
        );
        questions.forEach(questionService::save);
    }

    private Question createQuestion(String title, String text, Question.QuestionType type, List<String> options,
            String correctAnswer, String userAnswer, String codeTemplate, String explanation, Boolean flagged) {
        Question q = new Question();
        q.setTitle(title);
        q.setText(text);
        q.setType(type);
        q.setOptions(options);
        q.setCorrectAnswer(correctAnswer);
        q.setUserAnswer(userAnswer);
        q.setCodeTemplate(codeTemplate);
        q.setExplanation(explanation);
        q.setFlagged(flagged);
        return q;
    }

    private void initQuestionForms() {
        List<QuestionForm> forms = Arrays.asList(
                createQuestionForm("Cuando aprendes algo nuevo, ¬øqu√© m√©todo prefieres?", null, Arrays.asList(
                        createOptionForm("Ver demostraciones", "Prefiero ver c√≥mo se hace antes de intentarlo yo mismo", "üëÄ", "Visual"),
                        createOptionForm("Leer instrucciones", "Me gusta leer y entender la teor√≠a primero", "üìñ", "Lectura"),
                        createOptionForm("Practicar directamente", "Aprendo mejor haciendo y experimentando", "üîß", "Kinest√©sico"),
                        createOptionForm("Escuchar explicaciones", "Prefiero que me expliquen verbalmente", "üéß", "Auditivo")
                )),
                createQuestionForm("¬øC√≥mo organizas tu tiempo de estudio?", null, Arrays.asList(
                        createOptionForm("Horarios fijos", "Prefiero estudiar a la misma hora todos los d√≠as", "‚è∞", "Estructurado"),
                        createOptionForm("Cuando tengo inspiraci√≥n", "Estudio cuando me siento motivado y concentrado", "üí°", "Flexible"),
                        createOptionForm("Por objetivos", "Planifico en base a metas espec√≠ficas a alcanzar", "üéØ", "Orientado a metas"),
                        createOptionForm("Intensivo", "Prefiero sesiones largas y profundas", "‚ö°", "Inmersivo")
                )),
                createQuestionForm("¬øQu√© tipo de material te resulta m√°s √∫til?", null, Arrays.asList(
                        createOptionForm("Diagramas y mapas mentales", "Me ayudan a ver las conexiones entre conceptos", "üó∫Ô∏è", "Visual"),
                        createOptionForm("Textos y apuntes", "Prefiero material escrito detallado", "üìù", "Lectura"),
                        createOptionForm("Ejercicios pr√°cticos", "Aprendo resolviendo problemas reales", "üß©", "Kinest√©sico"),
                        createOptionForm("Podcasts y audios", "Puedo aprender mientras hago otras actividades", "üéôÔ∏è", "Auditivo")
                )),
                createQuestionForm("¬øC√≥mo prefieres recibir feedback?", null, Arrays.asList(
                        createOptionForm("Ver ejemplos corregidos", "Comparar mi trabajo con soluciones modelo", "üëÅÔ∏è", "Visual"),
                        createOptionForm("Comentarios escritos", "Prefiero feedback detallado por escrito", "‚úçÔ∏è", "Lectura"),
                        createOptionForm("Pr√°ctica guiada", "Que me muestren c√≥mo mejorar en el momento", "ü§ù", "Kinest√©sico"),
                        createOptionForm("Conversaciones", "Discutir mis progresos verbalmente", "üí¨", "Auditivo")
                )),
                createQuestionForm("¬øQu√© ambiente te ayuda m√°s a concentrarte?", null, Arrays.asList(
                        createOptionForm("Espacio ordenado y visual", "Me concentro mejor en ambientes organizados", "üßπ", "Visual"),
                        createOptionForm("Silencio absoluto", "Necesito eliminar distracciones auditivas", "ü§´", "Lectura"),
                        createOptionForm("Poder moverme", "Me ayuda cambiar de postura o lugar", "üö∂", "Kinest√©sico"),
                        createOptionForm("M√∫sica de fondo", "El sonido ambiental me ayuda a concentrarme", "üéµ", "Auditivo")
                )),
                createQuestionForm("¬øC√≥mo abordas un tema complejo?", null, Arrays.asList(
                        createOptionForm("Dividiendo en partes", "Desgloso el problema en componentes m√°s peque√±os", "üß©", "Anal√≠tico"),
                        createOptionForm("Buscando el panorama general", "Primero entiendo el concepto global", "üåÖ", "Global"),
                        createOptionForm("Probando con ejemplos", "Experimentando con casos pr√°cticos", "üîç", "Experimental"),
                        createOptionForm("Preguntando a otros", "Discutiendo el tema con compa√±eros", "üë•", "Social")
                )),
                createQuestionForm("¬øQu√© tipo de proyectos disfrutas m√°s?", null, Arrays.asList(
                        createOptionForm("Dise√±o visual", "Crear interfaces y experiencias visuales", "üé®", "Visual"),
                        createOptionForm("Investigaci√≥n te√≥rica", "Profundizar en conceptos y teor√≠as", "üî¨", "Lectura"),
                        createOptionForm("Construcci√≥n manual", "Armar cosas con las manos o c√≥digo", "üõ†Ô∏è", "Kinest√©sico"),
                        createOptionForm("Presentaciones orales", "Explicar ideas verbalmente", "üé§", "Auditivo")
                )),
                createQuestionForm("¬øC√≥mo tomas apuntes?", null, Arrays.asList(
                        createOptionForm("Con colores y dibujos", "Uso elementos visuales para organizar ideas", "üñçÔ∏è", "Visual"),
                        createOptionForm("Texto estructurado", "Listas y p√°rrafos organizados", "üìë", "Lectura"),
                        createOptionForm("Notas breves", "Apunto solo lo esencial y pr√°ctico", "üìå", "Kinest√©sico"),
                        createOptionForm("Grabaciones", "Prefiero grabar y escuchar despu√©s", "üéôÔ∏è", "Auditivo")
                )),
                createQuestionForm("¬øC√≥mo manejas los errores al aprender?", null, Arrays.asList(
                        createOptionForm("Analizando visualmente", "Reviso d√≥nde me equivoqu√© paso a paso", "üîé", "Visual"),
                        createOptionForm("Buscando en documentaci√≥n", "Consulto fuentes escritas para entender", "üìö", "Lectura"),
                        createOptionForm("Intentando de nuevo", "Pr√°ctico hasta que sale bien", "üîÑ", "Kinest√©sico"),
                        createOptionForm("Pidiendo explicaci√≥n", "Pregunto a alguien que me lo explique", "‚ùì", "Auditivo")
                )),
                createQuestionForm("¬øQu√© te motiva a seguir aprendiendo?", null, Arrays.asList(
                        createOptionForm("Ver progreso visual", "Gr√°ficos y m√©tricas de mi avance", "üìä", "Visual"),
                        createOptionForm("Lograr certificaciones", "Obtener reconocimientos formales", "üèÜ", "Lectura"),
                        createOptionForm("Resolver problemas reales", "Aplicar lo aprendido en proyectos", "üíº", "Kinest√©sico"),
                        createOptionForm("Compartir conocimiento", "Ense√±ar a otros lo que he aprendido", "üó£Ô∏è", "Auditivo")
                ))
        );

        forms.forEach(questionFormService::save);
    }

    private QuestionForm createQuestionForm(String question, String subtitle, List<OptionForm> options) {
        QuestionForm qf = new QuestionForm();
        qf.setAnswer("");
        qf.setQuestion(question);
        options.forEach(o -> o.setQuestionForm(qf));

        if (options != null) {
            qf.setOptions(options);
        }

        return qf;
    }

    private void initRequirements() {
        List<Requirement> requirements = Arrays.asList(
                createRequirement("Conocimientos b√°sicos de HTML y CSS", Requirement.RequirementType.CONOCIMIENTO, Requirement.RequirementStatus.COMPLETADO, 1L),
                createRequirement("Completar curso de JavaScript B√°sico", Requirement.RequirementType.CURSO, Requirement.RequirementStatus.COMPLETADO, 2L),
                createRequirement("Entender programaci√≥n orientada a objetos", Requirement.RequirementType.CONOCIMIENTO, Requirement.RequirementStatus.EN_PROGRESO, 3L),
                createRequirement("Matem√°ticas b√°sicas y √°lgebra", Requirement.RequirementType.CONOCIMIENTO, Requirement.RequirementStatus.COMPLETADO, null),
                createRequirement("Completar curso de Python Fundamentals", Requirement.RequirementType.CURSO, Requirement.RequirementStatus.PENDIENTE, 5L),
                createRequirement("Habilidad para resolver problemas l√≥gicos", Requirement.RequirementType.HABILIDAD, Requirement.RequirementStatus.COMPLETADO, null),
                createRequirement("Conocimientos de bases de datos SQL", Requirement.RequirementType.CONOCIMIENTO, Requirement.RequirementStatus.EN_PROGRESO, 7L),
                createRequirement("Completar proyecto de API REST", Requirement.RequirementType.CURSO, Requirement.RequirementStatus.PENDIENTE, 4L)
        );
        requirements.forEach(requirementService::save);
    }

    private Requirement createRequirement(String desc, Requirement.RequirementType type, Requirement.RequirementStatus status, Long courseId) {
        Requirement r = new Requirement();
        r.setDescription(desc);
        r.setType(type);
        r.setStatus(status);
        r.setCourseId(courseId);
        return r;
    }

    private void initResources() {
        List<ResourceModel> resources = Arrays.asList(
                createResource("Documentaci√≥n Oficial de React", "Gu√≠a completa y actualizada de React", "üìÑ", ResourceModel.ResourceType.DOCUMENTO, "https://react.dev"),
                createResource("Tutorial de Git en Video", "Aprende Git desde cero en 1 hora", "üé•", ResourceModel.ResourceType.VIDEO, "https://youtube.com/git-tutorial"),
                createResource("Repositorio de Ejercicios de Algoritmos", "500+ problemas resueltos en GitHub", "üíª", ResourceModel.ResourceType.REPOSITORIO, "https://github.com/algorithms"),
                createResource("Art√≠culo: Clean Code Principles", "Principios para escribir c√≥digo limpio", "üìù", ResourceModel.ResourceType.ARTICULO, "https://blog.com/clean-code"),
                createResource("Documentaci√≥n de PostgreSQL", "Referencia completa de PostgreSQL", "üìÑ", ResourceModel.ResourceType.DOCUMENTO, "https://postgresql.org/docs"),
                createResource("Curso de Docker en YouTube", "Serie completa de Docker y contenedores", "üé•", ResourceModel.ResourceType.VIDEO, "https://youtube.com/docker-course"),
                createResource("Awesome Python Resources", "Lista curada de recursos de Python", "üíª", ResourceModel.ResourceType.REPOSITORIO, "https://github.com/awesome-python"),
                createResource("Art√≠culo: Microservices Architecture", "Gu√≠a de arquitectura de microservicios", "üìù", ResourceModel.ResourceType.ARTICULO, "https://blog.com/microservices")
        );
        resources.forEach(resourceService::save);
    }

    private ResourceModel createResource(String title, String desc, String icon, ResourceModel.ResourceType type, String url) {
        ResourceModel r = new ResourceModel();
        r.setTitle(title);
        r.setDescription(desc);
        r.setIcon(icon);
        r.setType(type);
        r.setUrl(url);
        return r;
    }

    private void initSkills() {
        List<Skill> skills = Arrays.asList(
                createSkill("JavaScript", 85, 100, Skill.SkillCategory.TECNICA),
                createSkill("Python", 75, 90, Skill.SkillCategory.TECNICA),
                createSkill("React", 70, 85, Skill.SkillCategory.TECNICA),
                createSkill("SQL", 60, 80, Skill.SkillCategory.TECNICA),
                createSkill("Trabajo en Equipo", 80, 90, Skill.SkillCategory.BLANDA),
                createSkill("Resoluci√≥n de Problemas", 75, 85, Skill.SkillCategory.BLANDA),
                createSkill("Docker", 50, 75, Skill.SkillCategory.TECNICA),
                createSkill("Comunicaci√≥n", 70, 85, Skill.SkillCategory.BLANDA)
        );
        skills.forEach(skillService::save);
    }

    private Skill createSkill(String name, Integer level, Integer target, Skill.SkillCategory category) {
        Skill s = new Skill();
        s.setName(name);
        s.setCategory(category);
        return s;
    }

    private void initTechnologies() {
        List<Technology> technologies = Arrays.asList(
                createTechnology("React", "‚öõÔ∏è", "Frontend", true),
                createTechnology("Node.js", "üü¢", "Backend", true),
                createTechnology("PostgreSQL", "üêò", "Database", true),
                createTechnology("Docker", "üê≥", "DevOps", false),
                createTechnology("TypeScript", "üî∑", "Language", true),
                createTechnology("MongoDB", "üçÉ", "Database", false),
                createTechnology("AWS", "‚òÅÔ∏è", "Cloud", true),
                createTechnology("Python", "üêç", "Language", true)
        );
        technologies.forEach(technologyService::save);
    }

    private Technology createTechnology(String name, String icon, String category, Boolean required) {
        Technology t = new Technology();
        t.setName(name);
        t.setIcon(icon);
        t.setCategory(category);
        t.setRequired(required);
        return t;
    }

    private void initTestCases() {
        List<TestCase> testCases = Arrays.asList(
                createTestCase("Prueba de entrada vac√≠a", "Verificar comportamiento con string vac√≠o", TestCase.TestCaseStatus.PASADO, TestCase.TestCaseType.AUTOMATICO),
                createTestCase("Prueba de n√∫meros negativos", "Validar manejo de valores negativos", TestCase.TestCaseStatus.PASADO, TestCase.TestCaseType.AUTOMATICO),
                createTestCase("Prueba de caso l√≠mite", "Array con un solo elemento", TestCase.TestCaseStatus.FALLADO, TestCase.TestCaseType.AUTOMATICO),
                createTestCase("Prueba de rendimiento", "Verificar tiempo de ejecuci√≥n con 1M elementos", TestCase.TestCaseStatus.NO_EJECUTADO, TestCase.TestCaseType.PERSONALIZADO),
                createTestCase("Prueba de caracteres especiales", "Validar manejo de Unicode y emojis", TestCase.TestCaseStatus.PASADO, TestCase.TestCaseType.AUTOMATICO),
                createTestCase("Prueba de concurrencia", "M√∫ltiples usuarios simult√°neos", TestCase.TestCaseStatus.PASADO, TestCase.TestCaseType.PERSONALIZADO),
                createTestCase("Prueba de SQL injection", "Verificar protecci√≥n contra inyecci√≥n SQL", TestCase.TestCaseStatus.FALLADO, TestCase.TestCaseType.AUTOMATICO),
                createTestCase("Prueba de memoria", "Validar no hay memory leaks", TestCase.TestCaseStatus.NO_EJECUTADO, TestCase.TestCaseType.PERSONALIZADO)
        );
        testCases.forEach(testCaseService::save);
    }

    private TestCase createTestCase(String title, String desc, TestCase.TestCaseStatus status, TestCase.TestCaseType type) {
        TestCase tc = new TestCase();
        tc.setTitle(title);
        tc.setDescription(desc);
        tc.setStatus(status);
        tc.setType(type);
        return tc;
    }

    private void initTrends() {
        List<Trend> trends = Arrays.asList(
                createTrend("#JavaScript", 15420, true),
                createTrend("#Python", 12350, true),
                createTrend("#React", 10890, true),
                createTrend("#MachineLearning", 9560, true),
                createTrend("#WebDevelopment", 8740, false),
                createTrend("#DataScience", 7320, true),
                createTrend("#Docker", 6150, false),
                createTrend("#Algorithms", 5890, false)
        );
        trends.forEach(trendService::save);
    }

    private Trend createTrend(String tag, Integer posts, Boolean trending) {
        Trend t = new Trend();
        t.setTag(tag);
        t.setPosts(posts);
        t.setTrending(trending);
        return t;
    }

    private void initPosts() {
        List<Post> posts = Arrays.asList(
                createPost("CodeMaster_92", "üë®‚Äçüíª", "Diamante", "Hace 2 horas",
                        "¬°Finalmente complet√© mi proyecto de Sistema de Reservas! üéâ Aprend√≠ much√≠simo sobre autenticaci√≥n JWT y manejo de estados en React. Gracias a todos por el apoyo! üí™",
                        null, 145, false),
                createPost("DevQueen", "üë©‚Äçüíª", "Platino", "Hace 5 horas",
                        "¬øAlguien m√°s est√° luchando con los conceptos de closures en JavaScript? He visto varios tutoriales pero a√∫n me cuesta entenderlo completamente ü§î",
                        null, 67, true),
                createPost("PythonGuru", "üêç", "Oro", "Hace 1 d√≠a",
                        "Acabo de terminar el curso de Machine Learning y WOW! ü§ñ Los algoritmos de clasificaci√≥n son fascinantes. Aqu√≠ va mi primer modelo predictivo:",
                        "ml-model-screenshot.png", 203, false),
                createPost("ReactNinja", "‚öõÔ∏è", "Platino", "Hace 3 horas",
                        "Tip del d√≠a: Siempre usa useCallback y useMemo con cuidado. La optimizaci√≥n prematura puede hacer tu c√≥digo m√°s dif√≠cil de mantener. ¬°Mide primero! üìä",
                        null, 89, true),
                createPost("DataWizard", "üìä", "Diamante", "Hace 6 horas",
                        "Termin√© mi dashboard de visualizaci√≥n de datos! Us√© D3.js para las gr√°ficas interactivas. El proyecto me tom√≥ 3 semanas pero vali√≥ totalmente la pena ‚ú®",
                        "dashboard-preview.png", 178, false),
                createPost("BackendKing", "‚öôÔ∏è", "Oro", "Hace 12 horas",
                        "Pregunta: ¬øCu√°l prefieren para APIs, REST o GraphQL? Estoy evaluando opciones para mi nuevo proyecto y me gustar√≠a escuchar experiencias reales ü§∑‚Äç‚ôÇÔ∏è",
                        null, 92, false),
                createPost("CloudMaster", "‚òÅÔ∏è", "Diamante", "Hace 8 horas",
                        "Acabo de obtener mi certificaci√≥n de AWS Solutions Architect! üèÜ El examen fue desafiante pero todo el estudio vali√≥ la pena. Ahora a por Kubernetes!",
                        "aws-certificate.png", 256, true),
                createPost("SecurityPro", "üîí", "Platino", "Hace 4 horas",
                        "Recordatorio importante: NUNCA almacenes contrase√±as en texto plano. Siempre usa bcrypt, argon2 o similar para hashear. La seguridad no es opcional! üõ°Ô∏è",
                        null, 134, true)
        );
        posts.forEach(postService::save);
    }

    private Post createPost(String user, String avatar, String level, String date, String content,
            String image, Integer likes, Boolean liked) {
        Post p = new Post();
        p.setUser(user);
        p.setAvatar(avatar);
        p.setLevel(level);
        p.setDate(date);
        p.setContent(content);
        p.setImage(image);
        p.setLikes(likes);
        p.setLiked(liked);
        return p;
    }

    private void initProfileUsers() {
        List<UserProfile> users = Arrays.asList(
                createUserProfile(
                        "CodeMaster_92",
                        "üë®‚Äçüíª",
                        15,
                        15420,
                        20000,
                        "Diamante",
                        Arrays.asList(5L),
                        Arrays.asList(1L, 3L, 4L, 8L),
                        Arrays.asList(10L, 15L),
                        Arrays.asList(2L, 3L, 6L, 9L, 17L),
                        Arrays.asList(1L, 3L, 5L),
                        Arrays.asList(1L),
                        Arrays.asList(3L, 6L),
                        Arrays.asList(1L, 4L, 7L),
                        Arrays.asList(1L, 2L, 4L, 7L),
                        Arrays.asList(3L, 6L)
                ),
                createUserProfile(
                        "DevQueen",
                        "üë©‚Äçüíª",
                        12,
                        12350,
                        15000,
                        "Platino",
                        Arrays.asList(5L),
                        Arrays.asList(1L, 4L, 7L),
                        Arrays.asList(10L, 15L, 17L),
                        Arrays.asList(2L, 3L, 9L, 18L),
                        Arrays.asList(2L, 4L, 6L),
                        Arrays.asList(2L),
                        Arrays.asList(1L, 7L),
                        Arrays.asList(2L, 5L, 8L),
                        Arrays.asList(1L, 4L, 6L),
                        Arrays.asList(1L, 4L)
                ),
                createUserProfile(
                        "PythonGuru",
                        "üêç",
                        10,
                        9870,
                        12000,
                        "Oro",
                        Arrays.asList(5L, 7L),
                        Arrays.asList(2L, 3L, 6L),
                        Arrays.asList(2L, 10L, 12L, 15L),
                        Arrays.asList(11L, 13L, 16L, 19L),
                        Arrays.asList(7L, 8L),
                        Arrays.asList(3L),
                        Arrays.asList(5L, 8L),
                        Arrays.asList(3L, 6L),
                        Arrays.asList(1L, 3L, 5L, 8L),
                        Arrays.asList(2L, 5L, 7L)
                ),
                createUserProfile(
                        "ReactNinja",
                        "‚öõÔ∏è",
                        11,
                        11240,
                        14000,
                        "Platino",
                        Arrays.asList(5L),
                        Arrays.asList(1L, 2L, 4L, 8L),
                        Arrays.asList(1L, 3L, 9L, 15L),
                        Arrays.asList(14L, 17L, 18L, 20L),
                        Arrays.asList(1L, 3L, 5L),
                        Arrays.asList(7L),
                        Arrays.asList(1L, 2L, 4L),
                        Arrays.asList(4L, 7L),
                        Arrays.asList(2L, 4L, 7L),
                        Arrays.asList(1L, 3L, 8L)
                ),
                createUserProfile(
                        "CloudMaster",
                        "‚òÅÔ∏è",
                        14,
                        13340,
                        18000,
                        "Diamante",
                        Arrays.asList(5L, 7L),
                        Arrays.asList(3L, 6L, 8L),
                        Arrays.asList(6L, 7L, 10L, 15L, 20L),
                        Arrays.asList(11L, 13L, 16L, 19L),
                        Arrays.asList(2L, 4L, 6L, 8L),
                        Arrays.asList(4L, 8L),
                        Arrays.asList(3L, 5L, 6L),
                        Arrays.asList(5L, 8L),
                        Arrays.asList(4L, 7L, 8L),
                        Arrays.asList(1L, 4L, 5L, 7L)
                )
        );
        users.forEach(userProfileService::save);
    }

    private UserProfile createUserProfile(String name, String avatar, Integer level, Integer xp, Integer maxXp,
            String rank, List<Long> projectsDone, List<Long> projectsInProgress,
            List<Long> coursesDone, List<Long> coursesInProgress, List<Long> reviews,
            List<Long> carrerPathsDone, List<Long> carrerPathsInProgress,
            List<Long> posts, List<Long> badges, List<Long> powers) {
        UserProfile user = new UserProfile();
        user.setName(name);
        user.setAvatar(avatar);
        user.setLevel(level);
        user.setXp(xp);
        user.setMaxXp(maxXp);
        user.setRank(rank);
        return user;
    }
}
