package org.javeriana.codequest.seed;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.javeriana.codequest.entity.Achievement;
import org.javeriana.codequest.entity.Badge;
import org.javeriana.codequest.entity.CareerPath;
import org.javeriana.codequest.entity.Challenge;
import org.javeriana.codequest.entity.ChatMessage;
import org.javeriana.codequest.entity.CodeExplanation;
import org.javeriana.codequest.entity.Course;
import org.javeriana.codequest.entity.ExamResults;
import org.javeriana.codequest.entity.FeaturedUser;
import org.javeriana.codequest.entity.Instructor;
import org.javeriana.codequest.entity.LearningMethod;
import org.javeriana.codequest.entity.MenuItem;
import org.javeriana.codequest.entity.OptionForm;
import org.javeriana.codequest.entity.Post;
import org.javeriana.codequest.entity.Power;
import org.javeriana.codequest.entity.PremiumPlan;
import org.javeriana.codequest.entity.Product;
import org.javeriana.codequest.entity.Project;
import org.javeriana.codequest.entity.Question;
import org.javeriana.codequest.entity.QuestionForm;
import org.javeriana.codequest.entity.Requirement;
import org.javeriana.codequest.entity.ResourceModel;
import org.javeriana.codequest.entity.Skill;
import org.javeriana.codequest.entity.Technology;
import org.javeriana.codequest.entity.TestCase;
import org.javeriana.codequest.entity.Trend;
import org.javeriana.codequest.service.entity.AchievementService;
import org.javeriana.codequest.service.entity.BadgeService;
import org.javeriana.codequest.service.entity.CareerPathService;
import org.javeriana.codequest.service.entity.ChallengeService;
import org.javeriana.codequest.service.entity.ChatMessageService;
import org.javeriana.codequest.service.entity.CodeExplanationService;
import org.javeriana.codequest.service.entity.CommentModelService;
import org.javeriana.codequest.service.entity.CourseService;
import org.javeriana.codequest.service.entity.ExamResultsService;
import org.javeriana.codequest.service.entity.FeaturedUserService;
import org.javeriana.codequest.service.entity.InstructorService;
import org.javeriana.codequest.service.entity.LearningMethodService;
import org.javeriana.codequest.service.entity.MenuItemService;
import org.javeriana.codequest.service.entity.OptionFormService;
import org.javeriana.codequest.service.entity.PostService;
import org.javeriana.codequest.service.entity.PowerService;
import org.javeriana.codequest.service.entity.PremiumPlanService;
import org.javeriana.codequest.service.entity.ProductService;
import org.javeriana.codequest.service.entity.ProjectService;
import org.javeriana.codequest.service.entity.QuestionFormService;
import org.javeriana.codequest.service.entity.QuestionService;
import org.javeriana.codequest.service.entity.RequirementService;
import org.javeriana.codequest.service.entity.ResourceModelService;
import org.javeriana.codequest.service.entity.SkillService;
import org.javeriana.codequest.service.entity.TechnologyService;
import org.javeriana.codequest.service.entity.TestCaseService;
import org.javeriana.codequest.service.entity.TrendService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import jakarta.annotation.PostConstruct;

@Component
@Transactional
public class DatabaseInit {

    @Autowired
    private AchievementService achievementService;

    @Autowired
    private BadgeService badgeService;

    @Autowired
    private CareerPathService careerPathService;

    @Autowired
    private ChallengeService challengeService;

    @Autowired
    private ChatMessageService chatMessageService;

    @Autowired
    private CodeExplanationService codeExplanationService;

    @Autowired
    private CommentModelService commentService;

    @Autowired
    private CourseService courseService;

    @Autowired
    private ExamResultsService examResultsService;

    @Autowired
    private FeaturedUserService featuredUserService;

    @Autowired
    private InstructorService instructorService;

    @Autowired
    private LearningMethodService learningMethodService;

    //@Autowired
    //private LessonService lessonService;
    //@Autowired
    //private LessonContentService lessonContentService;
    @Autowired
    private MenuItemService menuItemService;

    //@Autowired
    //private ModuleModelService moduleService;
    @Autowired
    private OptionFormService optionFormService;
    @Autowired
    private PostService postService;

    @Autowired
    private PowerService powerService;

    @Autowired
    private PremiumPlanService premiumPlanService;

    @Autowired
    private ProductService productService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private QuestionService questionService;

    @Autowired
    private QuestionFormService questionFormService;

    @Autowired
    private RequirementService requirementService;

    @Autowired
    private ResourceModelService resourceService;
    /*
    @Autowired
    private ReviewService reviewService;

    @Autowired
    private RoadmapItemService roadmapItemService;

    @Autowired
    private RoadmapPhaseService roadmapPhaseService;
     */
    @Autowired
    private SkillService skillService;

    @Autowired
    private TechnologyService technologyService;

    @Autowired
    private TestCaseService testCaseService;

//    @Autowired
//    private TopicService topicService;
    @Autowired
    private TrendService trendService;

    @PostConstruct
    public void init() {
        initAchievements();
        initBadges();
        initCareerPaths();
        initChallenges();
        initChatMessages();
        initCodeExplanations();
        initInstructors();
        initCourses();
        initExamResults();
        initFeaturedUsers();
        initLearningMethods();
        initMenuItems();
        initPowers();
        initPremiumPlans();
        initProducts();
        initProjects();
        initQuestions();
        initQuestionForms();
        initRequirements();
        initResources();
        initSkills();
        initTechnologies();
        initTestCases();
        initTrends();
        initPosts();
    }

    private void initAchievements() {
        List<Achievement> achievements = Arrays.asList(
                // Logros iniciales existentes
                createAchievement("Primera Racha", "Mant√©n una racha de aprendizaje por 3 d√≠as consecutivos", "Progreso", Achievement.Rarity.COM√öN, 50, "üî•", false),
                createAchievement("Racha de Fuego", "Mant√©n una racha de aprendizaje por 15 d√≠as consecutivos", "Progreso", Achievement.Rarity.RARO, 200, "üî•", true),
                createAchievement("Maestro de la Racha", "Mant√©n una racha de aprendizaje por 30 d√≠as consecutivos", "Progreso", Achievement.Rarity.√âPICO, 500, "üî•", false),
                createAchievement("Primer Curso", "Completa tu primer curso en CodeQuest", "Cursos", Achievement.Rarity.COM√öN, 100, "üìö", false),
                createAchievement("Estudiante Dedicado", "Completa 5 cursos", "Cursos", Achievement.Rarity.RARO, 300, "üìö", false),
                createAchievement("Primer Proyecto", "Completa tu primer proyecto", "Proyectos", Achievement.Rarity.COM√öN, 150, "üöÄ", false),
                createAchievement("Desaf√≠o Aceptado", "Completa tu primer desaf√≠o de c√≥digo", "Desaf√≠os", Achievement.Rarity.COM√öN, 75, "‚öîÔ∏è", false),
                createAchievement("Colaborador", "Ayuda a 10 compa√±eros en el foro", "Comunidad", Achievement.Rarity.√âPICO, 600, "ü§ù", false),
                // --- Logros adicionales del frontend ---

                // üèÜ Progreso
                createAchievement("Primeros Pasos", "Completa tu primer curso en CodeQuest", "Progreso", Achievement.Rarity.COM√öN, 50, "üéØ", true),
                createAchievement("Aprendiz Dedicado", "Completa 5 cursos diferentes", "Progreso", Achievement.Rarity.COM√öN, 150, "üìö", true),
                createAchievement("Maestro del Conocimiento", "Completa 25 cursos en CodeQuest", "Progreso", Achievement.Rarity.RARO, 500, "üéì", false),
                createAchievement("Leyenda del Aprendizaje", "Completa 100 cursos en la plataforma", "Progreso", Achievement.Rarity.LEGENDARIO, 2500, "üèÜ", false),
                createAchievement("Racha de 7 D√≠as", "Aprende durante 7 d√≠as consecutivos", "Progreso", Achievement.Rarity.COM√öN, 100, "üî•", true),
                createAchievement("Meses de Dedicaci√≥n", "Aprende durante 3 meses consecutivos", "Progreso", Achievement.Rarity.RARO, 750, "üóìÔ∏è", false),
                createAchievement("A√±o de Sabidur√≠a", "Aprende durante 12 meses consecutivos", "Progreso", Achievement.Rarity.LEGENDARIO, 5000, "üåü", false),
                createAchievement("Velocidad del Rayo", "Completa un curso en menos de 24 horas", "Progreso", Achievement.Rarity.√âPICO, 1000, "‚ö°", false),
                createAchievement("Perfeccionista", "Obt√©n 100% en todos los quizzes de un curso", "Progreso", Achievement.Rarity.RARO, 300, "üíØ", true),
                createAchievement("Coleccionista de Cursos", "Inscr√≠bete en 50 cursos diferentes", "Progreso", Achievement.Rarity.√âPICO, 1200, "üì¶", false),
                createAchievement("Explorador del Conocimiento", "Completa cursos en 5 categor√≠as diferentes", "Progreso", Achievement.Rarity.RARO, 400, "üß≠", false),
                createAchievement("Pol√≠mata Digital", "Domina 10 categor√≠as diferentes", "Progreso", Achievement.Rarity.LEGENDARIO, 3000, "üé≠", false),
                createAchievement("Sin Descanso", "Completa 10 horas de aprendizaje continuo", "Progreso", Achievement.Rarity.√âPICO, 800, "‚è≥", false),
                createAchievement("Madrugador del C√≥digo", "Aprende antes de las 6 AM", "Progreso", Achievement.Rarity.RARO, 250, "üåÖ", false),
                createAchievement("Noct√°mbulo Digital", "Aprende despu√©s de la medianoche", "Progreso", Achievement.Rarity.RARO, 250, "üåô", true),
                // üíª Tecnolog√≠a
                createAchievement("Hola Mundo", "Completa tu primer programa en cualquier lenguaje", "Tecnolog√≠a", Achievement.Rarity.COM√öN, 50, "üëã", true),
                createAchievement("Maestro JavaScript", "Domina todos los conceptos avanzados de JavaScript", "Tecnolog√≠a", Achievement.Rarity.√âPICO, 1500, "‚ö°", false),
                createAchievement("Rey de React", "Crea 10 aplicaciones con React", "Tecnolog√≠a", Achievement.Rarity.RARO, 600, "‚öõÔ∏è", false),
                createAchievement("Ninja de Python", "Resuelve 100 problemas con Python", "Tecnolog√≠a", Achievement.Rarity.√âPICO, 1200, "üêç", false),
                createAchievement("Full Stack Developer", "Domina tanto frontend como backend", "Tecnolog√≠a", Achievement.Rarity.LEGENDARIO, 3000, "üöÄ", false),
                createAchievement("Mobile First", "Crea 5 aplicaciones m√≥viles", "Tecnolog√≠a", Achievement.Rarity.RARO, 750, "üì±", false),
                createAchievement("Cloud Architect", "Despliega 10 proyectos en la nube", "Tecnolog√≠a", Achievement.Rarity.√âPICO, 1800, "‚òÅÔ∏è", false),
                createAchievement("Database Master", "Domina 3 sistemas de bases de datos diferentes", "Tecnolog√≠a", Achievement.Rarity.RARO, 900, "üóÑÔ∏è", false),
                createAchievement("DevOps Engineer", "Automatiza el deployment de 5 proyectos", "Tecnolog√≠a", Achievement.Rarity.√âPICO, 1600, "üîß", false),
                createAchievement("AI Explorer", "Completa 3 proyectos de machine learning", "Tecnolog√≠a", Achievement.Rarity.LEGENDARIO, 2500, "ü§ñ", false),
                createAchievement("Blockchain Pioneer", "Crea tu primer smart contract", "Tecnolog√≠a", Achievement.Rarity.√âPICO, 1400, "‚õìÔ∏è", false),
                createAchievement("Game Developer", "Desarrolla 3 videojuegos funcionales", "Tecnolog√≠a", Achievement.Rarity.RARO, 800, "üéÆ", false),
                createAchievement("Security Expert", "Identifica y soluciona 50 vulnerabilidades", "Tecnolog√≠a", Achievement.Rarity.LEGENDARIO, 2800, "üõ°Ô∏è", false),
                createAchievement("IoT Creator", "Conecta 5 dispositivos IoT", "Tecnolog√≠a", Achievement.Rarity.RARO, 700, "üì∂", false),
                createAchievement("Quantum Computing Initiate", "Completa el curso de computaci√≥n cu√°ntica", "Tecnolog√≠a", Achievement.Rarity.M√çTICO, 5000, "‚öõÔ∏è", false)
        );

        achievements.forEach(achievementService::save);
    }

    private Achievement createAchievement(String name, String desc, String cat, Achievement.Rarity rarity, Integer pts, String img, Boolean unlocked) {
        Achievement a = new Achievement();
        a.setName(name);
        a.setDescription(desc);
        a.setCategory(cat);
        a.setRarity(rarity);
        a.setPoints(pts);
        a.setImage(img);
        a.setUnlocked(unlocked);
        a.setRequirements(desc);
        return a;
    }

    private void initBadges() {
        List<Badge> badges = Arrays.asList(
                createBadge("Python Master", "Completa todos los cursos de Python", "üêç", false, 500, "Python"),
                createBadge("JavaScript Ninja", "Domina JavaScript completando todos los cursos avanzados", "‚ö°", false, 500, "JavaScript"),
                createBadge("Java Expert", "Convi√©rtete en experto en Java", "‚òï", false, 500, "Java"),
                createBadge("Web Developer", "Completa la ruta de desarrollo web", "üåê", false, 600, "Web"),
                createBadge("Mobile Developer", "Completa la ruta de desarrollo m√≥vil", "üì±", false, 600, "Mobile"),
                createBadge("Data Scientist", "Completa la ruta de ciencia de datos", "üìä", false, 700, "Data"),
                createBadge("Cloud Expert", "Completa cursos de AWS, Azure y GCP", "‚òÅÔ∏è", false, 600, "Cloud"),
                createBadge("Algorithm Master", "Resuelve 100 problemas de algoritmos", "üßÆ", false, 750, "Algorithms")
        );
        badges.forEach(badgeService::save);
    }

    private Badge createBadge(String name, String desc, String icon, Boolean earned, Integer xp, String cat) {
        Badge b = new Badge();
        b.setName(name);
        b.setDescription(desc);
        b.setIcon(icon);
        b.setEarned(earned);
        b.setXp(xp);
        b.setCategory(cat);
        return b;
    }

    private void initCareerPaths() {
        List<CareerPath> paths = Arrays.asList(
                createCareerPath("Desarrollador Web Full Stack", "Domina frontend y backend",
                        "Aprende a crear aplicaciones web completas desde cero", "üåê", "Full Stack Developer",
                        "Junior", 15000, 5000, 10000, "$40,000 - $120,000",
                        Arrays.asList("Empresas tecnol√≥gicas", "Startups", "Freelance", "Agencias digitales"),
                        Arrays.asList("React", "Node.js", "MongoDB", "Express", "HTML/CSS")),
                createCareerPath("Desarrollador M√≥vil", "Crea apps nativas y multiplataforma",
                        "Domina el desarrollo de aplicaciones m√≥viles para iOS y Android", "üì±", "Mobile Developer",
                        "Junior", 13000, 3000, 10000, "$40,000 - $115,000",
                        Arrays.asList("Apps iOS", "Apps Android", "React Native", "Flutter"),
                        Arrays.asList("React Native", "Swift", "Kotlin", "Firebase", "Flutter")),
                createCareerPath("Cient√≠fico de Datos", "Extrae insights de los datos",
                        "Aprende a analizar datos y crear modelos predictivos", "üìä", "Data Scientist",
                        "Intermediate", 18000, 7000, 11000, "$60,000 - $150,000",
                        Arrays.asList("Machine Learning", "An√°lisis de datos", "Visualizaci√≥n", "Big Data"),
                        Arrays.asList("Python", "R", "Pandas", "Scikit-learn", "TensorFlow")),
                createCareerPath("Ingeniero DevOps", "Automatiza y optimiza infraestructura",
                        "Domina CI/CD, cloud y automatizaci√≥n", "üîß", "DevOps Engineer",
                        "Intermediate", 16000, 6500, 9500, "$55,000 - $140,000",
                        Arrays.asList("CI/CD", "Cloud Infrastructure", "Automatizaci√≥n", "Monitoreo"),
                        Arrays.asList("Docker", "Kubernetes", "Jenkins", "Terraform", "AWS")),
                createCareerPath("Especialista en Ciberseguridad", "Protege sistemas y datos",
                        "Convi√©rtete en experto en seguridad inform√°tica", "üîí", "Security Specialist",
                        "Advanced", 17000, 7500, 9500, "$60,000 - $160,000",
                        Arrays.asList("Pentesting", "Security Audits", "Ethical Hacking", "Compliance"),
                        Arrays.asList("Kali Linux", "Metasploit", "Wireshark", "OWASP", "Python")),
                createCareerPath("Desarrollador Backend", "Arquitecto de sistemas del lado del servidor",
                        "Especial√≠zate en APIs, bases de datos y l√≥gica de negocio", "‚öôÔ∏è", "Backend Developer",
                        "Intermediate", 14000, 6000, 8000, "$45,000 - $130,000",
                        Arrays.asList("APIs RESTful", "Microservicios", "Bases de datos", "Cloud computing"),
                        Arrays.asList("Node.js", "Python", "PostgreSQL", "Docker", "AWS")),
                createCareerPath("Desarrollador Frontend", "Especialista en interfaces de usuario",
                        "Convi√©rtete en experto en crear experiencias visuales incre√≠bles", "üé®", "Frontend Developer",
                        "Junior", 12000, 4000, 8000, "$35,000 - $100,000",
                        Arrays.asList("Dise√±o web", "UI/UX", "Aplicaciones SPA", "E-commerce"),
                        Arrays.asList("React", "Vue.js", "TypeScript", "Tailwind CSS", "Webpack")),
                createCareerPath("Ingeniero de Machine Learning", "Construye sistemas inteligentes",
                        "Especial√≠zate en IA y aprendizaje autom√°tico", "ü§ñ", "ML Engineer",
                        "Advanced", 20000, 8000, 12000, "$70,000 - $180,000",
                        Arrays.asList("Deep Learning", "NLP", "Computer Vision", "AI Research"),
                        Arrays.asList("PyTorch", "TensorFlow", "Keras", "OpenCV", "Transformers"))
        );
        paths.forEach(careerPathService::save);
    }

    private CareerPath createCareerPath(String title, String subtitle, String desc, String icon,
            String role, String level, Integer totalXP, Integer currentXP,
            Integer requiredXP, String salary, List<String> opps, List<String> techs) {
        CareerPath cp = new CareerPath();
        cp.setTitle(title);
        cp.setSubtitle(subtitle);
        cp.setDescription(desc);
        cp.setIcon(icon);
        cp.setRole(role);
        cp.setLevel(level);
        cp.setTotalXP(totalXP);
        cp.setCurrentXP(currentXP);
        cp.setRequiredXP(requiredXP);
        cp.setSalaryRange(salary);
        cp.setSelected(false);
        cp.setOpportunities(opps);
        cp.setTechnologies(techs);
        return cp;
    }

    private void initChallenges() {
        List<Challenge> challenges = Arrays.asList(
                createChallenge("FizzBuzz", "Implementa el cl√°sico problema FizzBuzz", "üî¢", 50, "Algoritmo", false),
                createChallenge("Pal√≠ndromo", "Verifica si una cadena es un pal√≠ndromo", "üìù", 50, "String", false),
                createChallenge("Fibonacci", "Genera la secuencia de Fibonacci", "üåÄ", 75, "Recursi√≥n", false),
                createChallenge("B√∫squeda Binaria", "Implementa b√∫squeda binaria en un array ordenado", "üîç", 100, "B√∫squeda", false),
                createChallenge("√Årbol Binario", "Implementa un √°rbol binario de b√∫squeda", "üå≥", 150, "Estructuras de Datos", false),
                createChallenge("API REST", "Crea una API REST completa con CRUD", "üåê", 150, "Backend", false),
                createChallenge("Sistema de Cach√©", "Implementa un sistema de cach√© LRU", "üíæ", 150, "Optimizaci√≥n", false),
                createChallenge("Machine Learning", "Entrena un modelo de clasificaci√≥n", "ü§ñ", 250, "AI/ML", false)
        );
        challenges.forEach(challengeService::save);
    }

    private Challenge createChallenge(String title, String desc, String icon, Integer xp, String type, Boolean completed) {
        Challenge c = new Challenge();
        c.setTitle(title);
        c.setDescription(desc);
        c.setIcon(icon);
        c.setXp(xp);
        c.setType(type);
        c.setCompleted(completed);
        return c;
    }

    private void initChatMessages() {
        List<ChatMessage> messages = Arrays.asList(
                createChatMessage("¬øPodr√≠as explicarme qu√© es una funci√≥n en Python?", true, LocalDateTime.now().minusMinutes(10), null),
                createChatMessage("Una funci√≥n es un bloque de c√≥digo reutilizable que realiza una tarea espec√≠fica. Se define con 'def' seguido del nombre.", false, LocalDateTime.now().minusMinutes(9), ChatMessage.MessageType.EVALUACION),
                createChatMessage("Mi c√≥digo tiene un error en el bucle for", true, LocalDateTime.now().minusMinutes(8), null),
                createChatMessage("Revisa la indentaci√≥n del c√≥digo dentro del bucle. En Python, la indentaci√≥n es crucial.", false, LocalDateTime.now().minusMinutes(7), ChatMessage.MessageType.PISTA),
                createChatMessage("¬øC√≥mo puedo mejorar el rendimiento de mi consulta SQL?", true, LocalDateTime.now().minusMinutes(6), null),
                createChatMessage("Considera agregar √≠ndices a las columnas que usas en WHERE y JOIN. Tambi√©n evita SELECT *.", false, LocalDateTime.now().minusMinutes(5), ChatMessage.MessageType.SUGERENCIA),
                createChatMessage("No entiendo la diferencia entre var, let y const", true, LocalDateTime.now().minusMinutes(4), null),
                createChatMessage("'var' tiene scope de funci√≥n, 'let' de bloque y 'const' tambi√©n de bloque pero inmutable.", false, LocalDateTime.now().minusMinutes(3), ChatMessage.MessageType.EVALUACION)
        );
        messages.forEach(chatMessageService::save);
    }

    private ChatMessage createChatMessage(String text, Boolean isUser, LocalDateTime timestamp, ChatMessage.MessageType type) {
        ChatMessage cm = new ChatMessage();
        cm.setText(text);
        cm.setIsUser(isUser);
        cm.setTimestamp(timestamp);
        cm.setType(type);
        return cm;
    }

    private void initCodeExplanations() {
        List<CodeExplanation> explanations = Arrays.asList(
                createCodeExplanation(1, "def fibonacci(n):", "Define una funci√≥n llamada fibonacci que recibe un par√°metro n"),
                createCodeExplanation(2, "    if n <= 1:", "Verifica si n es 0 o 1, caso base de la recursi√≥n"),
                createCodeExplanation(3, "        return n", "Retorna n directamente para los casos base"),
                createCodeExplanation(4, "    return fibonacci(n-1) + fibonacci(n-2)", "Llamada recursiva que suma los dos n√∫meros anteriores"),
                createCodeExplanation(5, "const fetchData = async () => {", "Declara una funci√≥n as√≠ncrona usando arrow function"),
                createCodeExplanation(6, "    const response = await fetch(url);", "Espera la respuesta de la petici√≥n HTTP"),
                createCodeExplanation(7, "    const data = await response.json();", "Convierte la respuesta a formato JSON"),
                createCodeExplanation(8, "    return data;", "Retorna los datos procesados")
        );
        explanations.forEach(codeExplanationService::save);
    }

    private CodeExplanation createCodeExplanation(Integer line, String code, String explanation) {
        CodeExplanation ce = new CodeExplanation();
        ce.setLine(line);
        ce.setCode(code);
        ce.setExplanation(explanation);
        return ce;
    }

    private void initInstructors() {
        List<Instructor> instructors = Arrays.asList(
                createInstructor("Dr. Ana Garc√≠a", "üë©‚Äçüè´"),
                createInstructor("Carlos Mendoza", "üë®‚Äçüíª"),
                createInstructor("Mar√≠a L√≥pez", "üë©‚Äçüíº"),
                createInstructor("Juan P√©rez", "üë®‚Äçüî¨"),
                createInstructor("Laura Mart√≠nez", "üë©‚Äçüéì"),
                createInstructor("Diego Rodr√≠guez", "üë®‚Äçüè´"),
                createInstructor("Sofia Chen", "üë©‚Äçüíª"),
                createInstructor("Roberto Silva", "üë®‚Äçüíº")
        );
        instructors.forEach(instructorService::save);
    }

    private Instructor createInstructor(String name, String avatar) {
        Instructor i = new Instructor();
        i.setName(name);
        i.setAvatar(avatar);
        return i;
    }

    private void initCourses() {
        List<Course> courses = Arrays.asList(
                createCourse("Introducci√≥n a la Programaci√≥n con C++", "Aprende C++ desde cero", "Programaci√≥n", "Principiante",
                        4.7, "45 horas", 8420, 90, 0, "Variables y Tipos de Datos", "cpp-intro.jpg", "Gratis", null, 550, true, false, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Sintaxis de C++", "POO", "Punteros", "STL"),
                        Arrays.asList("Conocimientos b√°sicos de computaci√≥n"),
                        Arrays.asList("C++", "Programming", "Beginner")),
                createCourse("Desarrollo Web con React", "Construye aplicaciones web modernas", "Frontend", "Intermedio",
                        4.9, "50 horas", 18650, 150, 45, "Hooks y Estado", "react-course.jpg", "$59.99", "$99.99", 750, true, true, Course.CourseStatus.IN_PROGRESS,
                        Arrays.asList("Componentes y Props", "Hooks", "Context API", "React Router"),
                        Arrays.asList("HTML, CSS, JavaScript b√°sico"),
                        Arrays.asList("React", "Frontend", "JavaScript")),
                createCourse("Python para Ciencia de Datos", "An√°lisis de datos con Python", "Data Science", "Intermedio",
                        4.8, "55 horas", 10340, 145, 58, "Pandas y NumPy", "python-datascience.jpg", "$64.99", "$109.99", 800, true, true, Course.CourseStatus.IN_PROGRESS,
                        Arrays.asList("NumPy", "Pandas", "Matplotlib", "An√°lisis exploratorio"),
                        Arrays.asList("Python b√°sico"),
                        Arrays.asList("Python", "DataScience", "Analytics")),
                createCourse("Desarrollo de APIs REST con Node.js", "Backend profesional", "Backend", "Intermedio",
                        4.6, "45 horas", 9870, 95, 0, "Creaci√≥n de APIs", "nodejs-express.jpg", "$54.99", "$89.99", 700, false, false, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("APIs RESTful", "Middleware", "Autenticaci√≥n JWT", "Base de datos"),
                        Arrays.asList("JavaScript intermedio"),
                        Arrays.asList("NodeJS", "Backend", "API")),
                createCourse("Introducci√≥n a Machine Learning", "Aprendizaje autom√°tico con Python", "AI/ML", "Avanzado",
                        4.7, "70 horas", 7890, 210, 0, "Regresi√≥n Lineal", "ml-python.jpg", "$79.99", "$139.99", 1000, false, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Scikit-learn", "Regresi√≥n", "Clasificaci√≥n", "Clustering"),
                        Arrays.asList("Python, matem√°ticas b√°sicas, estad√≠stica"),
                        Arrays.asList("MachineLearning", "AI", "Python")),
                createCourse("Desarrollo M√≥vil con Flutter", "Apps multiplataforma", "Mobile", "Principiante",
                        4.9, "45 horas", 12450, 125, 0, "Widgets b√°sicos", "flutter.jpg", "$54.99", "$89.99", 700, true, true, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Dart", "Widgets", "State Management", "Firebase"),
                        Arrays.asList("Programaci√≥n b√°sica"),
                        Arrays.asList("Flutter", "Dart", "Mobile")),
                createCourse("Bases de Datos con PostgreSQL", "SQL avanzado y optimizaci√≥n", "Backend", "Intermedio",
                        4.7, "35 horas", 11250, 78, 78, "Normalizaci√≥n", "postgresql.jpg", "Gratis", null, 500, false, false, Course.CourseStatus.COMPLETED,
                        Arrays.asList("Consultas SQL", "Joins", "√çndices", "Transacciones", "Stored Procedures"),
                        Arrays.asList("Conocimientos b√°sicos de SQL"),
                        Arrays.asList("SQL", "Database", "PostgreSQL")),
                createCourse("Ciberseguridad y Hacking √âtico", "Protege aplicaciones web", "Seguridad", "Avanzado",
                        4.9, "65 horas", 5430, 195, 0, "Pentesting Web", "cybersecurity.jpg", "$89.99", "$149.99", 950, true, false, Course.CourseStatus.NOT_STARTED,
                        Arrays.asList("Pentesting", "OWASP Top 10", "Kali Linux", "Metasploit"),
                        Arrays.asList("Redes, Linux, programaci√≥n b√°sica"),
                        Arrays.asList("Security", "Hacking", "Pentesting"))
        );
        courses.forEach(courseService::save);
    }

    private Course createCourse(String title, String desc, String cat, String level, Double rating,
            String duration, Integer students, Integer lessons, Integer completedLessons,
            String nextLesson, String thumbnail, String price, String originalPrice,
            Integer xp, Boolean isNew, Boolean isTrending, Course.CourseStatus status,
            List<String> learningPoints, List<String> requirements, List<String> tags) {
        Course c = new Course();
        c.setTitle(title);
        c.setDescription(desc);
        c.setCategory(cat);
        c.setLevel(level);
        c.setRating(rating);
        c.setDuration(duration);
        c.setStudents(students);
        c.setLessons(lessons);
        c.setCompletedLessons(completedLessons);
        c.setNextLesson(nextLesson);
        c.setThumbnail(thumbnail);
        c.setPrice(price);
        c.setOriginalPrice(originalPrice);
        c.setXp(xp);
        c.setIsNew(isNew);
        c.setIsTrending(isTrending);
        c.setStatus(status);
        c.setLearningPoints(learningPoints);
        c.setRequirements(requirements);
        c.setTags(tags);
        c.setTotalPoints(xp);
        c.setDifficulty(level);
        return c;
    }

    private void initExamResults() {
        List<ExamResults> results = Arrays.asList(
                createExamResult(95.0, 20, 19, "45:30", true),
                createExamResult(78.5, 30, 24, "62:15", true),
                createExamResult(88.0, 25, 22, "55:40", true),
                createExamResult(92.5, 40, 37, "89:20", true),
                createExamResult(65.0, 20, 13, "38:50", false),
                createExamResult(100.0, 15, 15, "25:10", true),
                createExamResult(82.0, 50, 41, "105:45", true),
                createExamResult(75.5, 30, 23, "67:30", true)
        );
        results.forEach(examResultsService::save);
    }

    private ExamResults createExamResult(Double score, Integer total, Integer correct, String time, Boolean passed) {
        ExamResults er = new ExamResults();
        er.setScore(score);
        er.setTotalQuestions(total);
        er.setCorrectAnswers(correct);
        er.setTimeSpent(time);
        er.setPassed(passed);
        return er;
    }

    private void initFeaturedUsers() {
        List<FeaturedUser> users = Arrays.asList(
                createFeaturedUser("CodeMaster_92", "üë®‚Äçüíª", "Diamante", 15420, "üèÜüî•üíé", true),
                createFeaturedUser("DevQueen", "üë©‚Äçüíª", "Platino", 12350, "‚≠êüéØüöÄ", true),
                createFeaturedUser("AlgoWizard", "üßô‚Äç‚ôÇÔ∏è", "Oro", 9870, "‚ú®üí°üèÖ", false),
                createFeaturedUser("ByteNinja", "ü•∑", "Platino", 11240, "‚ö°üéñÔ∏èüî±", true),
                createFeaturedUser("ReactGuru", "üë®‚Äçüè´", "Diamante", 14580, "‚öõÔ∏èüèÜüëë", false),
                createFeaturedUser("PythonQueen", "üë∏", "Oro", 10120, "üêçüíé‚ú®", true),
                createFeaturedUser("DataNinja", "üìä", "Platino", 12670, "üìà‚ö°üèÜ", true),
                createFeaturedUser("CloudMaster", "‚òÅÔ∏è", "Diamante", 13340, "‚òÅÔ∏èüëëüíé", true)
        );
        users.forEach(featuredUserService::save);
    }

    private FeaturedUser createFeaturedUser(String name, String avatar, String level, Integer points, String badges, Boolean online) {
        FeaturedUser fu = new FeaturedUser();
        fu.setName(name);
        fu.setAvatar(avatar);
        fu.setLevel(level);
        fu.setPoints(points);
        fu.setBadges(badges);
        fu.setOnline(online);
        return fu;
    }

    private void initLearningMethods() {
        List<LearningMethod> methods = Arrays.asList(
                createLearningMethod("video", "Video Tutoriales", "üé•", "#3B82F6", "Aprende viendo tutoriales paso a paso con ejemplos pr√°cticos"),
                createLearningMethod("audio", "Podcasts y Audio", "üéß", "#10B981", "Escucha lecciones mientras haces otras actividades"),
                createLearningMethod("text", "Lectura y Documentaci√≥n", "üìö", "#F59E0B", "Lee documentaci√≥n t√©cnica y art√≠culos detallados"),
                createLearningMethod("practice", "Pr√°ctica de C√≥digo", "üíª", "#8B5CF6", "Aprende haciendo: escribe c√≥digo y resuelve problemas"),
                createLearningMethod("interactive", "Ejercicios Interactivos", "üéÆ", "#EF4444", "Completa desaf√≠os interactivos y gamificados"),
                createLearningMethod("project", "Proyectos Reales", "üöÄ", "#06B6D4", "Construye proyectos completos del mundo real"),
                createLearningMethod("visual", "Diagramas y Mapas", "üó∫Ô∏è", "#EC4899", "Visualiza conceptos con diagramas y mapas mentales"),
                createLearningMethod("ai", "Tutor con IA", "ü§ñ", "#6366F1", "Obt√©n ayuda instant√°nea de un tutor con inteligencia artificial")
        );
        methods.forEach(learningMethodService::save);
    }

    private LearningMethod createLearningMethod(String id, String name, String icon, String color, String desc) {
        LearningMethod lm = new LearningMethod();
        lm.setId(id);
        lm.setName(name);
        lm.setIcon(icon);
        lm.setColor(color);
        lm.setDescription(desc);
        return lm;
    }

    private void initMenuItems() {
        List<MenuItem> items = Arrays.asList(
                createMenuItem("dashboard", "Dashboard", "üè†", "/dashboard", null, false),
                createMenuItem("courses", "Mis Cursos", "üìö", "/courses", 3, false),
                createMenuItem("projects", "Proyectos", "üöÄ", "/projects", null, true),
                createMenuItem("challenges", "Desaf√≠os", "‚öîÔ∏è", "/challenges", 5, false),
                createMenuItem("career", "Ruta Profesional", "üéØ", "/career", null, false),
                createMenuItem("community", "Comunidad", "üë•", "/community", 12, false),
                createMenuItem("achievements", "Logros", "üèÜ", "/achievements", null, false),
                createMenuItem("premium", "Premium", "üíé", "/premium", null, true)
        );
        items.forEach(menuItemService::save);
    }

    private MenuItem createMenuItem(String id, String label, String icon, String path, Integer badge, Boolean isNew) {
        MenuItem mi = new MenuItem();
        mi.setId(id);
        mi.setLabel(label);
        mi.setIcon(icon);
        mi.setPath(path);
        mi.setBadge(badge);
        mi.setIsNew(isNew);
        return mi;
    }

    private OptionForm createOptionForm(String title, String description, String icon, String learningStyle) {
        OptionForm of = new OptionForm();
        of.setTitle(title);
        of.setDescription(description);
        of.setIcon(icon);
        of.setLearningStyle(learningStyle);
        return of;
    }

    private void initPowers() {
        List<Power> powers = Arrays.asList(
                createPower("Doble XP", "Duplica los puntos de experiencia ganados", 4.99, "24 horas", 1, false, true, "#FFD700", "‚ö°", 24),
                createPower("Racha Congelada", "Protege tu racha de aprendizaje por un d√≠a", 2.99, "Uso √∫nico", 3, false, true, "#00CED1", "‚ùÑÔ∏è", 20),
                createPower("Pista del Mentor", "Obt√©n una pista valiosa en cualquier desaf√≠o", 1.99, "Uso √∫nico", 5, true, false, "#FF6B6B", "üí°", 18),
                createPower("Revisi√≥n Instant√°nea", "Recibe feedback inmediato de tu c√≥digo", 3.99, "3 usos", 0, false, false, "#9D4EDD", "‚úÖ", 22),
                createPower("Energ√≠a Infinita", "Sin l√≠mite de intentos en desaf√≠os", 9.99, "7 d√≠as", 0, false, true, "#FF9800", "‚ôæÔ∏è", 26),
                createPower("Boost de Velocidad", "Reduce el tiempo de espera en lecciones", 5.99, "48 horas", 2, true, false, "#4CAF50", "üöÄ", 20),
                createPower("Escudo de Protecci√≥n", "Evita perder puntos por respuestas incorrectas", 6.99, "24 horas", 1, false, false, "#2196F3", "üõ°Ô∏è", 24),
                createPower("Visi√≥n del C√≥digo", "Muestra soluciones ejemplares de otros usuarios", 7.99, "5 usos", 0, false, true, "#E91E63", "üëÅÔ∏è", 22)
        );
        powers.forEach(powerService::save);
    }

    private Power createPower(String name, String desc, Double price, String duration, Integer uses, Boolean owned, Boolean featured, String color, String icon, Integer iconSize) {
        Power p = new Power();
        p.setName(name);
        p.setDescription(desc);
        p.setPrice(price);
        p.setDuration(duration);
        p.setUses(uses);
        p.setOwned(owned);
        p.setIsFeatured(featured);
        p.setColor(color);
        p.setIcon(icon);
        p.setIconSize(iconSize);
        return p;
    }

    private void initPremiumPlans() {
        List<PremiumPlan> plans = Arrays.asList(
                createPremiumPlan("B√°sico", "Perfecto para comenzar tu viaje", "$9.99", "mes", null, false,
                        Arrays.asList("Acceso a cursos b√°sicos", "5 proyectos guiados", "Chat con IA limitado", "Certificado de finalizaci√≥n")),
                createPremiumPlan("Pro", "Para estudiantes serios", "$19.99", "mes", "Ahorra 20%", true,
                        Arrays.asList("Acceso a todos los cursos", "Proyectos ilimitados", "Chat con IA ilimitado", "Revisi√≥n de c√≥digo por mentores", "Certificados verificados", "Sin anuncios")),
                createPremiumPlan("Elite", "M√°xima experiencia de aprendizaje", "$39.99", "mes", "Ahorra 30%", false,
                        Arrays.asList("Todo lo de Pro", "Mentor√≠a 1-a-1", "Preparaci√≥n para entrevistas", "Acceso a workshops exclusivos", "Portfolio profesional", "Prioridad en soporte")),
                createPremiumPlan("Estudiante", "Precio especial para estudiantes", "$7.99", "mes", "Descuento 40%", false,
                        Arrays.asList("Acceso a cursos principales", "10 proyectos", "Chat con IA", "Certificados", "Verificaci√≥n de estudiante requerida")),
                createPremiumPlan("Anual Pro", "El mejor valor del a√±o", "$199.99", "a√±o", "Ahorra $40", true,
                        Arrays.asList("Todo lo de Pro", "2 meses gratis", "Acceso anticipado a cursos", "Eventos exclusivos")),
                createPremiumPlan("Empresarial", "Para equipos de desarrollo", "$299.99", "mes", "5-20 usuarios", false,
                        Arrays.asList("Todo lo de Elite", "Dashboard de equipo", "Reportes de progreso", "Contenido personalizado", "Soporte prioritario 24/7")),
                createPremiumPlan("Lifetime", "Acceso de por vida", "$999.99", "√∫nico", "Pago √∫nico", false,
                        Arrays.asList("Acceso ilimitado de por vida", "Todos los cursos futuros", "Mentor√≠a incluida", "Sin renovaciones")),
                createPremiumPlan("Trial", "Prueba gratuita", "$0.00", "14 d√≠as", "Sin tarjeta", false,
                        Arrays.asList("Prueba todas las funciones Pro", "14 d√≠as gratis", "Cancela cuando quieras", "Sin compromiso"))
        );
        plans.forEach(premiumPlanService::save);
    }

    private PremiumPlan createPremiumPlan(String name, String desc, String price, String period, String savings, Boolean recommended, List<String> features) {
        PremiumPlan pp = new PremiumPlan();
        pp.setName(name);
        pp.setDescription(desc);
        pp.setPrice(price);
        pp.setPeriod(period);
        pp.setSavings(savings);
        pp.setRecommended(recommended);
        pp.setFeatures(features);
        return pp;
    }

    private void initProducts() {
        List<Product> products = Arrays.asList(
                createProduct("Avatar Legendario: Drag√≥n", "Avatar exclusivo con efectos animados", 299.99, "Avatar", "Legendario", false, true, "dragon-avatar.png", "#FF6B6B", "üêâ", 32),
                createProduct("Tema Oscuro Premium", "Tema personalizado para la interfaz", 49.99, "Tema", "√âpico", true, false, "dark-theme.png", "#1a1a2e", "üåô", 24),
                createProduct("Marco Dorado", "Marco especial para tu perfil", 79.99, "Marco", "Raro", false, false, "golden-frame.png", "#FFD700", "üñºÔ∏è", 28),
                createProduct("Boost XP Permanente +10%", "Gana 10% m√°s XP en todas las actividades", 199.99, "Boost", "√âpico", false, true, "xp-boost.png", "#00FF88", "‚ö°", 26),
                createProduct("Insignia de Fundador", "Insignia especial de los primeros usuarios", 499.99, "Insignia", "M√≠tico", false, true, "founder-badge.png", "#9D4EDD", "üëë", 30),
                createProduct("Pack de Emojis Coding", "30 emojis exclusivos de programaci√≥n", 29.99, "Emojis", "Com√∫n", true, false, "emoji-pack.png", "#F59E0B", "üòé", 20),
                createProduct("Certificado Hologr√°fico", "Certificado con efecto hologr√°fico", 149.99, "Certificado", "Legendario", false, false, "holo-cert.png", "#00CED1", "üìú", 28),
                createProduct("Mascota Virtual: Bytey", "Mascota que te acompa√±a mientras programas", 89.99, "Mascota", "√âpico", false, true, "bytey.png", "#4CAF50", "ü§ñ", 26)
        );
        products.forEach(productService::save);
    }

    private Product createProduct(String name, String desc, Double price, String type, String rarity, Boolean owned, Boolean featured, String image, String color, String icon, Integer iconSize) {
        Product p = new Product();
        p.setName(name);
        p.setDescription(desc);
        p.setPrice(price);
        p.setType(type);
        p.setRarity(rarity);
        p.setOwned(owned);
        p.setIsFeatured(featured);
        p.setImage(image);
        p.setColor(color);
        p.setIcon(icon);
        p.setIconSize(iconSize);
        return p;
    }

    private void initProjects() {
        List<Project> projects = Arrays.asList(
                createProject("Sistema de Gesti√≥n de Reservas de Hotel", "Aplicaci√≥n web completa para gestionar reservas",
                        "Desarrolla un sistema completo de reservas con autenticaci√≥n, pagos y panel administrativo",
                        Project.ProjectType.GUIADO, Project.Difficulty.INTERMEDIO, "40 horas", 1200, 800, 400, true, 45, Project.ProjectStatus.EN_PROGRESO),
                createProject("Red Social para Desarrolladores", "Plataforma estilo LinkedIn para programadores",
                        "Crea una red social con perfiles, posts, mensajer√≠a y sistema de conexiones",
                        Project.ProjectType.LIBRE, Project.Difficulty.AVANZADO, "60 horas", 1800, 1200, 600, true, 0, Project.ProjectStatus.NO_INICIADO),
                createProject("API de E-commerce con Microservicios", "Backend escalable para tienda online",
                        "Implementa una arquitectura de microservicios con Docker y Kubernetes",
                        Project.ProjectType.DESAFIO_IA, Project.Difficulty.EXPERTO, "80 horas", 2500, 1800, 700, true, 20, Project.ProjectStatus.EN_PROGRESO),
                createProject("App M√≥vil de Fitness Tracker", "Aplicaci√≥n m√≥vil multiplataforma",
                        "Desarrolla una app de seguimiento de ejercicios con gr√°ficas y notificaciones",
                        Project.ProjectType.GUIADO, Project.Difficulty.INTERMEDIO, "35 horas", 1000, 700, 300, false, 60, Project.ProjectStatus.EN_PROGRESO),
                createProject("Dashboard Anal√≠tico con Visualizaciones", "Panel de control con D3.js y Chart.js",
                        "Crea visualizaciones interactivas de datos en tiempo real",
                        Project.ProjectType.LIBRE, Project.Difficulty.INTERMEDIO, "25 horas", 800, 600, 200, false, 100, Project.ProjectStatus.COMPLETADO),
                createProject("Chatbot con IA y NLP", "Asistente virtual inteligente",
                        "Construye un chatbot usando t√©cnicas de procesamiento de lenguaje natural",
                        Project.ProjectType.DESAFIO_IA, Project.Difficulty.AVANZADO, "50 horas", 1500, 1000, 500, true, 0, Project.ProjectStatus.NO_INICIADO),
                createProject("Sistema de Blog con CMS", "Blog profesional con panel de administraci√≥n",
                        "Desarrolla un CMS completo con editor rich text y gesti√≥n de medios",
                        Project.ProjectType.GUIADO, Project.Difficulty.PRINCIPIANTE, "30 horas", 700, 500, 200, false, 75, Project.ProjectStatus.EN_PROGRESO),
                createProject("Plataforma de Streaming de Video", "Clone de YouTube/Netflix",
                        "Crea una plataforma de streaming con transcoding y CDN",
                        Project.ProjectType.COLABORATIVO, Project.Difficulty.EXPERTO, "100 horas", 3000, 2000, 1000, true, 15, Project.ProjectStatus.EN_PROGRESO)
        );
        projects.forEach(projectService::save);
    }

    private Project createProject(String title, String subtitle, String desc, Project.ProjectType type,
            Project.Difficulty difficulty, String duration, Integer totalXP, Integer baseXP,
            Integer bonusXP, Boolean iaEval, Integer progress, Project.ProjectStatus status) {
        Project p = new Project();
        p.setTitle(title);
        p.setSubtitle(subtitle);
        p.setDescription(desc);
        p.setType(type);
        p.setDifficulty(difficulty);
        p.setDuration(duration);
        p.setTotalXP(totalXP);
        p.setBaseXP(baseXP);
        p.setBonusXP(bonusXP);
        p.setIaEvaluation(iaEval);
        p.setProgress(progress);
        p.setStatus(status);
        return p;
    }

    private void initQuestions() {
        List<Question> questions = Arrays.asList(
                createQuestion("¬øQu√© es una variable?", "Una variable es un espacio en memoria para almacenar datos", Question.QuestionType.TEORICA,
                        Arrays.asList("Un espacio de memoria", "Una funci√≥n", "Una clase", "Un m√©todo"),
                        "Un espacio de memoria", null, null, "Las variables son contenedores que almacenan valores en la memoria del programa", false),
                createQuestion("Implementa FizzBuzz", "Escribe una funci√≥n que imprima FizzBuzz", Question.QuestionType.PRACTICA,
                        null, "function fizzbuzz(n) { /* c√≥digo */ }", null,
                        "function fizzbuzz(n) {\n  // Tu c√≥digo aqu√≠\n}",
                        "Recuerda: Fizz para m√∫ltiplos de 3, Buzz para 5, FizzBuzz para ambos", false),
                createQuestion("¬øCu√°l es la complejidad de b√∫squeda binaria?", "Selecciona la respuesta correcta", Question.QuestionType.TEORICA,
                        Arrays.asList("O(n)", "O(log n)", "O(n¬≤)", "O(1)"),
                        "O(log n)", null, null, "B√∫squeda binaria divide el espacio de b√∫squeda a la mitad en cada paso", false),
                createQuestion("Invertir una cadena", "Escribe c√≥digo para invertir una cadena", Question.QuestionType.PRACTICA,
                        null, "def reverse_string(s): # c√≥digo", null,
                        "def reverse_string(s):\n    # Tu c√≥digo aqu√≠\n    pass",
                        "Puedes usar slicing [::-1] o un bucle", false),
                createQuestion("¬øQu√© es REST?", "Explica qu√© es una API REST", Question.QuestionType.TEORICA,
                        Arrays.asList("Un estilo arquitect√≥nico", "Un lenguaje", "Una base de datos", "Un framework"),
                        "Un estilo arquitect√≥nico", null, null, "REST es un estilo de arquitectura para servicios web que usa HTTP", false),
                createQuestion("Encuentra el n√∫mero mayor", "Implementa una funci√≥n que encuentre el m√°ximo en un array", Question.QuestionType.PRACTICA,
                        null, "function findMax(arr) { /* c√≥digo */ }", null,
                        "function findMax(arr) {\n  // Tu c√≥digo aqu√≠\n}",
                        "Puedes usar Math.max() o iterar el array", false),
                createQuestion("¬øQu√© es SQL Injection?", "Define qu√© es SQL Injection", Question.QuestionType.TEORICA,
                        Arrays.asList("Vulnerabilidad de seguridad", "Tipo de base de datos", "Lenguaje de consulta", "Framework"),
                        "Vulnerabilidad de seguridad", null, null, "SQL Injection es cuando c√≥digo malicioso se inserta en consultas SQL", false),
                createQuestion("Validar un email", "Crea una funci√≥n que valide un email", Question.QuestionType.PRACTICA,
                        null, "function validateEmail(email) { /* c√≥digo */ }", null,
                        "function validateEmail(email) {\n  // Tu c√≥digo aqu√≠ con regex\n}",
                        "Usa expresiones regulares para validar el formato", true)
        );
        questions.forEach(questionService::save);
    }

    private Question createQuestion(String title, String text, Question.QuestionType type, List<String> options,
            String correctAnswer, String userAnswer, String codeTemplate, String explanation, Boolean flagged) {
        Question q = new Question();
        q.setTitle(title);
        q.setText(text);
        q.setType(type);
        q.setOptions(options);
        q.setCorrectAnswer(correctAnswer);
        q.setUserAnswer(userAnswer);
        q.setCodeTemplate(codeTemplate);
        q.setExplanation(explanation);
        q.setFlagged(flagged);
        return q;
    }

    private void initQuestionForms() {
        List<QuestionForm> forms = Arrays.asList(
                createQuestionForm("Cuando aprendes algo nuevo, ¬øqu√© m√©todo prefieres?", null, Arrays.asList(
                        createOptionForm("Ver demostraciones", "Prefiero ver c√≥mo se hace antes de intentarlo yo mismo", "üëÄ", "Visual"),
                        createOptionForm("Leer instrucciones", "Me gusta leer y entender la teor√≠a primero", "üìñ", "Lectura"),
                        createOptionForm("Practicar directamente", "Aprendo mejor haciendo y experimentando", "üîß", "Kinest√©sico"),
                        createOptionForm("Escuchar explicaciones", "Prefiero que me expliquen verbalmente", "üéß", "Auditivo")
                )),
                createQuestionForm("¬øC√≥mo organizas tu tiempo de estudio?", null, Arrays.asList(
                        createOptionForm("Horarios fijos", "Prefiero estudiar a la misma hora todos los d√≠as", "‚è∞", "Estructurado"),
                        createOptionForm("Cuando tengo inspiraci√≥n", "Estudio cuando me siento motivado y concentrado", "üí°", "Flexible"),
                        createOptionForm("Por objetivos", "Planifico en base a metas espec√≠ficas a alcanzar", "üéØ", "Orientado a metas"),
                        createOptionForm("Intensivo", "Prefiero sesiones largas y profundas", "‚ö°", "Inmersivo")
                )),
                createQuestionForm("¬øQu√© tipo de material te resulta m√°s √∫til?", null, Arrays.asList(
                        createOptionForm("Diagramas y mapas mentales", "Me ayudan a ver las conexiones entre conceptos", "üó∫Ô∏è", "Visual"),
                        createOptionForm("Textos y apuntes", "Prefiero material escrito detallado", "üìù", "Lectura"),
                        createOptionForm("Ejercicios pr√°cticos", "Aprendo resolviendo problemas reales", "üß©", "Kinest√©sico"),
                        createOptionForm("Podcasts y audios", "Puedo aprender mientras hago otras actividades", "üéôÔ∏è", "Auditivo")
                )),
                createQuestionForm("¬øC√≥mo prefieres recibir feedback?", null, Arrays.asList(
                        createOptionForm("Ver ejemplos corregidos", "Comparar mi trabajo con soluciones modelo", "üëÅÔ∏è", "Visual"),
                        createOptionForm("Comentarios escritos", "Prefiero feedback detallado por escrito", "‚úçÔ∏è", "Lectura"),
                        createOptionForm("Pr√°ctica guiada", "Que me muestren c√≥mo mejorar en el momento", "ü§ù", "Kinest√©sico"),
                        createOptionForm("Conversaciones", "Discutir mis progresos verbalmente", "üí¨", "Auditivo")
                )),
                createQuestionForm("¬øQu√© ambiente te ayuda m√°s a concentrarte?", null, Arrays.asList(
                        createOptionForm("Espacio ordenado y visual", "Me concentro mejor en ambientes organizados", "üßπ", "Visual"),
                        createOptionForm("Silencio absoluto", "Necesito eliminar distracciones auditivas", "ü§´", "Lectura"),
                        createOptionForm("Poder moverme", "Me ayuda cambiar de postura o lugar", "üö∂", "Kinest√©sico"),
                        createOptionForm("M√∫sica de fondo", "El sonido ambiental me ayuda a concentrarme", "üéµ", "Auditivo")
                )),
                createQuestionForm("¬øC√≥mo abordas un tema complejo?", null, Arrays.asList(
                        createOptionForm("Dividiendo en partes", "Desgloso el problema en componentes m√°s peque√±os", "üß©", "Anal√≠tico"),
                        createOptionForm("Buscando el panorama general", "Primero entiendo el concepto global", "üåÖ", "Global"),
                        createOptionForm("Probando con ejemplos", "Experimentando con casos pr√°cticos", "üîç", "Experimental"),
                        createOptionForm("Preguntando a otros", "Discutiendo el tema con compa√±eros", "üë•", "Social")
                )),
                createQuestionForm("¬øQu√© tipo de proyectos disfrutas m√°s?", null, Arrays.asList(
                        createOptionForm("Dise√±o visual", "Crear interfaces y experiencias visuales", "üé®", "Visual"),
                        createOptionForm("Investigaci√≥n te√≥rica", "Profundizar en conceptos y teor√≠as", "üî¨", "Lectura"),
                        createOptionForm("Construcci√≥n manual", "Armar cosas con las manos o c√≥digo", "üõ†Ô∏è", "Kinest√©sico"),
                        createOptionForm("Presentaciones orales", "Explicar ideas verbalmente", "üé§", "Auditivo")
                )),
                createQuestionForm("¬øC√≥mo tomas apuntes?", null, Arrays.asList(
                        createOptionForm("Con colores y dibujos", "Uso elementos visuales para organizar ideas", "üñçÔ∏è", "Visual"),
                        createOptionForm("Texto estructurado", "Listas y p√°rrafos organizados", "üìë", "Lectura"),
                        createOptionForm("Notas breves", "Apunto solo lo esencial y pr√°ctico", "üìå", "Kinest√©sico"),
                        createOptionForm("Grabaciones", "Prefiero grabar y escuchar despu√©s", "üéôÔ∏è", "Auditivo")
                )),
                createQuestionForm("¬øC√≥mo manejas los errores al aprender?", null, Arrays.asList(
                        createOptionForm("Analizando visualmente", "Reviso d√≥nde me equivoqu√© paso a paso", "üîé", "Visual"),
                        createOptionForm("Buscando en documentaci√≥n", "Consulto fuentes escritas para entender", "üìö", "Lectura"),
                        createOptionForm("Intentando de nuevo", "Pr√°ctico hasta que sale bien", "üîÑ", "Kinest√©sico"),
                        createOptionForm("Pidiendo explicaci√≥n", "Pregunto a alguien que me lo explique", "‚ùì", "Auditivo")
                )),
                createQuestionForm("¬øQu√© te motiva a seguir aprendiendo?", null, Arrays.asList(
                        createOptionForm("Ver progreso visual", "Gr√°ficos y m√©tricas de mi avance", "üìä", "Visual"),
                        createOptionForm("Lograr certificaciones", "Obtener reconocimientos formales", "üèÜ", "Lectura"),
                        createOptionForm("Resolver problemas reales", "Aplicar lo aprendido en proyectos", "üíº", "Kinest√©sico"),
                        createOptionForm("Compartir conocimiento", "Ense√±ar a otros lo que he aprendido", "üó£Ô∏è", "Auditivo")
                ))
        );

        forms.forEach(questionFormService::save);
    }

    private QuestionForm createQuestionForm(String question, String subtitle, List<OptionForm> options) {
        QuestionForm qf = new QuestionForm();
        qf.setAnswer("");
        qf.setQuestion(question);
        options.forEach(o -> o.setQuestionForm(qf));

        if (options != null) {
            qf.setOptions(options);
        }

        return qf;
    }

    private void initRequirements() {
        List<Requirement> requirements = Arrays.asList(
                createRequirement("Conocimientos b√°sicos de HTML y CSS", Requirement.RequirementType.CONOCIMIENTO, Requirement.RequirementStatus.COMPLETADO, 1L),
                createRequirement("Completar curso de JavaScript B√°sico", Requirement.RequirementType.CURSO, Requirement.RequirementStatus.COMPLETADO, 2L),
                createRequirement("Entender programaci√≥n orientada a objetos", Requirement.RequirementType.CONOCIMIENTO, Requirement.RequirementStatus.EN_PROGRESO, 3L),
                createRequirement("Matem√°ticas b√°sicas y √°lgebra", Requirement.RequirementType.CONOCIMIENTO, Requirement.RequirementStatus.COMPLETADO, null),
                createRequirement("Completar curso de Python Fundamentals", Requirement.RequirementType.CURSO, Requirement.RequirementStatus.PENDIENTE, 5L),
                createRequirement("Habilidad para resolver problemas l√≥gicos", Requirement.RequirementType.HABILIDAD, Requirement.RequirementStatus.COMPLETADO, null),
                createRequirement("Conocimientos de bases de datos SQL", Requirement.RequirementType.CONOCIMIENTO, Requirement.RequirementStatus.EN_PROGRESO, 7L),
                createRequirement("Completar proyecto de API REST", Requirement.RequirementType.CURSO, Requirement.RequirementStatus.PENDIENTE, 4L)
        );
        requirements.forEach(requirementService::save);
    }

    private Requirement createRequirement(String desc, Requirement.RequirementType type, Requirement.RequirementStatus status, Long courseId) {
        Requirement r = new Requirement();
        r.setDescription(desc);
        r.setType(type);
        r.setStatus(status);
        r.setCourseId(courseId);
        return r;
    }

    private void initResources() {
        List<ResourceModel> resources = Arrays.asList(
                createResource("Documentaci√≥n Oficial de React", "Gu√≠a completa y actualizada de React", "üìÑ", ResourceModel.ResourceType.DOCUMENTO, "https://react.dev"),
                createResource("Tutorial de Git en Video", "Aprende Git desde cero en 1 hora", "üé•", ResourceModel.ResourceType.VIDEO, "https://youtube.com/git-tutorial"),
                createResource("Repositorio de Ejercicios de Algoritmos", "500+ problemas resueltos en GitHub", "üíª", ResourceModel.ResourceType.REPOSITORIO, "https://github.com/algorithms"),
                createResource("Art√≠culo: Clean Code Principles", "Principios para escribir c√≥digo limpio", "üìù", ResourceModel.ResourceType.ARTICULO, "https://blog.com/clean-code"),
                createResource("Documentaci√≥n de PostgreSQL", "Referencia completa de PostgreSQL", "üìÑ", ResourceModel.ResourceType.DOCUMENTO, "https://postgresql.org/docs"),
                createResource("Curso de Docker en YouTube", "Serie completa de Docker y contenedores", "üé•", ResourceModel.ResourceType.VIDEO, "https://youtube.com/docker-course"),
                createResource("Awesome Python Resources", "Lista curada de recursos de Python", "üíª", ResourceModel.ResourceType.REPOSITORIO, "https://github.com/awesome-python"),
                createResource("Art√≠culo: Microservices Architecture", "Gu√≠a de arquitectura de microservicios", "üìù", ResourceModel.ResourceType.ARTICULO, "https://blog.com/microservices")
        );
        resources.forEach(resourceService::save);
    }

    private ResourceModel createResource(String title, String desc, String icon, ResourceModel.ResourceType type, String url) {
        ResourceModel r = new ResourceModel();
        r.setTitle(title);
        r.setDescription(desc);
        r.setIcon(icon);
        r.setType(type);
        r.setUrl(url);
        return r;
    }

    private void initSkills() {
        List<Skill> skills = Arrays.asList(
                createSkill("JavaScript", 85, 100, Skill.SkillCategory.TECNICA),
                createSkill("Python", 75, 90, Skill.SkillCategory.TECNICA),
                createSkill("React", 70, 85, Skill.SkillCategory.TECNICA),
                createSkill("SQL", 60, 80, Skill.SkillCategory.TECNICA),
                createSkill("Trabajo en Equipo", 80, 90, Skill.SkillCategory.BLANDA),
                createSkill("Resoluci√≥n de Problemas", 75, 85, Skill.SkillCategory.BLANDA),
                createSkill("Docker", 50, 75, Skill.SkillCategory.TECNICA),
                createSkill("Comunicaci√≥n", 70, 85, Skill.SkillCategory.BLANDA)
        );
        skills.forEach(skillService::save);
    }

    private Skill createSkill(String name, Integer level, Integer target, Skill.SkillCategory category) {
        Skill s = new Skill();
        s.setName(name);
        s.setLevel(level);
        s.setTarget(target);
        s.setCategory(category);
        return s;
    }

    private void initTechnologies() {
        List<Technology> technologies = Arrays.asList(
                createTechnology("React", "‚öõÔ∏è", "Frontend", true),
                createTechnology("Node.js", "üü¢", "Backend", true),
                createTechnology("PostgreSQL", "üêò", "Database", true),
                createTechnology("Docker", "üê≥", "DevOps", false),
                createTechnology("TypeScript", "üî∑", "Language", true),
                createTechnology("MongoDB", "üçÉ", "Database", false),
                createTechnology("AWS", "‚òÅÔ∏è", "Cloud", true),
                createTechnology("Python", "üêç", "Language", true)
        );
        technologies.forEach(technologyService::save);
    }

    private Technology createTechnology(String name, String icon, String category, Boolean required) {
        Technology t = new Technology();
        t.setName(name);
        t.setIcon(icon);
        t.setCategory(category);
        t.setRequired(required);
        return t;
    }

    private void initTestCases() {
        List<TestCase> testCases = Arrays.asList(
                createTestCase("Prueba de entrada vac√≠a", "Verificar comportamiento con string vac√≠o", TestCase.TestCaseStatus.PASADO, TestCase.TestCaseType.AUTOMATICO),
                createTestCase("Prueba de n√∫meros negativos", "Validar manejo de valores negativos", TestCase.TestCaseStatus.PASADO, TestCase.TestCaseType.AUTOMATICO),
                createTestCase("Prueba de caso l√≠mite", "Array con un solo elemento", TestCase.TestCaseStatus.FALLADO, TestCase.TestCaseType.AUTOMATICO),
                createTestCase("Prueba de rendimiento", "Verificar tiempo de ejecuci√≥n con 1M elementos", TestCase.TestCaseStatus.NO_EJECUTADO, TestCase.TestCaseType.PERSONALIZADO),
                createTestCase("Prueba de caracteres especiales", "Validar manejo de Unicode y emojis", TestCase.TestCaseStatus.PASADO, TestCase.TestCaseType.AUTOMATICO),
                createTestCase("Prueba de concurrencia", "M√∫ltiples usuarios simult√°neos", TestCase.TestCaseStatus.PASADO, TestCase.TestCaseType.PERSONALIZADO),
                createTestCase("Prueba de SQL injection", "Verificar protecci√≥n contra inyecci√≥n SQL", TestCase.TestCaseStatus.FALLADO, TestCase.TestCaseType.AUTOMATICO),
                createTestCase("Prueba de memoria", "Validar no hay memory leaks", TestCase.TestCaseStatus.NO_EJECUTADO, TestCase.TestCaseType.PERSONALIZADO)
        );
        testCases.forEach(testCaseService::save);
    }

    private TestCase createTestCase(String title, String desc, TestCase.TestCaseStatus status, TestCase.TestCaseType type) {
        TestCase tc = new TestCase();
        tc.setTitle(title);
        tc.setDescription(desc);
        tc.setStatus(status);
        tc.setType(type);
        return tc;
    }

    private void initTrends() {
        List<Trend> trends = Arrays.asList(
                createTrend("#JavaScript", 15420, true),
                createTrend("#Python", 12350, true),
                createTrend("#React", 10890, true),
                createTrend("#MachineLearning", 9560, true),
                createTrend("#WebDevelopment", 8740, false),
                createTrend("#DataScience", 7320, true),
                createTrend("#Docker", 6150, false),
                createTrend("#Algorithms", 5890, false)
        );
        trends.forEach(trendService::save);
    }

    private Trend createTrend(String tag, Integer posts, Boolean trending) {
        Trend t = new Trend();
        t.setTag(tag);
        t.setPosts(posts);
        t.setTrending(trending);
        return t;
    }

    private void initPosts() {
        List<Post> posts = Arrays.asList(
                createPost("CodeMaster_92", "üë®‚Äçüíª", "Diamante", "Hace 2 horas",
                        "¬°Finalmente complet√© mi proyecto de Sistema de Reservas! üéâ Aprend√≠ much√≠simo sobre autenticaci√≥n JWT y manejo de estados en React. Gracias a todos por el apoyo! üí™",
                        null, 145, false),
                createPost("DevQueen", "üë©‚Äçüíª", "Platino", "Hace 5 horas",
                        "¬øAlguien m√°s est√° luchando con los conceptos de closures en JavaScript? He visto varios tutoriales pero a√∫n me cuesta entenderlo completamente ü§î",
                        null, 67, true),
                createPost("PythonGuru", "üêç", "Oro", "Hace 1 d√≠a",
                        "Acabo de terminar el curso de Machine Learning y WOW! ü§ñ Los algoritmos de clasificaci√≥n son fascinantes. Aqu√≠ va mi primer modelo predictivo:",
                        "ml-model-screenshot.png", 203, false),
                createPost("ReactNinja", "‚öõÔ∏è", "Platino", "Hace 3 horas",
                        "Tip del d√≠a: Siempre usa useCallback y useMemo con cuidado. La optimizaci√≥n prematura puede hacer tu c√≥digo m√°s dif√≠cil de mantener. ¬°Mide primero! üìä",
                        null, 89, true),
                createPost("DataWizard", "üìä", "Diamante", "Hace 6 horas",
                        "Termin√© mi dashboard de visualizaci√≥n de datos! Us√© D3.js para las gr√°ficas interactivas. El proyecto me tom√≥ 3 semanas pero vali√≥ totalmente la pena ‚ú®",
                        "dashboard-preview.png", 178, false),
                createPost("BackendKing", "‚öôÔ∏è", "Oro", "Hace 12 horas",
                        "Pregunta: ¬øCu√°l prefieren para APIs, REST o GraphQL? Estoy evaluando opciones para mi nuevo proyecto y me gustar√≠a escuchar experiencias reales ü§∑‚Äç‚ôÇÔ∏è",
                        null, 92, false),
                createPost("CloudMaster", "‚òÅÔ∏è", "Diamante", "Hace 8 horas",
                        "Acabo de obtener mi certificaci√≥n de AWS Solutions Architect! üèÜ El examen fue desafiante pero todo el estudio vali√≥ la pena. Ahora a por Kubernetes!",
                        "aws-certificate.png", 256, true),
                createPost("SecurityPro", "üîí", "Platino", "Hace 4 horas",
                        "Recordatorio importante: NUNCA almacenes contrase√±as en texto plano. Siempre usa bcrypt, argon2 o similar para hashear. La seguridad no es opcional! üõ°Ô∏è",
                        null, 134, true)
        );
        posts.forEach(postService::save);
    }

    private Post createPost(String user, String avatar, String level, String date, String content,
            String image, Integer likes, Boolean liked) {
        Post p = new Post();
        p.setUser(user);
        p.setAvatar(avatar);
        p.setLevel(level);
        p.setDate(date);
        p.setContent(content);
        p.setImage(image);
        p.setLikes(likes);
        p.setLiked(liked);
        return p;
    }
}
